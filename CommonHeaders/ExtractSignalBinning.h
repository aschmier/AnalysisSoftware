// provided by Gamma Conversion Group, $ALICE_ROOT/PWG4/GammaConv ;https://twiki.cern.ch/twiki/bin/view/ALICE/PWG4GammaConversion

#ifndef GAMMACONV_ExtractSignalBinning
#define GAMMACONV_ExtractSignalBinning

    #include "ConversionFunctionsBasicsAndLabeling.h"

    Int_t fStartPtBin                               = 0;
    Int_t fColumn                                   = 0;
    Int_t fRow                                      = 0;
    Int_t fNBinsPt                                  = 0;
    Double_t *fBinsPt                               = NULL;
    Int_t* fNRebin                                  = NULL;
    Int_t fNBinsClusterPt                           = 0;
    Double_t *fBinsClusterPt                        = NULL;
    Int_t fNBinsPtDCAzDist                          = 0;
    Double_t *fBinsPtDCAzDist                       = NULL;
    Int_t fExampleBin                               = 0;
    Double_t fExampleBinScaleFac                    = 1.0;
    Int_t fNBinsPeakPt                              = 12;
    Int_t nIterBGFit                                = 10;
    TString optionBGSmoothingStandard               = "BackDecreasingWindow,BackSmoothing3";
    TString optionBGSmoothingVar1                   = "BackDecreasingWindow,BackSmoothing5";
    TString optionBGSmoothingVar2                   = "BackDecreasingWindow,BackSmoothing7";
    Double_t fMaxYFracBGOverIntHist                 = 30;
    Double_t fBinsPeakPt[13]                        = { 0.0, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 2.0, 3.0,
                                                        4.0, 5.0, 7.0};
    Int_t fBinsPeakPtRebin[12]                      = { 4, 4, 2, 2, 2, 2, 2, 2, 2, 4,
                                                        4, 8};
    Double_t fBinsPeakPtHalf[13]                    = { 0.0, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 1.0, 1.5,
                                                        2.0, 2.5, 3.5};

    Double_t fBGFitRange_SubPiZero[2]               = {0,0};
    Double_t fBGFitRange_FixedPzPiZero[2]           = {0,0};


    //****************************************************************************************************
    //******************** Pt binning for pp, 0.9 TeV ****************************************************
    //****************************************************************************************************
    Double_t fBinsPi0900GeVPt[12]                   = { 0.0, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 2.0, 2.5,
                                                        3.5, 4.5};
    Int_t fBinsPi0900GeVPtRebin[11]                 = { 4, 4, 2, 2, 2, 2, 2, 2, 2, 4,
                                                        4};

    Double_t fBinsPi0900GeVPCMEMCPt[12]             = { 0.0, 0.8, 1.2, 1.4, 1.6, 2.0, 2.5, 3.0, 4.0, 5.0,
                                                        7.0, 10.0};
    Int_t fBinsPi0900GeVPCMEMCPtRebin[11]           = { 2, 5, 4, 4, 4, 4, 4, 4, 8, 8, 8};

    Double_t fBinsPi0900GeVEMCPt[13]                = { 0.0, 1.2, 1.6, 2.0, 2.5, 3.0, 3.5, 4.0, 5.0, 7.0,
                                                        10.0, 16.0};
    Int_t fBinsPi0900GeVEMCPtRebin[12]              = { 2, 8, 5, 4, 4, 5, 8, 8, 8, 16, 2,
                                                        2};

    Double_t fBinsEta900GeVPt[4]                    =  {0., 0.9, 1.8, 3.0};
    Int_t fBinsEta900GeVPtRebin[3]                  =  {8, 5, 5};
    Int_t fBinsPi0EtaBinning900GeVPtRebin[3]        =  {8, 4, 4};

    Double_t fBinsEta900GeVPCMEMCPt[6]              =  {0., 0.9, 1.8, 3.0, 5.0, 7.0};
    Int_t fBinsEta900GeVPCMEMCPtRebin[5]            =  {5, 16, 10, 20, 5};

    Double_t fBinsDirGamma900GeVPt[14]              = { 0.0, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 2.0, 2.5,
                                                        3.5, 4.5, 6.5, 8.5};
    Int_t fBinsDirGamma900GeVPtRebin[13]            = { 4, 4, 2, 2, 2, 2, 2, 2, 2, 4,
                                                        4, 4, 4};
    //****************************************************************************************************
    //******************** Pt binning for pp, 2.76 TeV ***************************************************
    //****************************************************************************************************
    Double_t fBinsPi02760GeVPt[25]                  = { 0.0, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0,
                                                        2.2, 2.4, 2.6, 3.0, 3.5, 4.0, 5.0, 6.0, 8.0, 10.0,
                                                        12.0, 15.0, 20., 25., 30.};
    Double_t fBinsPi02760GeVPtTrig13g[30]           = { 0.0, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0,
                                                        2.2, 2.4, 2.6, 3.0, 3.5, 4.0, 5.0, 6.0, 7.0, 8.0,
                                                        9.0, 10.0, 11.0, 12.0, 14.0, 16.0, 20., 24., 28., 30.};
    Double_t fBinsPi02760GeVPtTrig13gPCMEMC[29]     = { 0.0, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0,
                                                        2.2, 2.4, 2.6, 3.0, 3.5, 4.0, 5.0, 6.0, 7.0, 8.0,
                                                        9.0, 10.0, 12.0, 14.0, 16.0, 20., 24., 28., 30.};
    Double_t fBinsPi02760GeVPtTrig11a[26]           = { 0.0, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0,
                                                        2.2, 2.4, 2.6, 3.0, 3.5, 4.0, 5.0, 6.0, 7.0, 8.0,
                                                        9.0, 10.0, 12.0, 16.0, 20.0, 25};
    Double_t fBinsPi02760GeVPtTrigFullPCMEMC[26]    = { 0.0, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0,
                                                        2.2, 2.4, 2.6, 3.0, 3.5, 4.0, 5.0, 6.0, 7.0, 8.0,
                                                        9.0, 10.0, 12.0, 14.0, 16.0, 20.0 };
    Double_t fBinsPi02760GeVPtmEMC[34]              = { 0.0, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0,
                                                        2.2, 2.4, 2.6, 3.0, 3.5, 4.0, 5.0, 6.0, 7.0, 8.0,
                                                        9.0, 10.0, 11.0, 12.0, 14.0, 16.0, 18., 22., 26., 30.,
                                                        35.0, 40., 50., 60.};
    Double_t fBinsPi02760GeVPtDCA[15]               = { 0.0, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 2.0, 2.4,
                                                        3.0, 4.0, 6.0, 8.0, 10.0};
    Double_t fBinsPi02760GeVDalitzPt[8]             = { 0.0, 0.6, 1.0, 1.4, 2.0, 3.0, 5.0, 10.0};
    Int_t fBinsPi02760GeVDalitzPtRebin[7]           = { 5, 5, 4, 4, 4, 5, 5};
    Int_t fBinsPi02760GeVPtRebin[24]                = { 4, 4, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 4, 4, 4, 8,
                                                        8, 8, 8, 8};
    Int_t fBinsPi02760GeVPCMEMCPtRebin[24]          = { 4, 4, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 2, 4, 4, 4,
                                                        4, 4, 4, 4};
    Int_t fBinsPi02760GeVPCMEMCPtTrig13gRebin[28]   = { 4, 4, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 2, 4, 4, 4,
                                                        4, 4, 4, 8, 8, 8, 8, 8};
    Int_t fBinsPi02760GeVEMCPtTrig13gRebin[29]      = { 4, 4, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 2, 4, 4, 4,
                                                        4, 4, 4, 4, 8, 12, 12, 12, 12};
    Int_t fBinsPi02760GeVPCMEMCPtTrig11aRebin[25]   = { 4, 4, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 2, 4, 4, 5,
                                                        5, 5, 10, 10, 10};
    Int_t fBinsPi02760GeVPtmEMCRebin[32]            = { 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
                                                        4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
                                                        4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
                                                        4, 4 };
    Double_t fBinsPi02760GeVFullHaitaomEMC[34]      = { 0.0,    0.4,    0.6,    0.8,    1.0,    1.2,    1.4,    1.6,    1.8,    2.0,
                                                        2.2,    2.4,    2.6,    3.0,    3.5,    4.0,    5.0,    6.0,    7.0,    8.0,
                                                        9.0,    10.0,   11.0,   12.0,   13.0,   14.0,   16.0,   18.,    22.0,   26.0,
                                                        30.0,   35.0,   40.0,   50.0    };

    Double_t fBinsEta2760GeVDalitzPt[8]             = { 0., 0.5, 1.0, 1.5, 2.0, 2.5, 4., 6.};
    Int_t fBinsEta2760GeVDalitzPtRebin[7]           = { 8, 8, 5, 5, 5, 5, 8};
    Double_t fBinsEta2760GeVPtAsPbPb[10]            = { 0., 0.5, 1.0, 1.5, 2.0, 2.5, 4.0, 6.0, 8.0, 10.};
    Double_t fBinsEta2760GeVPt[14]                  = { 0., 0.5, 1.0, 1.5, 2.0, 3.0, 4.0, 6.0, 8.0, 10.0,
                                                        12.0, 14.0, 20.0, 30.0};
    Double_t fBinsEta2760GeVPtTrig11a[14]           = { 0., 0.5, 1.0, 1.5, 2.0, 3.0, 4.0, 6.0, 8.0, 10.0,
                                                        12.0, 16.0, 20.0, 30.0};
    Double_t fBinsEta2760GeVPtDCA[16]               = { 0., 0.4, 0.6, 0.8, 1.0, 1.125, 1.5, 1.75, 2.0, 2.5,
                                                        3.0, 4.0, 6.0, 10.0, 15.0, 20.0 };
    Int_t fBinsEta2760GeVPtRebinAsPbPb[9]           = { 8, 8, 5, 5, 5, 5, 8, 10, 10};
    Int_t fBinsEta2760GeVPtRebin[13]                = { 10, 10, 10, 10, 10, 10, 10, 16, 16, 16,
                                                        16, 16, 16};
    Int_t fBinsEta2760GeVPCMEMCPtRebin[13]          = { 15, 15, 12, 12, 10, 10, 10, 10, 10, 10,
                                                        10, 10, 10 };
    Int_t fBinsEta2760GeVPCMEMCPtEG2Rebin[13]       = { 15, 15, 12, 12, 10, 10, 10, 10, 12, 20,
                                                        15, 15, 15 };
    Int_t fBinsEta2760GeVPCMEMCPtTrigINT7Rebin[13]  = { 8, 10, 10, 10, 10, 10, 10, 12, 12, 12,
                                                        12, 12, 12 };
    Int_t fBinsEta2760GeVPCMEMCPtTrig11aRebin[13]   = { 8, 8, 8, 8, 8, 8, 8, 8, 10, 16,
                                                        16, 16, 16 };

    Int_t fBinsPi0EtaBinning2760GeVDalitzPtRebin[7] = { 8, 2, 2, 2, 2, 4, 4};
    Int_t fBinsPi0EtaBinning2760GeVPtRebin[13]      = { 8, 2, 2, 2, 2, 2, 2, 4, 4, 4,
                                                        4, 4, 4 };
    Int_t fBinsPi0EtaBinning2760GeVPCMEMCPtRebin[13] = {8, 2, 2, 2, 2, 2, 2, 2, 2, 4,
                                                        4, 5, 5 };
    Int_t fBinsPi0EtaBinning2760GeVPCMEMCPtTrig11aRebin[13] = {4, 2, 2, 2, 2, 2, 2, 2, 2, 4,
                                                        4, 5, 5 };

    Double_t fBinsDirGamma2760GeVPt[25]             = { 0.0, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0,
                                                        2.2, 2.4, 2.6, 3.0, 3.5, 4.0, 5.0, 6.0, 8.0, 10.0,
                                                        12.0, 15.0, 20., 25., 30.};
    Int_t fBinsDirGamma2760GeVPtRebin[24]           = { 4, 4, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 4, 4, 4, 8,
                                                        8, 8, 8, 8};
    Int_t fNBinsCluster2760GeVPt                    =  64;
    Double_t fBinsCluster2760GeVPt[65]              = { 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9,
                                                        1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9,
                                                        2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8,
                                                        4.0, 4.2, 4.4, 4.6, 4.8, 5.0, 5.2, 5.4, 5.6, 5.8,
                                                        6.0, 6.2, 6.4, 6.6, 6.8, 7.0, 7.4, 7.8, 8.2, 8.6,
                                                        9.0, 9.5, 10,  11,  12,  14,  16,  18,  20,  25,
                                                        30 , 35, 40, 45, 50 };

    //****************************************************************************************************
    //******************** Pt binning for pp, 5 TeV ******************************************************
    //****************************************************************************************************
    Double_t fBinsPi05TeVPt[27]                     = { 0.0, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0,
                                                        2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0,
                                                        4.5, 5.0, 5.5, 6.0, 7.0, 8.0, 10.0};
    Double_t fBinsPi05TeV2017Pt[44]                 = { 0.0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0,
                                                        2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.2,
                                                        4.4, 4.6, 4.8, 5.0, 5.2, 5.4, 5.6, 5.8, 6.0, 6.2, 6.4,
                                                        6.6, 6.8, 7.2, 7.6, 8.0, 8.6, 9.2, 10., 12., 16., 18.};


    Double_t fBinsPi05TeVPtDCal[16]                 = { 0.0, 1.0, 1.4, 1.8, 2.2,
                                                        2.6, 3.0, 3.4, 3.8, 4.4,
                                                        5.0, 6.0, 8.0, 12.0, 20.0,
                                                        30.0};

    // Double_t fBinsPi05TeVPtDCal[25]                 = { 0.0, 1., 1.2, 1.4, 1.6,
    //                                                     1.7, 1.8, 1.9, 2.0, 2.1,
    //                                                     2.2, 2.4, 2.6, 2.8, 3.0,
    //                                                     3.3, 3.6, 4.0, 4.5, 5.0,
    //                                                     6.0, 8.0, 12.0, 20.0, 30.0};


    Double_t fBinsPi05TeVPtPCMDCal[25]              = { 0.0, 1., 1.2, 1.4, 1.6,
                                                        1.7, 1.8, 1.9, 2.0, 2.1,
                                                        2.2, 2.4, 2.6, 2.8, 3.0,
                                                        3.3, 3.6, 4.0, 4.5, 5.0,
                                                        6.0, 8.0, 12.0, 20.0, 30.0};

    Double_t fBinsPi05TeVPtPCMEMC[35]               = { 0.0, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 1.0, 1.2, 1.4,
                                                        1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4,
                                                        3.6, 3.8, 4.0, 4.5, 5.0, 5.5, 6.0, 7.0, 8.0, 10.0,
                                                        12.0, 16.0, 20.0, 24.0, 30.0};
    Double_t fBinsPi05TeVPtEMC[35]                  = { 0.0, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 1.0, 1.2, 1.4,
                                                        1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4,
                                                        3.6, 3.8, 4.0, 4.5, 5.0, 5.5, 6.0, 7.0, 8.0, 10.0,
                                                        12.0, 16.0, 20.0, 24.0, 30.0};
    Double_t fBinsPi05TeVPtEMCTrigger1[51]          = { 0.0, 0.3, 0.4, 0.5, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6,
                                                        1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6,
                                                        3.8, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0,
                                                        8.5, 9.0, 9.5, 10., 11., 12., 13., 14., 15., 16.,
                                                        17., 18., 19., 20., 21., 22., 23., 24., 25., 30., 40.};
    Double_t fBinsPi05TeVPtDCA[16]                  = { 0.0, 0.3, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8,
                                                        2.0, 2.4, 3.0, 5.0, 10., 12.0};
    Double_t fBinsPi05TeV2017PtDCA[44]              = { 0.0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0,
                                                        2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.2,
                                                        4.4, 4.6, 4.8, 5.0, 5.2, 5.4, 5.6, 5.8, 6.0, 6.2, 6.4,
                                                        6.6, 6.8, 7.2, 7.6, 8.0, 8.6, 9.2, 10., 12., 16., 18.};
    Int_t fBinsPi05TeVPtRebin[26]                   = { 4, 4, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        4, 4, 4, 4 ,4, 4};
    Int_t fBinsPi05TeV2017PtRebin[43]               = { 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        4, 4, 4, 4 ,4, 4, 4, 4, 4, 4};
    Double_t fBinsPi05TeVPtRebinDCal[24]              = { 1, 1, 8, 4, 4,
                                                        4, 4, 4, 4, 4,
                                                        4, 4, 4, 4, 4,
                                                        4, 4, 4, 4, 4,
                                                        4, 4, 8, 16};
    Double_t fBinsPi05TeVPtRebinPCMDCal[24]              = { 1, 1, 8, 4, 4,
                                                        4, 4, 4, 4, 4,
                                                        4, 4, 4, 4, 4,
                                                        4, 4, 4, 4, 4,
                                                        4, 4, 8, 16};

    Int_t fBinsPi05TeVPCMEMCPtRebin[34]             = { 2, 2, 2, 2, 2, 2, 5, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 4, 8, 16, 16,
                                                        2, 2, 2, 2};
    Int_t fBinsPi05TeVEMCPtRebin[34]                = { 2, 2, 2, 2, 2, 2, 2, 2, 4, 4,
                                                        2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 4, 4, 4, 4, 4, 8,
                                                        8, 8, 8, 8};
    Int_t fBinsPi05TeVEMCPtRebinTrigger1[50]        = { 2, 2, 2, 2, 2, 2, 2, 4, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 4, 4, 4, 4, 4, 4,
                                                        4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
                                                        4, 4, 4, 4, 4, 4, 4, 4, 4, 4};
    Double_t fBinsDirGamma5TeVPt[24]                = { 0.0, 0.3, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0,
                                                        2.4, 2.8, 3.2, 3.6, 4.2, 4.8, 5.8, 7.0, 8.5, 10.0,
                                                        12.0, 16.0, 20.0, 25.0};
    Int_t fBinsDirGamma5TeVPtRebin[23]              = { 2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
                                                        1, 1, 1, 2, 2, 2, 2, 4, 4, 4,
                                                        5, 5, 5};
    Double_t fBinsEta5TeVPt[14]                     = { 0.0, 0.5, 1.0, 1.5, 2.0, 3.0, 4.0, 6.0, 8.0, 12.0,
                                                        13.0, 14.0, 20.0, 30.0};
    Double_t fBinsEta5TeV2017Pt[14]                 = { 0.0, 0.4, 0.8, 1.2, 1.6, 2.2, 3.0, 3.5, 4.0, 5.0,
                                                        6.0, 8.0, 12.0, 18.0};
    Int_t fBinsEta5TeVPtRebin[13]                   = { 8, 8, 5, 5, 5, 8, 8, 8, 8, 8,
                                                        10, 10, 10};
    Double_t fBinsEta5TeVPCMEMCPt[23]               = { 0., 0.3, 0.5, 0.7, 0.9, 1.1, 1.4, 1.8, 2.2, 2.6,
                                                        3.0, 3.5, 4.,  5.,  6., 8.,  10,  14., 16., 20.,
                                                        25., 30., 35.};
    Int_t fBinsEta5TeVPCMEMCPtRebin[22]             = { 5, 8, 10, 10, 8, 8, 8, 8, 8, 8,
                                                        8, 8, 8, 8, 10, 10, 16, 5, 5, 5, 5, 5};
    Double_t fBinsEta5TeVEMCPt[23]                  = { 0., 0.3, 0.5, 0.7, 0.9, 1.1, 1.4, 1.8, 2.2, 2.6,
                                                        3.0, 3.5, 4.,  5.,  6., 8.,  10,  12., 16., 20.,
                                                        25., 30., 35.};
    Int_t fBinsEta5TeVEMCPtRebin[22]                = { 8, 8, 8, 8, 8, 8, 8, 16, 10, 10,
                                                        8, 8, 8, 8, 8, 8, 10, 10, 8, 8, 8, 8};
    Double_t fBinsEta5TeVEMCPtTrigger1[30]          = { 0.0, 0.4, 0.8, 1.2, 1.6, 2.0, 2.4, 2.8, 3.2, 3.6,
                                                        4.0, 5.0, 6.0, 7.0, 8., 9., 10., 11., 12., 13.,
                                                        14., 15., 16., 17., 18., 19., 20., 25., 30., 35.};
    Int_t fBinsEta5TeVEMCPtRebinTrigger1[29]        = { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                                                        8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
                                                        8, 8, 8, 8, 8, 8, 8, 8, 8};
    Double_t fBinsEta5TeVPtDCA[9]                   = { 0.0, 0.4, 1.0, 1.5, 2.0, 3.0, 5.0, 7.0, 12.0};
    Double_t fBinsEta5TeV2017PtDCA[13]              = { 0.0, 0.4, 0.8, 1.2, 1.6, 2.2, 3.0, 3.5, 4.0, 5.0,
                                                        6.0, 8.0, 12.0};
    Double_t fBinsEtaPrim5TeVPt[8]                  = { 0.0, 0.5, 1.0, 2.0, 3.0, 4.0, 6.0, 10.0};
    Int_t fBinsEtaPrim5TeVPtRebin[7]                = { 8, 2, 2, 2, 2, 2, 2};
    Int_t fBinsPi0EtaBinning5TeVPtRebin[13]         = { 8, 2, 2, 2, 2, 2, 2, 4, 4, 4,
                                                        4, 4, 4 };
    Int_t fBinsPi0EtaBinning5TeVPtRebinEMCTrigger1[29]  = { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                                                            5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                                                            5, 5, 5, 5, 5, 5, 5, 5, 5};
    Int_t fBinsPi0EtaBinning5TeVPCMEMCPtRebin[13]   = { 8, 2, 2, 2, 2, 2, 2, 4, 4, 4,
                                                        4, 4, 4 };


    //****************************************************************************************************
    //******************** Pt binning for pp, 7 TeV ******************************************************
    //****************************************************************************************************
    Double_t fBinsPi07TeVPt[39]                     = { 0.0, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1,
                                                        1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 2.0,
                                                        2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8,
                                                        4.0, 4.5, 5.0, 5.5, 6.0, 7.0, 8.0,
                                                        10.0,12.0,16.0,20.0,25.0};
    Double_t fBinsPi07TeVPCMPHOSPt[44]              = { 0.0, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1,
                                                        1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1,
                                                        2.2, 2.3, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8,
                                                        4.0, 4.3, 4.6, 5.0, 5.5, 6.0, 6.5, 7.0, 8.0, 10.0,
                                                        12.0, 16.0, 20.0, 25.0};
    Double_t fBinsPi07TeVPtDCA[28]                  = { 0.0, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1,
                                                        1.2, 1.3, 1.4, 1.6, 1.8, 2.0, 2.4, 2.8, 3.2, 3.6,
                                                        4.0, 5.0, 6.0, 8.0, 12.0, 16.0, 20.0, 25.0};
    Double_t fBinsPi07TeVDalitzPt[23]               =  {0, 0.6, 0.7, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0,
                                                        2.2, 2.4, 2.6, 2.8, 3.2, 3.6, 4.0, 4.5, 5.0, 6.0,
                                                        8.0, 10.0, 15.};
    Int_t fBinsPi07TeVDalitzPtRebin[22]             =  {5, 5, 5, 5, 4, 4, 4, 4, 4, 4,
                                                        4, 5, 5, 5, 5,  5, 5, 5, 8, 8,
                                                        8, 10};
    Int_t fBinsPi07TeVPtRebin[38]                   = { 3, 2, 1, 1, 1, 1, 1, 1, 1,
                                                        1, 1, 1, 1, 1, 1, 1, 1, 1,
                                                        1, 1, 1, 1, 1, 1, 1, 1, 1,
                                                        1, 2, 3, 3, 4, 4, 4,
                                                        4, 4, 4, 5};
    Int_t fBinsPi07TeVPCMPHOSPtRebin[43]            = { 3, 2, 2, 2, 2, 2, 2, 2,
                                                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                                        1, 2, 2, 3, 3, 4, 4, 4, 5, 5,
                                                        5, 5, 1};
    Double_t fBinsPi07TeVPCMEMCPt[39]               = { 0.0, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1,
                                                        1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 2.0,
                                                        2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8,
                                                        4.0, 4.5, 5.0, 5.5, 6.0, 7.0, 8.0, 9.0,
                                                        10.0, 12.0, 16.0, 20.0};
    Int_t fBinsPi07TeVPCMEMCPtRebin[38]             = { 2, 2, 2, 2, 2, 2, 8, 5, 4, 4,
                                                        2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 4, 4, 3,
                                                        5, 8, 1};
    Double_t fBinsPi07TeVEMCPt[39]                  = { 0.0, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1,
                                                        1.2, 1.4, 1.6, 1.8, 2.0,
                                                        2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8,
                                                        4.0, 4.5, 5.0, 5.5, 6.0, 7.0, 8.0, 9.0,
                                                        10.0, 11.0, 12.0, 14.0, 16.0, 20.0, 25.0};
    Int_t fBinsPi07TeVEMCPtRebin[38]                = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                                        4, 4, 4, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 1, 5,
                                                        5, 5, 5, 8, 2, 2};

    Double_t fBinsEta7TeVPt[18]                     = { 0.0, 0.4, 0.6, 0.8, 1.0, 1.4, 1.8, 2.2, 2.6, 3.0,
                                                        3.5, 4.0, 5.0, 6.0, 8.0, 10.0, 12.0, 16.0};
    Double_t fBinsEta7TeVPCMPHOSPt[19]              = { 0.0, 0.8, 1.0, 1.4, 1.8, 2.2, 2.6, 3.0,
                                                        3.5, 4.0, 5.0, 6.0, 8.0, 10.0, 12.0, 16.0};
    Double_t fBinsEta7TeVPHOSPt[18]                 = { 0.0, 1.0, 1.4, 1.8, 2.2, 2.6, 3.0,
                                                        3.5, 4.0, 5.0, 6.0, 8.0, 10.0, 12.0, 16.0};
    Double_t fBinsEta7TeVPCMEMCPt[19]               = { 0.0, 0.4, 0.6, 1.0, 1.4, 1.8, 2.2, 2.6, 3.0, 3.5,
                                                        4.0, 5.0, 6.0, 8.0, 10.0, 12.0, 14.0, 20, 25.0};
    Int_t fBinsEta7TeVPtRebin[17]                   = { 8, 7, 7, 4, 4, 4, 4, 4, 5, 5,
                                                        5, 5, 5, 5, 6, 8, 8};
    Int_t fBinsPi0EtaBinning7TeVPtRebin[17]         = { 8, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 4};
    Int_t fBinsEta7TeVPCMPHOSPtRebin[18]            = { 8, 8, 8, 8, 5, 5, 5, 5, 5, 5,
                                                        10, 10, 8, 8, 8, 8, 8};
    Int_t fBinsEta7TeVPHOSPtRebin[17]               = { 8, 8, 8, 8, 8, 8, 8, 8, 8,
                                                        8, 8, 8, 8, 8, 8, 8};

    Int_t fBinsEta7TeVPCMEMCPtRebin[18]             = { 2, 2, 2, 12, 10, 8, 8, 8, 6, 8,
                                                        8, 10, 10, 16, 16, 16, 16, 20};
    Int_t fBinsPi0EtaBinning7TeVPCMEMCPtRebin[18]   = { 2, 2, 2, 4, 4, 2, 2, 2, 2, 2,
                                                        2, 4, 4, 4, 4, 4, 16, 20};
    Int_t fBinsEta7TeVEMCPtRebin[18]                = { 2, 2, 2, 2, 2, 2, 10, 10, 10, 8,
                                                        8, 8, 8, 10, 12, 20, 2, 2};
    Int_t fBinsPi0EtaBinning7TeVEMCPtRebin[18]      = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 4, 2, 2};
    Double_t fBinsEta7TeVDalitzPt[10]               = { 0., 0.6, 1.0, 1.4, 1.8, 2.2, 2.8, 4.4, 6., 10.};
    Int_t fBinsEta7TeVDalitzPtRebin[9]              = { 10, 10, 10, 10, 10, 10, 10, 10, 10};

    Int_t fBinsPi0EtaBinning7TeVDalitzPtRebin[9]    = { 8, 2, 2, 2, 2, 2, 4, 4, 4};

    Double_t fBinsEtaPrim7TeVPt[8]                  = { 0.0, 0.5, 1.0, 2.0, 3.0, 4.0, 6.0, 10.0};
    Int_t fBinsEtaPrim7TeVPtRebin[7]                = { 8, 2, 2, 2, 2, 2, 2};

    Double_t fBinsDirGamma7TeVPt[25]                = { 0.0, 0.3, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6,
                                                        1.8, 2.0, 2.2, 2.4, 2.7, 3.0, 3.5, 4.0,
                                                        4.5, 5.0, 6.0, 7.0, 9.0, 12., 16., 20.};
    Int_t fBinsDirGamma7TeVPtRebin[24]              = { 3, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
                                                        2, 2, 2, 3, 3, 4, 4, 4, 5, 5,
                                                        5, 5, 5};
    Int_t fBinsDirGamma7TeVEMCPtRebin[23]           = { 5, 5, 5, 5, 5, 4, 4, 3, 2, 2,
                                                        2, 2, 2, 3, 3, 4, 4, 4, 5, 5,
                                                        5, 5, 5};

    // Eta->pi+pi-pi0
    Double_t fBinsEtaPiPlPiMiPiZero7TevPtPCM[14]         = {0,1,1.4,1.6,1.8,2,2.5,3,3.5,4,5,6.,8.,10.};
    Int_t fBinsEtaPiPlPiMiPiZero7TevPtRebinPCM[13]       = {3,6,6,6,3,3,3,3,3,3,3,3,4};

    Double_t fBinsEtaPiPlPiMiPiZero7TevPtPCMEMC[12]         = {0,1,1.5,2,2.5,3,3.5,4,5,6.,10.,16};
    Int_t fBinsEtaPiPlPiMiPiZero7TevPtRebinPCMEMC[11]       = {4,4,4,4,4,4,4,6,6,6,6};

    Double_t fBinsEtaPiPlPiMiPiZero7TevPtEMC[16]         = {0,1,1.5,2,2.5,3,3.5,4,5,6.,8.,10.,12,14,16,20.};
    Int_t fBinsEtaPiPlPiMiPiZero7TevPtRebinEMC[15]       = {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4};

    Double_t fBinsEtaPiPlPiMiPiZero7TevPtPCMPHOS[12]         = {0,1,1.5,2,2.5,3,3.5,4,5,6.,8.,10.};
    Int_t fBinsEtaPiPlPiMiPiZero7TevPtRebinPCMPHOS[11]       = {4,4,4,4,4,4,4,4,4,4,4};

    Double_t fBinsEtaPiPlPiMiPiZero7TevPtPHOS[12]         = {0,1,1.5,2,2.5,3,3.5,4,5,6.,10.,14.};
    Int_t fBinsEtaPiPlPiMiPiZero7TevPtRebinPHOS[11]       = {4,4,4,4,4,4,4,4,4,4,4};

    // omega->pi+pi-pi0
    Double_t fBinsOmegaPiPlPiMiPiZero7TevPtPCM[14]         = {0,1,1.4,1.6,1.8,2,2.5,3,3.5,4,5,6.,8.,10.};
    Int_t fBinsOmegaPiPlPiMiPiZero7TevPtRebinPCM[13]       = {10,10,7,7,7,5,5,5,5,5,5,10,13};

    Double_t fBinsOmegaPiPlPiMiPiZero7TevPtPCMEMC[12]         = {0,1,1.5,2,2.5,3,3.5,4,5,6.,10.,16};
    Int_t fBinsOmegaPiPlPiMiPiZero7TevPtRebinPCMEMC[11]       = {10,10,10,10,10,10,8,8,7,7,7};

    Double_t fBinsOmegaPiPlPiMiPiZero7TevPtEMC[16]         = {0,1,1.5,2,2.5,3,3.5,4,5,6.,8.,10.,12,14,16,20.};
    Int_t fBinsOmegaPiPlPiMiPiZero7TevPtRebinEMC[15]       = {10,10,10,10,10,10,8,8,10,10,10,10,8,10,10};

    Double_t fBinsOmegaPiPlPiMiPiZero7TevPtPCMPHOS[12]         = {0,1,1.5,2,2.5,3,3.5,4,5,6.,8.,10.};
    Int_t fBinsOmegaPiPlPiMiPiZero7TevPtRebinPCMPHOS[11]       = {5,5,5,8,8,8, 8,8,10,16,16};

    Double_t fBinsOmegaPiPlPiMiPiZero7TevPtPHOS[12]         = {0,1,1.5,2,2.5,3,3.5,4,5,6.,10.,14.};
    Int_t fBinsOmegaPiPlPiMiPiZero7TevPtRebinPHOS[11]       = {10,10,10,10,8,8,8,8,8,8,8};


    //****************************************************************************************************
    //******************** Pt binning for pp, 8 TeV ******************************************************
    //****************************************************************************************************
    Double_t fBinsPi0Comb8TeVPt[47]                 = { 0.0, 0.3, 0.4, 0.5, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6,
                                                        1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6,
                                                        3.8, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0,
                                                        8.5, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0,
                                                        18.0, 20.0, 22.0, 26.0, 30.0, 35.0, 40.0};
    Double_t fBinsPi08TeVPt[34]                     = { 0.0, 0.3, 0.4, 0.5, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6,
                                                        1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6,
                                                        3.8, 4.0, 4.5, 5.0, 5.5, 6.0, 7.0, 8.0, 10.0, 12.0,
                                                        16.0, 20.0, 25.0, 30.0};
    Double_t fBinsPi08TeVPtPCMEMC[31]               = { 0.0, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.2,
                                                        2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.5,
                                                        5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 10.0, 12.0, 16.0, 25.0};
    Double_t fBinsPi08TeVTrigger1Pt[41]             = { 0.0, 0.3, 0.4, 0.5, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6,
                                                        1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6,
                                                        3.8, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0,
                                                        8.5, 9.0, 10.0, 11.0, 12.0, 14.0, 16.0, 20.0, 25.0, 30.0,
                                                        40.0};
    Double_t fBinsPi08TeVPCMEMCalTrigger1Pt[44]     = { 0.0, 0.3, 0.4, 0.5, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6,
                                                        1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6,
                                                        3.8, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0,
                                                        8.5, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0,
                                                        20.0, 22.0, 26.0};
    Double_t fBinsPi08TeVEMCalTrigger1Pt[45]        = { 0.0, 0.3, 0.4, 0.5, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6,
                                                        1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6,
                                                        3.8, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0,
                                                        8.5, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0,
                                                        20.0, 25.0, 30.0, 40.0};
    Double_t fBinsPi08TeVTrigger2Pt[43]             = { 0.0, 0.3, 0.4, 0.5, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6,
                                                        1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6,
                                                        3.8, 4.0, 4.5, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0,
                                                        12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 20.0, 22.0, 26.0,
                                                        30.0, 35.0, 40.0};
    Double_t fBinsPi08TeVEMCalTrigger2Pt[43]        = { 0.0, 0.3, 0.4, 0.5, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6,
                                                        1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6,
                                                        3.8, 4.0, 4.5, 5.0, 5.5, 6.0, 7.0, 8.0, 10.0, 11.0,
                                                        12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 20.0, 22.0, 26.0,
                                                        30.0, 35.0, 40.0};
    Double_t fBinsPi08TeVPCMTrigger2Pt[42]          = { 0.0, 0.3, 0.4, 0.5, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6,
                                                        1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6,
                                                        3.8, 4.0, 4.5, 5.0, 5.5, 6.0, 7.0, 8.0, 10.0, 11.0,
                                                        12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 20.0, 26.0, 30.0,
                                                        35.0, 40.0};
    Double_t fBinsPi08TeVPCMEMCalTrigger2Pt[44]     = { 0.0, 0.3, 0.4, 0.5, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6,
                                                        1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6,
                                                        3.8, 4.0, 4.5, 5.0, 6.0, 7.0, 8.0, 8.5, 9.0, 10.0, 11.0,
                                                        12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 20.0, 22.0, 26.0,
                                                        30.0, 35.0, 40.0};
    Double_t fBinsPi08TeVPtEMC[33]                  = { 0.0, 0.3, 0.4, 0.5, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6,
                                                        1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6,
                                                        3.8, 4.0, 4.5, 5.0, 5.5, 6.0, 7.0, 8.0, 10.0, 12.0,
                                                        16.0, 20.0, 25.0};
    Double_t fBinsPi08TeVPtmEMC[58]                 = { 0.0, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0,
                                                        2.2, 2.4, 2.6, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0,
                                                        6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5, 10.0, 11.0, 12.0,
                                                        13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 22.0, 24.0,
                                                        26.0, 28.0, 30.0, 32.0, 34.0, 36.0, 38.0, 40.0, 45.0, 50.0,
                                                        55.0, 60.0, 65.0, 70.0, 80.0, 100.0, 125.0, 150.0};
    Double_t fBinsPi08TeVPtmEMCComb[61]             = { 0.0, 0.3, 0.4, 0.5, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6,
                                                        1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6,
                                                        3.8, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0,
                                                        8.5, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0,
                                                        18.0, 19.0, 20.0, 22.0, 24.0, 26.0, 28.0, 30.0, 32.0, 34.0,
                                                        36.0, 38.0, 40.0, 45.0, 50.0, 55.0, 60.0, 65.0, 70.0, 80.0,
                                                        100.0};
    Double_t fBinsPi08TeVPtDCA[24]                  = { 0.0, 0.3, 0.4, 0.5, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 2.0,
                                                        2.4, 2.8, 3.2, 3.6, 4.0, 5.0, 6.0, 8.0, 10.0, 12.0,
                                                        16.0, 20.0, 25.0};
    Int_t fBinsPi08TeVPtRebin[33]                   = { 2, 5, 2, 1, 1, 1, 1, 1, 1, 1,
                                                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                                        2, 2, 2, 2, 2, 2, 2, 4, 4, 4,
                                                        5, 5, 5};
    Int_t fBinsPi08TeVEMCPtRebin[32]                = { 2, 2, 2, 2, 2, 2, 2, 4, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 4, 4, 4, 4, 4, 8,
                                                        2, 2};
    Int_t fBinsPi08TeVPCMTrigger1PtRebin[40]        = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 2, 2, 2, 4,
                                                        4, 4, 4, 6, 6, 6, 8, 2, 2, 2};
    Int_t fBinsPi08TeVPCMTrigger2PtRebin[42]        = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 2, 4, 4, 4,
                                                        4, 4, 6, 6, 6, 8, 8, 8, 8, 2,
                                                        2, 2};
    Int_t fBinsPi08TeVEMCTrigger1PtRebin[44]        = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 4, 4, 5, 4, 4, 4, 5, 4,
                                                        4, 4, 4, 4, 4, 5, 5, 5, 8, 10,
                                                        8, 2, 2, 2};
    Int_t fBinsPi08TeVEMCTrigger2PtRebin[42]        = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 2, 2, 4, 5,
                                                        5, 4, 5, 8, 8, 8, 8, 5, 2, 2,
                                                        2, 2};
    Int_t fBinsPi08TeVPCMEMCTrigger1PtRebin[43]     = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 4, 2, 5, 2, 5, 5,
                                                        2, 5, 10, 5, 16, 5, 5, 5, 10, 14, 5,
                                                        8, 2};
    Int_t fBinsPi08TeVPCMEMCTrigger2PtRebin[43]     = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 2, 2, 10, 16, 10,
                                                        10, 8, 10, 8, 16, 8, 8, 10, 16, 10,
                                                        10, 2};
    Int_t fBinsPi08TeVPCMEMCPtRebin[30]             = { 2, 2, 4, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        4, 4, 4, 4, 5, 5, 5, 8, 16, 2};
    Int_t fBinsPi08TeVPtmEMCRebin[55]               = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                                        1, 1, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 4, 4, 4, 4, 4, 4,
                                                        4, 4, 4, 4, 4, 4, 4, 4, 5, 5,
                                                        5, 5, 5, 5, 5};

    Double_t fBinsEtaComb8TeVPt[27]                 = { 0.5, 0.8, 1.1, 1.4, 1.7, 2.0, 2.4, 2.8, 3.2, 3.6,
                                                        4.0, 4.5, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 12.0, 14.0, 16.0,
                                                        18.0, 20.0, 25.0, 30.0, 35.0, 40.0};
    Double_t fBinsEta8TeVPt[22]                     = { 0.0, 0.5, 0.8, 1.1, 1.4, 1.7, 2.0, 2.4, 2.8, 3.2, 3.6,
                                                        4.0, 5.0, 6.0, 7.0, 8.0, 10., 12., 14., 16., 18., 20.};
    Double_t fBinsEta8TeVEMCPt[22]                  = { 0.0, 0.4, 0.8, 1.2, 1.6, 2.0, 2.4, 2.8, 3.2, 3.6,
                                                        4.0, 4.5, 5.0, 6.0, 7., 8., 10., 12., 14., 16., 18., 20.};
    Double_t fBinsEta8TeVPCMEMCPt[23]               = { 0.0, 0.8, 1.1, 1.4, 1.7, 2.0, 2.4, 2.8, 3.2, 3.6,
                                                        4.0, 4.5, 5.0, 6.0, 7.0, 8.0, 9.0, 10., 12., 14., 16., 18., 20.};
    Double_t fBinsEta8TeVTrigger1Pt[25]             = { 0.0, 0.4, 0.8, 1.2, 1.6, 2.0, 2.4, 2.8, 3.2, 3.6,
                                                        20.0, 25.0, 30.0, 40.0};
    Double_t fBinsEta8TeVEMCTrigger1Pt[26]          = { 0.0, 0.4, 0.8, 1.2, 1.6, 2.0, 2.4, 2.8, 3.2, 3.6,
                                                        4.0, 4.5, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 12.0, 14.0, 16.0, 18.0,
                                                       20.0, 25.0, 30.0, 40.0};
    Double_t fBinsEta8TeVTrigger2Pt[24]             = { 0.0, 0.4, 0.8, 1.2, 1.6, 2.0, 2.4, 2.8, 3.2, 3.6,
                                                        4.0, 5.0, 6.0, 8.0, 10.0, 12.0, 14.0, 16.0, 18.0, 20.0,
                                                        25.0, 30.0, 35.0, 40.};
    Double_t fBinsEta8TeVPCMTrigger1Pt[26]          = { 0.0, 0.4, 0.8, 1.2, 1.6, 2.0, 2.4, 2.8, 3.2, 3.6,
                                                        4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 8.0, 10.0, 12.0,
                                                        14.0, 16.0, 20.0, 25.0, 30.0, 40.0};
    Double_t fBinsEta8TeVPCMTrigger2Pt[24]          = { 0.0, 0.4, 0.8, 1.2, 1.6, 2.0, 2.4, 2.8, 3.2, 3.6,
                                                        4.0, 5.0, 6.0, 8.0, 10.0, 12.0, 14.0, 16.0, 18.0, 20.0,
                                                        25.0, 30.0, 35.0, 40.};
    Int_t fBinsEta8TeVPtRebin[21]                   = { 5, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6,
                                                        6, 8, 8, 10, 16, 20, 5, 5, 5};
    Int_t fBinsEta8TeVEMCPtRebin[21]                = { 4, 4, 4, 16, 10, 16, 8, 8, 10, 8, 8, 8,
                                                        8, 8, 10, 16, 16, 16, 20, 4, 4};
    Int_t fBinsEta8TeVPCMEMCPtRebin[22]             = { 2, 2, 10, 10, 8, 8, 8, 8, 8, 8, 8, 8,
                                                        8, 8, 16, 16, 16, 20, 20, 20, 20, 20};
    Int_t fBinsEta8TeVPCMTrigger1PtRebin[26]        = { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                                                        5, 5, 5, 6, 6, 6, 6, 6, 8, 8,
                                                        8, 8, 10, 10, 16, 2};
    Int_t fBinsEta8TeVPCMTrigger2PtRebin[23]        = { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                                                        5, 5, 5, 8, 8, 8, 8, 8, 8, 8,
                                                        10, 20, 5};
    Int_t fBinsEta8TeVEMCTrigger1PtRebin[25]        = { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                                                        5, 5, 5, 8, 8, 8, 6, 8, 5, 8, 8, 10,
                                                        10, 20, 2};
    Int_t fBinsEta8TeVEMCTrigger2PtRebin[23]        = { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                                                        5, 5, 5, 16, 16, 10, 10, 8, 8, 8,
                                                       10, 10, 5};
    Int_t fBinsEta8TeVPCMEMCTrigger1PtRebin[24]     = { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                                                       10, 10, 8, 8, 10, 10, 12, 5, 10, 10, 20,
                                                        5, 5, 5};
    Int_t fBinsEta8TeVPCMEMCTrigger2PtRebin[23]     = { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                                                        5, 5, 5, 20, 25, 20, 20, 16, 20, 16,
                                                       20, 20, 2};

    Int_t fBinsPi0EtaBinning8TeVPtRebin[19]         = { 8, 1, 1, 1, 1, 1, 1, 2, 2, 2,
                                                        2, 4, 4, 4, 4, 4, 4, 4, 4};
    Int_t fBinsPi0EtaBinning8TeVPCMEMCPtRebin[19]   = { 8, 2, 2, 2, 2, 2, 2, 4, 4, 4,
                                                        4, 4, 4, 8, 8, 8, 8, 8, 8};

    Int_t fNBinsCluster8TeVPt                       =  73;
    Double_t fBinsCluster8TeVPt[74]                 =  {0.0,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9,
                                                        1.0,  1.1,  1.2,  1.3,  1.4,  1.5,  1.6,  1.7,  1.8,  1.9,
                                                        2.0,  2.2,  2.4,  2.6,  2.8,  3.0,  3.2,  3.4,  3.6,  3.8,
                                                        4.0,  4.2,  4.4,  4.6,  4.8,  5.0,  5.2,  5.4,  5.6,  5.8,
                                                        6.0,  6.2,  6.4,  6.6,  6.8,  7.0,  7.4,  7.8,  8.2,  8.6,
                                                        9.0,  9.5,  10,   10.5, 11,   11.5, 12.,  13.,  14.,  15.,
                                                        16.,  17.,  18.,  19.,  20.,  22.,  24.,  26.,  28.,  30.,
                                                        35,   40,   45,   50};
    Int_t fNBinsCluster8TeVmEMCPt                   =  83;
    Double_t fBinsCluster8TeVmEMCPt[84]             = { 0.0,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9,
                                                        1.0,  1.1,  1.2,  1.3,  1.4,  1.5,  1.6,  1.7,  1.8,  1.9,
                                                        2.0,  2.2,  2.4,  2.6,  2.8,  3.0,  3.2,  3.4,  3.6,  3.8,
                                                        4.0,  4.2,  4.4,  4.6,  4.8,  5.0,  5.2,  5.4,  5.6,  5.8,
                                                        6.0,  6.2,  6.4,  6.6,  6.8,  7.0,  7.4,  7.8,  8.2,  8.6,
                                                        9.0,  9.5,  10,   10.5, 11,   11.5, 12.,  13.,  14.,  15.,
                                                        16.,  17.,  18.,  19.,  20.,  22.,  24.,  26.,  28.,  30.,
                                                        35,   40,   45,   50,   55,   60,   65,   70,   75,   80,
                                                        85,   90,   95,   100 };
    Double_t fBinsDirGamma8TeVPt[25]                = { 0.0, 0.3, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6,
                                                        1.8, 2.0, 2.2, 2.4, 2.7, 3.0, 3.5, 4.0,
                                                        4.5, 5.0, 6.0, 7.0, 9.0, 12., 16., 20.};
    Int_t fBinsDirGamma8TeVPtRebin[24]              = { 3, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
                                                        2, 2, 2, 3, 3, 4, 4, 4, 5, 5,
                                                        5, 5, 5};

    Double_t fBinsDirGamma8TeVEMCalTriggerPt[42]    = { 0.0, 0.3, 0.4, 0.5, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6,
                                                        1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6,
                                                        3.8, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0,
                                                        8.5, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 16.0, 18.0, 20.0, 25.0, 30.0};
    Int_t fBinsDirGamma8TeVEMCalTriggerPtRebin[41]  = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 4, 4, 5, 4, 4, 4, 5, 4,
                                                        4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5};

    Double_t fBinsDirGammaTagging8TeVPt[28]         = { 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7,
                                                        0.8, 0.9, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0,
                                                        2.2, 2.4, 2.7, 3.0, 3.5, 4.0, 5.0,
                                                        6.0, 8.0, 12., 16., 20.};
    Int_t fBinsDirGammaTagging8TeVPtRebin[27]       = { 4, 4, 2, 2, 2, 2, 2, 2,
                                                        1, 1, 1, 1, 1, 1, 1, 1,
                                                        1, 1, 2, 2, 2, 4, 4, 8,
                                                        8, 8, 8};
    //****************************************************************************************************
    //******************** Pt binning for pp, 13 TeV *****************************************************
    //****************************************************************************************************

    Double_t fBinsPi013TeVPt[44]                    =    { 0.0, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1,
                                                            1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1,
                                                            2.2, 2.3, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8,
                                                            4.0, 4.3, 4.6, 5.0, 5.5, 6.0, 6.5, 7.0, 8.0,
                                                            10.0,12.0,16.0,20.0,25.0};             // Pi0  binning LHC16X


    Int_t fBinsPi013TeVPtRebin[43]                  = { 3, 2, 1, 1, 1, 1, 1, 1, 1, 1,
                                                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                                            1, 2, 2, 3, 3, 4, 4, 4, 4,
                                                            4, 4, 4, 5};

    Double_t fBinsPi013TeVPtDCA[28]                  = { 0.0, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1,
                                                            1.2, 1.3, 1.4, 1.6, 1.8, 2.0, 2.4, 2.8, 3.2, 3.6,
                                                            4.0, 5.0, 6.0, 8.0, 12.0, 16.0, 20.0, 25.0};



    Double_t fBinsPi013TeVDalitzPt[23]               =  {0, 0.6, 0.7, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0,
                                                            2.2, 2.4, 2.6, 2.8, 3.2, 3.6, 4.0, 4.5, 5.0, 6.0,
                                                            8.0, 10.0, 15.};
    Int_t fBinsPi013TeVDalitzPtRebin[22]             =  {5, 5, 5, 5, 4, 4, 4, 4, 4, 4,
                                                            4, 5, 5, 5, 5,  5, 5, 5, 8, 8,
                                                            8, 10};



//Double_t fBinsPi013TeVPtDCA[14]                  = { 0.0, 0.3, 0.4, 0.5,0.6,0.8, 1.0, 1.3, 1.7, 2.5, 4.0, 6.0,8.0, 12.0};           // Pi0 single period DCA binning

 //Double_t fBinsPi013TeVPtDCA[21]               = { 0.0, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0,
 //                                                  2.2, 2.4, 2.6, 2.9, 3.3, 3.9, 5.1, 6.5, 8.0, 11.0,
//                                                  16.0};                                                  // Pi0 merged period DCA binning (3 periods)
    Double_t fBinsPi013TeVPCMEMCPt[38]              = { 0.0, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0,       // Pi0 PCM-EMC merged period binning (3 periods)
                                                        2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0,
                                                        4.4, 4.8, 5.2, 5.6, 6.0, 7.0, 8.0, 9.0, 10.0, 12.0,
                                                        14.0, 16.0, 18.0, 20.0, 25.0, 30.0, 35.0, 40.0};
    Int_t fBinsPi013TeVPCMEMCPtRebin[37]            = { 4, 4, 2, 2, 2, 2, 2, 2, 2, 2,                           // Rebinning Pi0
                                                        2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 4, 4, 4, 4,
                                                        4, 4, 8, 8, 8, 8, 8};
    Double_t fBinsEta13TeVPt[18]                     = { 0.0, 0.4, 0.6, 0.8, 1.0, 1.4, 1.8, 2.2, 2.6, 3.0,
							 3.5, 4.0, 5.0, 6.0, 8.0, 12.0, 16.0, 25.0};

    Int_t fBinsEta13TeVPtRebin[17]                  = { 8, 7, 7, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 8, 8};

    //Double_t fBinsEta13TeVPtDCA[6]                  = { 0., 0.4, 1.1, 1.6, 2.2, 4.0};                           // Eta DCA binning for LHC15f
    Double_t fBinsEta13TeVPtDCA[10]                = { 0.0, 0.4, 0.7, 1.0, 1.5, 2.0, 3.0, 5.0, 7.0, 12.0};          // Eta DCA binning forLHC15f+LHC15h+LHC15i

    Double_t fBinsEta13TeVDalitzPt[10]               = { 0., 0.6, 1.0, 1.4, 1.8, 2.2, 2.8, 4.4, 6., 10.};
    Int_t fBinsEta13TeVDalitzPtRebin[9]              = { 10, 10, 10, 10, 10, 10, 10, 10, 10};

    Int_t fBinsPi0EtaBinning13TeVDalitzPtRebin[9]    = { 8, 2, 2, 2, 2, 2, 4, 4, 4};


    Double_t fBinsEta13TeVPCMEMCPt[25]               = { 0.0, 0.8, 1.1, 1.4, 1.7, 2.0, 2.4, 2.8, 3.2, 3.6,
                                                         4.0, 4.5, 5.0, 6.0, 7.0, 8.0, 9.0, 10., 12., 14.,
                                                         16., 18., 20., 30., 40.};
    Int_t fBinsEta13TeVPCMEMCPtRebin[24]             = { 2, 2, 10, 10, 8, 8, 8, 8, 8, 8,
                                                         8, 8, 8, 8, 16, 16, 16, 20, 20, 20,
                                                         20, 20, 20, 20};


    Int_t fBinsPi0EtaBinning13TeVPtRebin[13]        = { 8, 2, 2, 2, 2, 2, 2, 4, 4, 4,                           // rebinning Pi0EtaBinning
                                                        4, 4, 4 };
    Int_t fBinsPi0EtaBins13TeVPCMEMCPtRebin[24]     = { 8, 2, 2, 2, 2, 2, 2, 4, 4, 4,
                                                        4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
                                                        8, 8, 8, 8 };

    Double_t fBinsDirGamma13TeVPt[25]               = { 0.0, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0,
                                                        2.2, 2.4, 2.6, 2.8, 3.0, 3.4, 3.8, 4.2, 4.8, 5.8,
                                                        7.0, 8.5, 10, 12.0, 16.0};
    Int_t fBinsDirGamma13TeVPtRebin[29]             = { 4, 4, 4, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 4, 4, 4, 8, 8, 8, 8, 8};
    Double_t fBinsDirGamma13TeVPtDCAzDist[16]       = { 0.0, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0,
                                                        2.5, 4.0, 6.0, 9.0, 12.0, 16.0};
    // Eta->pi+pi-pi0
    Double_t fBinsEtaPiPlPiMiPiZero13TevPtPCM[20]         = {0,1,1.4,1.6,1.8,2,2.2,2.4,2.6,3,3.5,4,4.5,5,5.5,6.,7,8.,10.,15.};
    Int_t fBinsEtaPiPlPiMiPiZero13TevPtRebinPCM[19]       = {8,8,6,6,6,6,4,4,4,4,4,4,4,4,4,4,6,8,8};

    // omega->pi+pi-pi0
    Double_t fBinsOmegaPiPlPiMiPiZero13TevPtPCM[20]         = {0,1,1.4,1.6,1.8,2,2.2,2.4,2.6,3,3.5,4,4.5,5,5.5,6.,7,8.,10.,15.};
    Int_t fBinsOmegaPiPlPiMiPiZero13TevPtRebinPCM[19]        = {8,8,6,6,6,6,4,4,4,4,4,4,4,4,4,4,6,8,8};

    //****************************************************************************************************
    //******************** Pt binning for pp, 13 TeV low B ( 0.2T ) **************************************
    //****************************************************************************************************
    Double_t fBinsPi013TeVLowBPt[18]                = { 0.0, 0.1, 0.4, 0.6, 0.7, 0.8, 1.0, 1.2, 1.4, 1.6,
                                                        1.8, 2.0, 2.2, 2.5, 2.9, 3.5, 5.0, 10.0};
    Int_t fBinsPi013TeVLowBPtRebin[17]              = { 4, 4, 4, 4, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 4, 4, 8, 8, 8};
    Double_t fBinsPi013TeVLowBPtDCA[10]             = { 0.0, 0.1, 0.4, 0.7, 1.0,1.3, 1.7, 2.5, 4.0, 8.0};

    Double_t fBinsEta13TeVLowBPt[5]                 = { 0., 0.4, 2., 3., 6.};
    Int_t fBinsEta13TeVLowBPtRebin[6]               = { 15, 15, 10, 10, 10, 10};
    Double_t fBinsEta13TeVLowBPtDCA[5]              = { 0., 0.4, 2., 3., 6.};

    Int_t fBinsPi0EtaBinning13TeVLowBPtRebin[6]     = { 4, 4, 2, 4, 4, 4};

    Double_t fBinsDirGamma13TeVLowBPt[25]           = { 0.0, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0,
                                                        2.2, 2.4, 2.6, 2.8, 3.0, 3.4, 3.8, 4.2, 4.8, 5.8,
                                                        7.0, 8.5, 10, 12.0, 16.0};
    Int_t fBinsDirGamma13TeVLowBPtRebin[29]         = { 4, 4, 4, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 4, 4, 4, 8, 8, 8, 8, 8};
    Double_t fBinsDirGamma13TeVLowBPtDCAzDist[16]   = { 0.0, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0,
                                                        2.5, 4.0, 6.0, 9.0, 12.0, 16.0};

    //****************************************************************************************************
    //****************** Pt binning for pPb, 5.023 TeV ***************************************************
    //****************************************************************************************************
    // Pi0 Run 1
    Double_t fBinsPi0pPb5TeVPt[40]                  = { 0.0, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 1.0, 1.2, 1.4,   1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4,
                                                        3.6, 3.8, 4.0, 4.5, 5.0, 5.5, 6.0, 7.0, 8.0, 10.0,  12.0, 16.0, 18.0, 20.0, 22.0, 24.0, 26.0, 30.0, 35.0, 40.0};
    Double_t fBinsPi0pPb5TeVPtEMCTrig[45]           = { 0.0, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 1.0, 1.2, 1.4,   1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4,
                                                        3.6, 3.8, 4.0, 4.5, 5.0, 5.5, 6.0, 7.0, 8.0, 9.0,   10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 20.0,
                                                        22.0, 26.0, 30.0, 35.0, 40.0};
    Double_t fBinsPi0pPb5TeVEMCPt[37]               = { 0.0, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 1.0, 1.2, 1.4,   1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4,
                                                        3.6, 3.8, 4.0, 4.5, 5.0, 5.5, 6.0, 7.0, 8.0, 10.0,  12.0, 16.0, 20.0, 25.0, 30.0, 35.0, 40.0};
    Double_t fBinsPi0pPb5TeVPHOSPt[37]              = { 0.0, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 1.0, 1.2, 1.4,   1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4,
                                                        3.6, 3.8, 4.0, 4.5, 5.0, 5.5, 6.0, 7.0, 8.0, 10.0,  12.0, 16.0, 20.0, 25.0, 30.0, 35.0, 40.0};
    Double_t fBinsPi0pPb5TeVmEMCPt[32]              = { 0.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0,      19.0, 20.0, 22.0, 24.0, 26.0, 28.0, 30.0, 32.0, 34.0, 36.0,
                                                        38.0, 40.0, 45.0, 50.0, 55.0, 60.0, 65.0, 70.0, 80.0, 100.0,    125.0, 150.0};

    Double_t fBinsPi0pPb5TeVPtDCA[17]               = { 0.0, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 1.0, 1.2, 1.4,   1.8, 2.4, 3.5, 5.0, 7.0, 10.0, 14.0};
    Double_t fBinsPi0pPb5TeVCentPt[25]              = { 0.0, 0.4, 0.5, 0.6, 0.7, 0.8, 1.0, 1.2, 1.4, 1.6,   1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.5, 4.0, 5.0,
                                                        6.0, 8.0, 10.0, 12.0, 14.0};
    Int_t fBinsPi0pPb5TeVPtRebin[39]                = { 10, 8, 4, 2, 2, 1, 1, 1, 1, 1,      1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                                        1, 1, 1, 2, 2, 4, 5, 8, 8, 10,      10,10, 10, 10,10, 10,10,10,10};
    Int_t fBinsPi0pPb5TeVPCMEMCPtRebin[36]          = { 10, 8, 8, 8, 8, 4, 2, 1, 1, 1,      1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                                        1, 1, 1, 1, 2, 2, 4, 4, 5, 5,       8, 10, 10, 10, 10, 10};
    Int_t fBinsPi0pPb5TeVPCMEMCTrigPtRebin[44]      = { 10, 8, 8, 8, 8, 4, 4, 4, 4, 4,      4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
                                                        4, 4, 4, 4, 4, 4, 4, 4, 4, 4,       4, 4, 4, 4, 4, 8, 8, 8, 8, 8,
                                                        8, 10, 10, 10};
    Int_t fBinsPi0pPb5TeVPCMEMCTrigEG1PtRebin[44]   = { 10, 8, 8, 8, 8, 4, 4, 4, 4, 4,      4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
                                                        4, 4, 4, 4, 4, 4, 4, 4, 4, 4,       4, 4, 4, 4, 4, 4, 4, 4, 4, 8,
                                                        8, 10, 10, 10};
    Int_t fBinsPi0pPb5TeVPCMPHOSPtRebin[36]         = { 7 , 7 , 7 , 7 , 4, 3, 3, 3, 3, 3,   3 , 3 , 3 , 3 , 3, 3, 3, 3, 4, 4,
                                                        4 , 4 , 4 , 4 , 4, 5, 7, 7, 7, 7,   7, 7, 7, 7, 10, 10};
    Int_t fBinsPi0pPb5TeVEMCPtRebin[37]             = { 5, 4, 4, 4, 4, 4, 4, 4, 4, 4,       4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
                                                        4, 4, 4, 4, 4, 4, 4, 4, 4, 5,       10, 20, 20, 20, 20, 20, 20};
    Int_t fBinsPi0pPb5TeVPHOSPtRebin[36]            = { 5, 4 , 3 , 3 , 3, 3, 3, 3, 3, 3,    3, 3 , 3 , 3 , 3, 3, 3, 3, 3, 3,
                                                        3, 3 , 3 , 3 , 3, 3, 3, 3, 3, 3,    7, 11, 11, 11, 10, 10};
    Int_t fBinsPi0pPb5TeVCentPtRebin[24]            = { 10, 4, 4, 4, 4, 4, 4, 4, 4, 4,      4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
                                                        4, 5, 10, 10};
    Double_t fBinsPi0pPb5TeVDalitzPt[23]            = { 0, 0.6, 0.7, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0,       2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.6, 4.0, 5.0, 6.0,
                                                        8.0, 10., 15.};
    Int_t fBinsPi0pPb5TeVDalitzPtRebin[22]          = { 5, 5, 5, 5, 4, 4, 4, 4, 4, 4,       4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
                                                        8, 8};
    Double_t fBinsPi0pPb5TeVEMCDalitzPt[23]         = { 0, 0.6, 0.7, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0,     2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.6, 4.0, 5.0, 6.0,
                                                        8.0, 10., 15.};
    Int_t fBinsPi0pPb5TeVEMCDalitzPtRebin[22]       = { 5, 5, 8, 5, 4, 4, 4, 4, 4, 4,       4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
                                                        8, 8};
    Int_t fBinsPi0pPb5TeVmEMCPtRebin[31]            = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,       2, 2, 2, 2, 4, 4, 4, 4, 4, 4,
                                                        4, 4, 4, 5, 5, 5, 5, 5, 5, 5,       10 };

    // Pi0 Run 2
    Double_t fBinsPi0pPb5TeVEMCR2Pt[62]             = { 0.0, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8,   1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8,
                                                        2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8,   3.9, 4.0, 4.2, 4.4, 4.6, 4.8, 5.0, 5.2, 5.4, 5.6,
                                                        5.8, 6.0, 6.2, 6.4, 6.6, 6.8, 7.0, 7.5, 8.0, 8.5,   9.0, 9.5, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 18.0,
                                                        20.0, 25.0};

    Double_t fBinsPi0pPb5TeVmEMCR2Pt[32]            = { 0.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0,      19.0, 20.0, 22.0, 24.0, 26.0, 28.0, 30.0, 32.0, 34.0, 36.0,
                                                        38.0, 40.0, 45.0, 50.0, 55.0, 60.0, 65.0, 70.0, 80.0, 100.0,    125.0, 150.0};
    Int_t fBinsPi0pPb5TeVEMCR2PtRebin[61]           = { 5, 2, 2, 2, 2, 2, 2, 2, 2, 2,       2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 2, 2, 2, 2,       4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
                                                        4, 4, 4, 4, 4, 4, 4, 4, 4, 5,       5, 5, 5, 5, 10, 10, 10, 10, 10, 10,
                                                        20 };
    Int_t fBinsPi0pPb5TeVmEMCR2PtRebin[31]          = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,       2, 2, 2, 2, 4, 4, 4, 4, 4, 4,
                                                        4, 4, 4, 5, 5, 5, 5, 5, 5, 5,       10 };

    // Eta Run 1
    Double_t fBinsEtapPb5TeVPt[23]                  = { 0., 0.3, 0.5, 0.7, 0.9, 1.1, 1.4, 1.8, 2.2, 2.6,    3.0, 3.5, 4.,  5.,  6., 8.,  10,  12., 14., 16.,
                                                        20., 25., 30.};
    Double_t fBinsEtapPb5TeVEMCPt[22]               = { 0., 0.3, 0.5, 0.7, 0.9, 1.1, 1.4, 1.8, 2.2, 2.6,    3.0, 3.5, 4.,  5.,  6., 8.,  10,  12., 16., 20.,
                                                        25., 30.};
    Double_t fBinsEtapPb5TeVPHOSPt[20]              = { 0., 0.3, 0.5, 0.7, 0.9, 1.1, 1.4, 1.8, 2.2, 3.0,    4.,  5.,  6., 8.,  10,  12., 16., 20., 25., 30.};
    Double_t fBinsEtapPb5TeVPCMPHOSPt[21]           = { 0., 0.3, 0.5, 0.7, 1.1, 1.4, 1.8, 2.2, 2.6, 3.0,    3.5, 4.,  5.,  6., 8.,  10,  12., 16., 20., 25.,
                                                        30.};
    Double_t fBinsEtapPb5TeVPtEMCTrig[27]           = { 0., 0.3, 0.5, 0.7, 0.9, 1.1, 1.4, 1.8, 2.2, 2.6,    3.0, 3.5, 4.,  5.,  6., 7.,  8., 9., 10, 11.,
                                                        12., 13., 14., 18., 20., 24., 30.};
    Double_t fBinsEtapPb5TeVCentPt[15]              = { 0., 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 2.0, 2.5,    3.0, 4.,   6.,   8.,   10};
    Double_t fBinsEtapPb5TeVPtDCA[17]               = { 0.0, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 1.0, 1.2, 1.4,   1.8, 2.4, 3.5, 5.0, 7.0, 10.0, 14.0};
    Double_t fBinsEtapPb5TeVDalitzPt[10]            = { 0., 0.6, 1.0, 1.4, 1.8, 2.2, 2.8, 4.4, 6., 10.};

    Int_t fBinsEtapPb5TeVPtRebin[22]                = { 10, 8, 8, 8, 5, 5, 5, 5, 4, 4,          4, 5, 8, 8, 8, 8, 10, 10, 10, 10,
                                                        10, 10};
    Int_t fBinsEtapPb5TeVPCMEMCPtRebin[21]          = { 10, 10, 10, 10, 16, 10, 8, 8, 8, 8,     8, 8, 8, 8, 16, 16, 20, 20, 20, 20,
                                                        20};
    Int_t fBinsEtapPb5TeVPCMEMCTrigPtRebin[26]      = { 10, 10, 10, 10, 8, 8, 8, 8, 8, 8,       8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
                                                        8, 8, 8, 10, 16, 20};
    Int_t fBinsEtapPb5TeVPCMEMCTrigEG2PtRebin[26]   = { 10, 10, 10, 10, 8, 8, 8, 8, 8, 8,       8, 8, 8, 8, 8, 10, 10, 10, 10, 10,
                                                        10, 10, 10, 12, 20, 20};
    Int_t fBinsEtapPb5TeVPCMEMCTrigEMC7PtRebin[26]  = { 10, 10, 10, 10, 8, 8, 8, 8, 8, 8,       8, 8, 8, 8, 10, 10, 10, 10, 10, 10,
                                                        10, 10, 10, 10, 12, 20};
    Int_t fBinsEtapPb5TeVPCMPHOSPtRebin[20]         = { 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 21, 21, 21, 21, 21};
    Int_t fBinsEtapPb5TeVEMCPtRebin[21]             = { 10, 8, 8, 8, 8, 8, 8, 8, 8, 5,          5, 5, 5, 5, 8, 16, 16, 20, 20, 20,
                                                        20};
    Int_t fBinsEtapPb5TeVPHOSPtRebin[19]            = { 19, 17, 17, 17, 15, 15, 15, 15, 15, 15, 15, 15, 20, 25, 25, 25, 24, 19, 19};
    Int_t fBinsEtapPb5TeVCentPtRebin[14]            = { 10, 10, 8, 8, 8, 5, 5, 4, 4, 4,         4,  5,  8,  10};
    Int_t fBinsEtapPb5TeVDalitzPtRebin[9]           = { 10, 10, 10, 10, 10, 10, 10, 10, 10};

    // Eta Run 2
    Double_t fBinsEtapPb5TeVEMCR2Pt[30]             = { 0., 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0,    3.2, 3.4, 3.6, 3.8, 4.0, 4.5, 5.0, 5.5, 6.0, 7.0,
                                                        8.0, 9.0, 10.0, 12.0, 14.0, 16.0, 20.0, 25.0, 30.0, 40.0};
    Int_t fBinsEtapPb5TeVEMCR2PtRebin[29]           = { 10, 10, 10, 8, 8, 5, 4, 4, 4, 4,          4, 4, 4, 4, 4, 4, 4, 8, 8, 8,
                                                        8, 8, 8, 10, 16, 16, 16, 20, 20};
    Int_t fBinsEtapPb5TeVCentEMCR2PtRebin[29]       = { 20, 20, 16, 12, 12, 8, 8, 5, 5, 5,          5, 5, 5, 5, 8, 8, 8, 8, 8, 8,
                                                        8, 8, 8, 10, 16, 16, 16, 20, 20};

    // Pi0 Eta binning rebin factors Run 1
    Int_t fBinsPi0EtapPb5TeVPtRebin[22]             = { 8, 2, 1, 1, 1, 1, 1, 1, 1, 1,           1, 1, 2, 2, 2, 4, 4, 4, 4, 4,
                                                        4, 4};
    Int_t fBinsPi0EtapPb5TeVPCMEMCPtRebin[22]       = { 8, 2, 1, 1, 1, 1, 1, 1, 1, 1,           1, 1, 2, 2, 2, 4, 4, 4, 8, 10,
                                                        10, 10};
    Int_t fBinsPi0EtapPb5TeVPCMPHOSPtRebin[22]      = { 8, 2, 1, 1, 1, 1, 1, 1, 1, 1,           1, 1, 2, 2, 2, 4, 4, 4, 4, 4,
                                                        4, 4};
    Int_t fBinsPi0EtapPb5TeVEMCPtRebin[22]          = { 8, 4, 4, 4, 4, 4, 4, 4, 4, 4,           4, 4, 4, 4, 4, 4, 5, 5, 8, 10,
                                                        10, 10};
    Int_t fBinsPi0EtapPb5TeVPHOSPtRebin[22]         = { 8, 2, 1, 1, 1, 1, 1, 1, 1, 1,           1, 1, 1, 1, 1, 2, 2, 2, 4, 4,
                                                        4, 4};
    Int_t fBinsPi0EtapPb5TeVDalitzPtRebin[9]        = { 8, 2, 2, 2, 2, 2, 4, 4, 4};


    // Pi0 Eta binning rebin factors Run 2
    Int_t fBinsPi0EtapPb5TeVEMCR2PtRebin[29]        = { 4, 2, 2, 2, 2, 2, 2, 2, 2, 2,          2, 2, 2, 2, 2, 2, 2, 4, 4, 4,
                                                        4, 4, 4, 5, 5, 8, 8, 10, 20};

    // Eta Run 1 pi0, pi+, pi- body
    Double_t fBinsEtapPb5TeVPt3Body[15]             = { 0., 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 2.0, 2.5,    3.0, 4.0, 6.0, 8.0, 10};
    Int_t fBinsEtapPb5TeVPt3BodyRebin[14]           = { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,           5, 5, 5, 5};

    Double_t fBinsDirGammapPb5TeVPt[26]             = { 0.0, 0.4, 0.5, 0.6, 0.7, 0.8, 1.0, 1.2, 1.4, 1.6,   1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.2, 3.6, 4.0, 4.8,
                                                        5.6, 6.4, 7.2, 8.0, 10.0, 14.0};
    Double_t fBinsDirGammapPb5TeVPCMEMCPt[29]       = { 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 1.0,   1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.2,
                                                        3.6, 4.0, 4.8, 5.6, 6.4, 7.2, 8.0, 10.0, 14.0};
    Int_t fBinsDirGammapPb5TeVPtRebin[25]           = { 4, 2, 1, 1, 1, 1, 1, 1, 1, 1,           1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
                                                        2, 2, 4, 4, 4};
    Int_t fBinsDirGammapPb5TeVPCMEMCPtRebin[28]     = { 10, 4, 4, 2, 1, 1, 1, 1, 1, 1,          1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
                                                        2, 4, 4, 4, 4, 5, 5, 5 };
    //****************************************************************************************************
    //****************** Pt binning for pPb, 8 TeV *******************************************************
    //****************************************************************************************************
    Double_t fBinsPi0pPb8TeVPt[40]                  = { 0.0, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 1.0, 1.2, 1.4,
                                                        1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4,
                                                        3.6, 3.8, 4.0, 4.5, 5.0, 5.5, 6.0, 7.0, 8.0, 10.0,
                                                        12.0, 16.0, 18.0, 20.0, 22.0, 24.0, 26.0, 30.0, 35.0, 40.0};
    Double_t fBinsPi0pPb8TeVPtEMCTrig[60]            = { 0.0, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 1.0, 1.2, 1.4,
                                                         1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4,
                                                         3.6, 3.8, 4.0, 4.5, 5.0, 5.5, 6.0, 7.0, 8.0, 10.0,
                                                        12.0, 16.0, 18.0, 20.0, 22.0, 24.0, 26.0, 30.0, 35.0,
                                                        40.0, 45.0, 50.0, 55.0, 60.0, 65.0, 70.0, 80.0, 100.,
                                                        120., 140., 160., 180., 200.};
    Double_t fBinsPi0pPb8TeVEMCPt[37]               = { 0.0, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 1.0, 1.2, 1.4,
                                                        1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4,
                                                        3.6, 3.8, 4.0, 4.5, 5.0, 5.5, 6.0, 7.0, 8.0, 10.0,
                                                        12.0, 16.0, 20.0, 25.0, 30.0, 35.0, 40.0};
    Double_t fBinsPi0pPb8TeVPHOSPt[37]              = { 0.0, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 1.0, 1.2, 1.4,
                                                        1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4,
                                                        3.6, 3.8, 4.0, 4.5, 5.0, 5.5, 6.0, 7.0, 8.0, 10.0,
                                                        12.0, 16.0, 20.0, 25.0, 30.0, 35.0, 40.0};
    Double_t fBinsPi0pPb8TeVPtDCA[17]               = { 0.0, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 1.0, 1.2, 1.4,
                                                        1.8, 2.4, 3.5, 5.0, 7.0, 10.0, 14.0};
    Double_t fBinsPi0pPb8TeVCentPt[25]              = { 0.0, 0.4, 0.5, 0.6, 0.7, 0.8, 1.0, 1.2, 1.4, 1.6,
                                                        1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.5, 4.0, 5.0,
                                                        6.0, 8.0, 10.0, 12.0, 14.0};
    Int_t fBinsPi0pPb8TeVPtRebin[39]                = { 10, 8, 4, 2, 2, 1, 1, 1, 1, 1,
                                                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                                        1, 1, 1, 2, 2, 4, 5, 8, 8, 10,
                                                        10,10, 10, 10,10, 10,10,10,10};
    Int_t fBinsPi0pPb8TeVPCMEMCPtRebin[36]          = { 10, 8, 8, 8, 8, 4, 2, 1, 1, 1,
                                                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                                        1, 1, 1, 1, 2, 2, 4, 4, 5, 5,
                                                        8, 10, 10, 10, 10, 10};
    Int_t fBinsPi0pPb8TeVEMCTrigPtRebin[59]         = { 10, 8, 4, 2, 2, 1, 1, 1, 1, 1,
                                                         1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                                         1, 1, 1, 2, 2, 4, 5, 8, 8,10,
                                                        10,10, 10, 10,10, 10,10,10,10,
                                                        10,10, 10, 10,10, 10,10,10,10,
                                                        10,10, 10, 10,10, 10,10,10,10};
    Int_t fBinsPi0pPb8TeVPCMPHOSPtRebin[36]         = { 7 , 7 , 7 , 7 , 4, 3, 3, 3, 3, 3,
                                                        3 , 3 , 3 , 3 , 3, 3, 3, 3, 4, 4,
                                                        4 , 4 , 4 , 4 , 4, 5, 7, 7, 7, 7,
                                                        7, 7, 7, 7, 10, 10};
    Int_t fBinsPi0pPb8TeVEMCPtRebin[37]             = { 5, 4, 4, 4, 4, 4, 4, 4, 4, 4,
                                                        4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
                                                        4, 4, 4, 4, 4, 4, 4, 4, 4, 5,
                                                        10, 20, 20, 20, 20, 20, 20};
    Int_t fBinsPi0pPb8TeVPHOSPtRebin[36]            = { 5, 4 , 3 , 3 , 3, 3, 3, 3, 3, 3,
                                                        3, 3 , 3 , 3 , 3, 3, 3, 3, 3, 3,
                                                        3, 3 , 3 , 3 , 3, 3, 3, 3, 3, 3,
                                                        7, 11, 11, 11, 10, 10};
    Int_t fBinsPi0pPb8TeVCentPtRebin[24]            = { 10, 4, 4, 4, 4, 4, 4, 4, 4, 4,
                                                        4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
                                                        4, 5, 10, 10};
    Double_t fBinsPi0pPb8TeVDalitzPt[23]            = { 0, 0.6, 0.7, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0,
                                                        2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.6, 4.0, 5.0, 6.0,
                                                        8.0, 10., 15.};
    Int_t fBinsPi0pPb8TeVDalitzPtRebin[22]          = { 5, 5, 5, 5, 4, 4, 4, 4, 4, 4,
                                                        4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
                                                        8, 8};
    Double_t fBinsPi0pPb8TeVEMCDalitzPt[23]         = { 0, 0.6, 0.7, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0,
                                                        2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.6, 4.0, 5.0, 6.0,
                                                        8.0, 10., 15.};
    Int_t fBinsPi0pPb8TeVEMCDalitzPtRebin[22]       = { 5, 5, 8, 5, 4, 4, 4, 4, 4, 4,
                                                        4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
                                                        8, 8};

    Double_t fBinsEtapPb8TeVPt[23]                  = { 0., 0.3, 0.5, 0.7, 0.9, 1.1, 1.4, 1.8, 2.2, 2.6,
                                                        3.0, 3.5, 4.,  5.,  6., 8.,  10,  12., 14., 16.,
                                                        20., 25., 30.};
    Double_t fBinsEtapPb8TeVEMCPt[22]               = { 0., 0.3, 0.5, 0.7, 0.9, 1.1, 1.4, 1.8, 2.2, 2.6,
                                                        3.0, 3.5, 4.,  5.,  6., 8.,  10,  12., 16., 20.,
                                                        25., 30.};
    Double_t fBinsEtapPb8TeVPHOSPt[20]              = { 0., 0.3, 0.5, 0.7, 0.9, 1.1, 1.4, 1.8, 2.2, 3.0,
                                                        4.,  5.,  6., 8.,  10,  12., 16., 20., 25., 30.};
    Double_t fBinsEtapPb8TeVPCMPHOSPt[21]           = { 0., 0.3, 0.5, 0.7, 1.1, 1.4, 1.8, 2.2, 2.6, 3.0,
                                                        3.5, 4.,  5.,  6., 8.,  10,  12., 16., 20., 25.,
                                                        30.};
    Double_t fBinsEtapPb8TeVPtEMCTrig[27]           = { 0., 0.3, 0.5, 0.7, 0.9, 1.1, 1.4, 1.8, 2.2, 2.6,
                                                        3.0, 3.5, 4.,  5.,  6., 7.,  8., 9., 10, 11.,
                                                        12., 13., 14., 18., 20., 24., 30.};

    Double_t fBinsEtapPb8TeVCentPt[15]              = { 0.,  0.4,  0.6,  0.8,  1.0, 1.2, 1.4,  1.6,  2.0,  2.5,
                                                        3.0, 4.,   6.,   8.,   10};
    Double_t fBinsEtapPb8TeVPtDCA[17]               = { 0.0, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 1.0, 1.2, 1.4,
                                                        1.8, 2.4, 3.5, 5.0, 7.0, 10.0, 14.0};
    Int_t fBinsEtapPb8TeVPtRebin[22]                = { 10, 8,  8,  8,  5, 5,  5,  5,  4,  4,
                                                        4,   5,  8,  8,  8, 8,   10, 10, 10, 10,
                                                        10,  10};
    Int_t fBinsEtapPb8TeVPCMEMCPtRebin[21]          = { 10, 10,  10,  10,  16, 10,   8,  8,  8,  8,
                                                        8,   8,  8,  8,  16, 16,  20, 20, 20, 20,
                                                        20};
    Int_t fBinsEtapPb8TeVPCMEMCTrigPtRebin[26]      = { 10, 10,  10,  10,  8, 8,   8,  8,  8,  8,
                                                        8,   8,  8,  8,  8, 8,   8,  8,  8,  8,
                                                        8,   8,  8, 10, 16, 20};
    Int_t fBinsEtapPb8TeVPCMEMCTrigEG2PtRebin[26]   = { 10, 10,  10,  10,  8, 8,   8,  8,  8,  8,
                                                        8,   8,  8,  8,  8, 10,   10,  10,  10,  10,
                                                        10,   10,  10, 12, 20, 20};
    Int_t fBinsEtapPb8TeVPCMEMCTrigEMC7PtRebin[26]  ={ 10, 10,  10,  10,  8, 8,   8,  8,  8,  8,
                                                        8,   8,  8,  8,  10, 10,   10,  10,  10,  10,
                                                        10,   10,  10, 10, 12, 20};
    Int_t fBinsEtapPb8TeVPCMPHOSPtRebin[20]         = { 16,  16,  16,  16,  16,  16,  16,  16,  16, 16,
                                                        16,  16,  16,  16,  16,  21,  21,  21,  21, 21};
    Int_t fBinsEtapPb8TeVEMCPtRebin[21]             = { 10, 8,  8,  8,  8, 8,   8,  8,  8,  5,
                                                        5,   5,  5,  5,  8, 16,   16,  20,  20,  20,
                                                        20};
    Int_t fBinsEtapPb8TeVPHOSPtRebin[19]            = { 19,  17,  17,  17,  15,  15,  15,  15,  15,   15,
                                                        15,  15,  20,  25,  25,  25,  24,  19,  19};
    Int_t fBinsEtapPb8TeVCentPtRebin[14]            = { 10, 10, 8, 8, 8, 5,  5,  4,  4, 4,
                                                        4,  5,  8,  10};
    Double_t fBinsEtapPb8TeVDalitzPt[10]            = { 0., 0.6, 1.0, 1.4, 1.8, 2.2, 2.8, 4.4, 6., 10.};
    Int_t fBinsEtapPb8TeVDalitzPtRebin[9]           = { 10, 10, 10, 10, 10, 10, 10, 10, 10};

    Int_t fBinsPi0EtapPb8TeVPtRebin[22]             = { 8, 2, 1, 1, 1, 1, 1, 1, 1, 1,
                                                        1, 1, 2, 2, 2, 4, 4, 4, 4, 4,
                                                        4, 4};
    Int_t fBinsPi0EtapPb8TeVPCMEMCPtRebin[22]       = { 8, 2, 1, 1, 1, 1, 1, 1, 1, 1,
                                                        1, 1, 2, 2, 2, 4, 4, 4, 8, 10,
                                                        10, 10};
    Int_t fBinsPi0EtapPb8TeVPCMPHOSPtRebin[22]      = { 8, 2, 1, 1, 1, 1, 1, 1, 1, 1,
                                                        1, 1, 2, 2, 2, 4, 4, 4, 4, 4,
                                                        4, 4};
    Int_t fBinsPi0EtapPb8TeVEMCPtRebin[22]          = { 8, 4, 4, 4, 4, 4, 4, 4, 4, 4,
                                                        4, 4, 4, 4, 4, 4, 5, 5, 8, 10,
                                                        10, 10};
    Int_t fBinsPi0EtapPb8TeVPHOSPtRebin[22]         = { 8, 2, 1, 1, 1, 1, 1, 1, 1, 1,
                                                        1, 1, 1, 1, 1, 2, 2, 2, 4, 4,
                                                        4, 4};
    Int_t fBinsPi0EtapPb8TeVDalitzPtRebin[9]        = { 8, 2, 2, 2, 2, 2, 4, 4, 4};

    Double_t fBinsEtapPb8TeVPt3Body[15]             = { 0., 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 2.0, 2.5,
                                                        3.0, 4.0, 6.0, 8.0, 10};
    Int_t fBinsEtapPb8TeVPt3BodyRebin[14]           = { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                                                        5, 5, 5, 5};

    Double_t fBinsDirGammapPb8TeVPt[26]             = { 0.0, 0.4, 0.5, 0.6, 0.7, 0.8, 1.0, 1.2, 1.4, 1.6,
                                                        1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.2, 3.6, 4.0, 4.8,
                                                        5.6, 6.4, 7.2, 8.0, 10.0, 14.0};
    Int_t fBinsDirGammapPb8TeVPtRebin[25]           = { 4, 2, 1, 1, 1, 1, 1, 1, 1, 1,
                                                        1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
                                                        2, 2, 4, 4, 4};
    Double_t fBinsDirGammapPb8TeVPCMEMCPt[29]       = { 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 1.0,
                                                        1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.2,
                                                        3.6, 4.0, 4.8, 5.6, 6.4, 7.2, 8.0, 10.0, 14.0};
    Int_t fBinsDirGammapPb8TeVPCMEMCPtRebin[28]     = { 10, 4, 4, 2, 1, 1, 1, 1, 1, 1,
                                                        1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
                                                        2, 4, 4, 4, 4, 5, 5, 5 };

    //****************************************************************************************************
    //***************************** Pt binning for PbPb 2010, 2.76 TeV ***********************************
    //****************************************************************************************************
    Double_t fBinsPi0PbPb2760GeVPt[25]              = { 0.0, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0,
                                                        2.2, 2.4, 2.6, 3.0, 3.5, 4.0, 5.0, 6.0, 8.0, 10.0,
                                                        12.0, 14.0,16.0, 20.,25.};
    Double_t fBinsPi0PbPb2760GeVPtNew[18]           = { 0.0, 0.5, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.2,
                                                        2.4, 2.6, 3.0, 4.0, 6.0, 8.0, 10.0, 12.0};
    Double_t fBinsPi0PbPb2760GeVPeripheralPt[16]    = { 0.0, 0.5, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.5,
                                                        3.0, 4.0, 6.0, 8.0, 10.0, 12.0 };
    Double_t fBinsPi0PbPb2760GeVPtDCA[16]           = { 0.0, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0,
                                                        2.25, 2.5,3.0, 4.0, 6.0, 12.};
    Double_t fBinsPi0PbPb2760GeVPtDCAPer[12]        = { 0.0, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 2.0, 2.5, 3.,
                                                        6., 10.};
    Double_t fBinsEtaPbPb2760GeVPtDCA[14]           = { 0.0, 0.4, 0.6, 0.8, 1.0, 1.2, 1.5, 2.0, 2.5, 3.0,
                                                        4.0, 6.0, 10., 12.};
    Int_t fBinsPi0PbPb2760GeVPtRebin[24]            = { 10, 8, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 4, 4, 4, 4,
                                                        4, 8, 8, 8};
    Int_t fBinsPi0PbPb2760GeVPtRebinNew[17]         = { 10, 4, 4, 4, 4, 4, 4, 4, 4, 4,
                                                        4, 4, 4, 4, 5, 5, 8};
    Int_t fBinsPi0PbPb2760GeVPeripheralPtRebin[15]  = { 10, 4, 4, 4, 4, 4, 4, 4, 4, 4,
                                                        4, 4, 8, 8, 8};
    Double_t fBinsPi0PbPb2760GeVDalitzPt[10]        =  {0, 0.6, 1., 2.0, 3.0, 4.0, 5.0, 6.0, 10.0, 15.};
    Int_t fBinsPi0PbPb2760GeVDalitzPtRebin[9]       =  {5, 5, 5, 5, 5, 5, 5, 5, 5};

    Double_t fBinsEtaPbPb2760GeVDalitzPt[5]         =  {0.0, 1.5, 2.0, 4.0, 7.0};
    Int_t fBinsEtaPbPb2760GeVDalitzPtRebin[4]       =  {10, 5, 5, 5};
    Double_t fBinsEtaPbPb2760GeVPt[5]               = { 0.0, 1.5, 2.0, 4.0, 7.0};
    Int_t fBinsEtaPbPb2760GeVPtRebin[4]             = { 10, 8, 5, 5};

    Int_t fBinsPi0EtaBinningPbPb2760GeVPtRebin[4]   = { 10, 2, 2, 2};
    Int_t fBinsPi0EtaBinningPbPb2760GeVDalitzPtRebin[4]=  {10, 2, 2, 2};

    Double_t fBinsDirGammaPbPb2760GeVPt[20]         = { 0.0, 0.4, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.3,
                                                        2.7, 3.1, 3.5, 4.0, 4.5, 5.5, 6.5, 8.0, 11.0, 14.0};
    Int_t fBinsDirGammaPbPb2760GeVPtRebin[19]       = { 4, 4, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 4, 4, 4};

    //****************************************************************************************************
    //***************************** Pt binning for PbPb 2011, 2.76 TeV ***********************************
    //****************************************************************************************************
    //same as 10h binning but for the last bins = EMCal bins {4.0, 6.0, 8.0, 10.0, 12.0, 14.0, 20.0, 30.0};
    Double_t fBinsPi0PbPb2760GeVPtLHC11h[27]        = { 0.,  0.4, 0.6, 0.8, 1.,  1.2, 1.4, 1.6, 1.8, 2.,
                                                        2.2, 2.4, 2.6, 3.,  3.5, 4.,  5.,  6.,  8.,  10.,
                                                        12., 14., 16., 18., 20., 25., 30.};
    Int_t fBinsPi0PbPb2760GeVPtLHC11hRebin[26]      = {    10,   8,   2,   2,   2,   2,   2,   2,   2,   2,
                                                            2,   2,   2,   2,   2,   2,   4,   4,   4,   4,
                                                            5,   8,   8,   8,   10,  10 };
    Int_t fBinsPi0PbPb2760GeVPtLHC11hSemicRebin[26] = {    10,   5,   2,   2,   2,   2,   2,   2,   2,   2,
                                                            2,   2,   2,   2,   2,   2,   4,   4,   4,   5,
                                                            5,   8,   8,   8,   10,  10 };
    Double_t fBinsEtaPbPb2760GeVPtLHC11h[17]        = { 0.0, 0.6, 1.0, 1.4, 1.8, 2.2, 2.6, 3.0 ,3.5, 4.0,
                                                        5.0, 6.0, 8.0, 10,  12., 15., 19.};
    Int_t fBinsEtaPbPb2760GeVPtRebinLHC11h[16]      = {     10,  8,   8,   4,   4,   4,   5,  5,    8,   8,
                                                            8,   8,   10,  10,  10, 10};
    Double_t fBinsEtaPbPb2760GeVPtLHC11hLessBins[13]= { 0.0, 0.5, 1.0, 1.5, 2.0, 3.0, 4.0, 6.0, 8.0, 10.,
                                                        12.0, 15.0, 19.0};
    Int_t fBinsEtaPbPb2760GeVPtRebinLHC11hLessBins[14] = {    10,   8,   5,   5,   5,   5,   5,   8, 10, 10,
                                                        10, 10, 10, 10};

    Double_t fBinsDirGammaPbPb2760GeVPtLHC11h[23]   = { 0.0, 0.4, 0.9, 1.1,  1.3,  1.5, 1.7, 1.9, 2.1, 2.3, 2.5, 2.7, 3.,
                                                        3.3, 3.7, 4.1, 4.6,  5.4,  6.2,  7.,  8., 11., 14.};
    Int_t fBinsDirGammaPbPb2760GeVPtLHC11hRebin[22] = {2,2, 2,  2, 2, 2,    2,    2,   2,  2,  2,    2,   2,   2,  2,
                                                           2,   2,   4,   4,   4,   4,   4};
    Int_t fBinsDirGammaPbPb2760GeVPtLHC11hSemicRebin[22] = {2, 2, 2, 2, 2, 2,    2,    2,   2,  2,  2,    2,   2,   2,  2,
                                                           2,   2,   4,   4,   4,   4,   5};
    Double_t fBinsDirGammaPbPb2760GeVPtLHC11hVar2[19]   = {0.0, 0.4, 0.8, 1.,  1.2,  1.4, 1.6, 1.8, 2., 2.3, 2.6, 3.,
                                                            3.5, 4.,  5.,  6.,  8.,  10., 14.};
    Int_t fBinsDirGammaPbPb2760GeVPtLHC11hRebinVar2[18] = {2, 2, 2, 2,   2,   2,  2,  2,    2,   2,   2,  2,
                                                           2,   2,   4,   4,   4,   4};
    Int_t fBinsDirGammaPbPb2760GeVPtLHC11hSemicRebinVar2[18] = {2, 2, 2, 2,    2,   2,  2,  2,    2,   2,   2,  2,
                                                           2,   2,   4,   4,   4,   5};

    Int_t fBinsPi0PbPb2760GeVPtLHC11hPCMEMCRebin[26]= { 10, 4, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 4, 4, 4, 5,
                                                        5, 10, 10, 10, 10, 10 };
    Double_t fBinsEtaPbPb2760GeVPtLHC11hEMCBins[15] = { 0.0, 0.5, 1.0, 1.5, 2.0, 3.0, 4.0, 6.0, 8.0, 10.,
                                                        12., 15., 18., 24., 30.};

    //****************************************************************************************************
    //****************** Pt binning for PbPb, 5.02 TeV ***************************************************
    //****************************************************************************************************
    Double_t fBinsPi0PbPb5TeVPt[16]                 = { 0.0, 1.0, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 3.0,
                                                        3.5, 4.0, 5.0, 7.0, 9.0, 12.0};
    Double_t fBinsPi0PbPb5TeVEMCPt[25]              = { 0.0, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0,
                                                        2.2, 2.4, 2.6, 3.0, 3.5, 4.0, 5.0, 6.0, 8.0, 10.0,
                                                        12.0, 14.0,16.0, 20.,25.};
    Int_t fBinsPi0PbPb5TeVEMCPtRebin[24]            = { 10, 8, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 4, 4, 4, 4,
                                                        4, 8, 8, 8};
    Double_t fBinsPi0PbPb5TeVPCMEMCPt[25]           = { 0.0, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0,
                                                        2.2, 2.4, 2.6, 3.0, 3.5, 4.0, 5.0, 6.0, 8.0, 10.0,
                                                        12.0, 14.0,16.0, 20.,25.};
    Int_t fBinsPi0PbPb5TeVPCMEMCPtRebin[24]         = { 10, 8, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 4, 4, 4, 4,
                                                        4, 8, 8, 8};
    Double_t fBinsPi0PbPb5TeVPtDCA[14]              = { 0.0, 1.0, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 3.0,
                                                        3.5, 4.0, 5.0, 7.0};
    Int_t fBinsPi0PbPb5TeVPtRebin[15]               = { 10, 4, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        4, 4, 4, 4, 4};

    Double_t fBinsEtaPbPb5TeVPt[4]                  = { 0.0, 1.0, 3.0, 6.0};
    Int_t fBinsEtaPbPb5TeVPtRebin[3]                = { 10, 8, 8};
    Double_t fBinsEtaPbPb5TeVPtDCA[4]               = { 0.0, 1.0, 3.0, 6.0};
    Double_t fBinsEtaPbPb5TeVEMCPt[23]              = { 0.0, 0.4, 0.8, 1.2, 1.6, 2.0, 2.4, 2.8, 3.2, 3.6,
                                                        4.0, 5.0, 6.0, 8., 10., 12., 14., 16., 18., 20., 25., 30., 35.};
    Int_t fBinsEtaPbPb5TeVEMCPtRebin[22]            = { 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
                                                        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8};
    Double_t fBinsEtaPbPb5TeVPCMEMCPt[23]           = { 0.0, 0.4, 0.8, 1.2, 1.6, 2.0, 2.4, 2.8, 3.2, 3.6,
                                                        4.0, 5.0, 6.0, 8., 10., 12., 14., 16., 18., 20., 25., 30., 35.};
    Int_t fBinsEtaPbPb5TeVPCMEMCPtRebin[22]         = { 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
                                                        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8};

    Int_t fBinsPi0EtaBinningPbPb5TeVPtRebin[3]      = { 10, 2, 2};

    Double_t fBinsDirGammaPbPb5TeVPt[20]            = { 0.0, 0.4, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.3,
                                                        2.7, 3.1, 3.5, 4.0, 4.5, 5.5, 6.5, 8.0, 11.0, 14.0};
    Int_t fBinsDirGammaPbPb5TeVPtRebin[19]          = { 4, 4, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 4, 4, 4};

    //****************************************************************************************************
    //***************************** Pt binning for XeXe, 5.44 TeV ***********************************
    //****************************************************************************************************
    Double_t fBinsPi0XeXe5440GeVPt[26]              = { 0.0, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 1.0, 1.2, 1.4,
                                                        1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 3.0, 3.5, 4.0, 5.0,
                                                        6.0, 8.0, 10.0,12.0, 14.0, 20.0};
    Double_t fBinsPi0XeXe5440GeVPtDCA[16]           = { 0.0, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0,
                                                        2.25, 2.5,3.0, 4.0, 6.0, 12.};
    Double_t fBinsEtaXeXe5440GeVPtDCA[14]           = { 0.0, 0.4, 0.6, 0.8, 1.0, 1.2, 1.5, 2.0, 2.5, 3.0,
                                                        4.0, 6.0, 10., 12.};
    Int_t fBinsPi0XeXe5440GeVPtRebin[25]            = { 10, 8, 5, 5, 4, 4, 4, 4, 4, 2,
                                                        2, 2, 2, 4, 4, 4, 4, 4, 4, 4,
                                                        10, 12, 12, 12, 12};
    Int_t fBinsPi0XeXe5440GeVPtRebinCent[25]        = { 10, 8, 8, 8, 5, 5, 5, 4, 4, 4,
                                                        4, 4, 4, 4, 4, 4, 5, 5, 8, 8,
                                                        8, 12, 12, 12, 12};

    Double_t fBinsEtaXeXe5440GeVPt[10]              = { 0.0, 1.0, 1.5, 2.0, 2.5, 3.0, 4.0, 6.0, 8.0, 10.0};
    Int_t fBinsEtaXeXe5440GeVPtRebin[9]             = { 10, 10, 8, 8, 8, 8, 8, 8, 10};

    Int_t fBinsPi0EtaBinningXeXe5440GeVPtRebin[9]   = { 10, 4, 2, 2, 2, 2, 4, 4, 8};

    Double_t fBinsDirGammaXeXe5440GeVPt[20]         = { 0.0, 0.4, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.3,
                                                        2.7, 3.1, 3.5, 4.0, 4.5, 5.5, 6.5, 8.0, 11.0, 14.0};
    Int_t fBinsDirGammaXeXe5440GeVPtRebin[19]       = { 4, 4, 2, 2, 2, 2, 2, 2, 2, 2,
                                                        2, 2, 2, 2, 2, 2, 4, 4, 4};

    //****************************************************************************************************
    //****************** Pt binning for Inter/Extrapolations *********************************************
    //****************************************************************************************************
    Double_t fBinsInterAndExtrapolation[50]          = { 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9,
                                                         1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0,
                                                         2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0,
                                                         4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 8.0, 9.0,10.0,11.0,
                                                        12.0,13.0,14.0,15.0,16.0,18.0,20.0,25.0,30.0};
    Double_t fBinsInterAndExtrapolationFine[62]      = { 0.0, 0.1,0.12,0.14,0.16,0.18, 0.2,0.25, 0.3,0.35,
                                                         0.4,0.45, 0.5,0.55, 0.6,0.65, 0.7,0.75, 0.8,0.85,
                                                         0.9,0.95, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7,
                                                         1.8, 1.9, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4,
                                                         3.6, 3.8, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 8.0,
                                                         9.0,10.0,11.0,12.0,13.0,14.0,15.0,16.0,18.0,20.0,
                                                        25.0,30.0};
    //*************************************************************************************************
    //*********************  determine optimum number of rows and columns *****************************
    //*************************************************************************************************
    void GetOptimumNColumnsAndRows (Int_t totBins, Int_t startBin, Int_t &columns, Int_t &rows){
        if ( (totBins+1-startBin) < 5){
            columns     = 2;
            rows        = 2;
        } else if ( (totBins+1-startBin) < 7){
            columns     = 3;
            rows        = 2;
        } else if ( (totBins+1-startBin) < 9){
            columns     = 4;
            rows        = 2;
        } else if ( (totBins+1-startBin) < 10){
            columns     = 3;
            rows        = 3;
        } else if ( (totBins+1-startBin) < 13){
            columns     = 4;
            rows        = 3;
        } else if ( (totBins+1-startBin) < 16){
            columns     = 5;
            rows        = 3;
        } else if ( (totBins+1-startBin) < 21){
            columns     = 5;
            rows        = 4;
        } else if ( (totBins+1-startBin) < 25){
            columns     = 6;
            rows        = 4;
        } else if ( (totBins+1-startBin) < 31){
            columns     = 6;
            rows        = 5;
        } else if ( (totBins+1-startBin) < 36){
            columns     = 7;
            rows        = 5;
        } else if ( (totBins+1-startBin) < 41){
            columns     = 8;
            rows        = 5;
        } else if ( (totBins+1-startBin) < 45){
            columns     = 9;
            rows        = 5;
        } else if ( (totBins+1-startBin) < 60){
            columns     = 10;
            rows        = 6;
        } else {
            columns     = 10;
            rows        = 7;
        }
        cout << "nColumns: " << columns << "\t nRows: "  << rows << "\t nTotbins: " << (totBins+1-startBin) << endl;
    }
    //*************************************************************************************************
    //******************** Initialize Single bin for invariant mass plot ******************************
    //*************************************************************************************************
    Int_t ReturnSingleInvariantMassBinPlotting (    TString meson,
                                                    TString energy,
                                                    Int_t mode,
                                                    Int_t trigger,
                                                    Double_t &scaleFac,
                                                    Int_t triggerSet                    = -1,
                                                    TString directPhotonRunningOption   = ""  ){

        if (triggerSet != -1){
            if (energy.CompareTo("2.76TeV") == 0){
                if (triggerSet == 1)
                    trigger     = 52;
                if (triggerSet == 2)
                    trigger     = 85;
                if (triggerSet == 3)
                    trigger     = 83;
                if (triggerSet == 4)
                    trigger     = 51;
                if (triggerSet == 5)
                    trigger     = 01;
            } else if (energy.CompareTo("8TeV") == 0){
                if (triggerSet == 1)
                    trigger     = 52;
                if (triggerSet == 2)
                    trigger     = 81;
                if (triggerSet == 3)
                    trigger     = 53;
                if (triggerSet == 4)
                    trigger     = 82;
            }
        }

        if (meson.CompareTo("Pi0") == 0){
            if (energy.CompareTo("900GeV") == 0) {
                if (directPhotonRunningOption.CompareTo("directPhoton") != 0){
                    if (mode == 1)              // PCM-Dalitz
                        return 4;
                    else if (mode == 2 || mode == 13)
                        return 4;
                    else if (mode == 4 || mode == 12 )
                        return 4;
                    else
                        return 5;
                } else {
                    if (mode == 2)
                        return 4;
                    else if (mode == 4)
                        return 7;
                    else
                        return 5;
                }
            } else if (energy.CompareTo("2.76TeV") == 0) {
                if (mode == 0){             // PCM-PCM
                    return 7;
                } else if (mode == 1){      // PCM-Dalitz
                    return 3;
                } else if (mode == 2 || mode == 13) {     // PCM-EMC
                    switch (trigger){
                        case 0:             // INT1 13g
                        case 1:             // INT1 13g
                            return 7;
                            break;
                        case 3:             // INT1 11a
                            return 5;
                            break;
                        case 10:            // INT7 13g
                        case 11:            // INT8 13g
                            return 7;
                            break;
                        case 51:            // EMC1
                            return 21;
                            break;
                        case 52:            // EMC7
                            return 14;
                            break;
                        case 85:            // EG2
                            return 16;
                            break;
                        case 83:            // EG1
                            return 21;
                            break;
                        default:
                            return 7;
                            break;
                    }
                } else if ( mode == 4 || mode == 12  ){    // EMC-EMC
                    switch (trigger){
                        case 0:             // INT1 13g
                        case 1:             // INT1 13g
                        case 3:             // INT1 11a
                        case 10:            // INT7 13g
                        case 11:            // INT8 13g
                            return 9;
                            break;
                        case 51:            // EMC1
                            return 23;
                            break;
                        case 52:            // EMC7
                            return 15;
                            break;
                        case 85:            // EG2
                            return 18;
                            break;
                        case 83:            // EG1
                            return 24;
                            break;
                        default:
                            return 7;
                            break;
                    }
                } else if ( mode == 10 ){
                    switch (trigger){
                        case 0:             // INT1 13g
                        case 1:             // INT1 13g
                        case 3:             // INT1 11a
                        case 10:            // INT7 13g
                        case 11:            // INT8 13g
                            return 22;
                            break;
                        case 51:            // EMC1
                            return 24;
                            break;
                        case 52:            // EMC7
                            return 22;
                            break;
                        case 85:            // EG2
                            return 26;
                            break;
                        case 83:            // EG1
                            return 26;
                            break;
                        default:
                            return 20;
                            break;
                    }

                } else {
                    return 7;
                }
            } else if (energy.CompareTo("5TeV") == 0 || energy.CompareTo("5TeV2017") == 0) {
                if ( mode == 2 )
                    return 9;
                if ( mode == 4 )
                    return 24;
                if ( mode == 12 )
                    return 12;
                if ( mode == 13 )
                    return 12;
                else
                  return 14;
            } else if (energy.CompareTo("7TeV") == 0) {
                if ( mode == 0 )
                    return 4;
                else if ( mode == 1 )
                    return 5;
                else if ( mode == 3 )
                    return 4;
                else
                    return 14;
            } else if (energy.CompareTo("8TeV") == 0) {

                if (mode == 0){             // PCM- PCM
                    switch (trigger){
                        case 0:
                        case 1:
                        case 10:
                            return 7;
                        case 11:
                            return 3;       // INT triggers
                            break;
                        case 52:
                            return 33;
                        case 53:
                            return 33;      // EMC triggers
                            break;
                        case 81:
                            return 34;      // EGA triggers
                            break;
                        case 82:
                            return 40;      // EGA triggers
                            break;
                        default:
                            return 3;
                            break;
                    }
                } else if (mode == 2 || mode == 13){      // PCM-EMC
                    if (directPhotonRunningOption.CompareTo("directPhoton") == 0){
                        return 5;
                    } else if (directPhotonRunningOption.CompareTo("directPhotonTagging") == 0){
                        return 1;
                    } else {
                        switch (trigger){
                            case 0:
                            case 1:
                            case 10:
                            case 11:
                                return 3;       // INT triggers
                                break;
                            case 52:
                            case 53:
                                return 31;      // EMC triggers
                                break;
                            case 81:
                            case 82:
                                return 41;      // EGA triggers
                                break;
                            default:
                                return 3;
                                break;
                        }
                    }
                } else if (mode == 4 || mode == 12 ){      // EMC-EMC
                    if (directPhotonRunningOption.CompareTo("directPhoton") != 0 ){
                        switch (trigger){
                            case 0:
                            case 1:
                            case 10:
                            case 11:
                                return 8;      // INT triggers
                                break;
                            case 52:
                            case 53:
                                return 31;      // EMC triggers
                                break;
                            case 81:
                            case 82:
                                return 35;      // EGA triggers
                                break;
                            default:
                                return 13;
                                break;
                        }
                    } else {
                        switch (trigger){
                            case 0:
                            case 1:
                            case 10:
                            case 11:
                                return 7;      // INT triggers
                                break;
                            case 52:
                            case 53:
                                return 25;      // EMC triggers
                                break;
                            case 81:
                            case 82:
                                return 36;      // EGA triggers
                                break;
                            default:
                                return 13;
                                break;
                        }

                    }
                } else if (mode == 10){      // EMC-EMC
                    switch (trigger){
                        case 0:
                        case 1:
                        case 10:
                        case 11:
                            return 38;      // INT triggers
                            break;
                        case 52:
                        case 53:
                            return 45;      // EMC triggers
                            break;
                        case 81:
                        case 82:
                            return 37;      // EGA triggers
                            break;
                        default:
                            return 38;
                            break;
                    }
                } else {                    // other modes
                    return 3;
                }
            } else if (energy.CompareTo("13TeV") == 0) {
                if (mode == 0){
                    return 2;
                } else if ( mode == 1 ){
                    return 5;
                } else {
                    return 10;
                }
            } else if (energy.CompareTo("13TeVLowB") == 0) {
                return 2;
            } else if( energy.CompareTo("pPb_5.023TeV") == 0 ) {
                if (mode == 0){
                    return 7;
                } else if (mode == 1){
                    return 5;
                } else if (mode == 2 || mode == 13){
                    if (directPhotonRunningOption.CompareTo("directPhotonTagging") == 0){
                        return 10;
                    } else {
                        switch (trigger){
                            case 0:
                            case 1:
                            case 10:
                            case 11:
                                return 7;      // INT triggers
                                break;
                            case 51:
                            case 52:
                            case 53:
                                return 20;      // EMC triggers
                                break;
                            case 85:
                                return 26;
                                break;
                            case 81:
                            case 82:
                            case 83:
                                return 32;      // EGA triggers
                                break;
                            default:
                                return 7;
                                break;
                        }
                    }
                } else if (mode == 4 || mode == 12 ){
                    if (directPhotonRunningOption.CompareTo("directPhoton") == 0)
                        return 13;
                    else
                        return 25;
                } else if (mode == 5){
                    return 25;
                } else if (mode == 6){
                    return 7;
                } else if (mode == 7){
                    return 6;
                } else if (mode == 10){
                    return 6;
                } else {
                    return 7;
                }
            } else if( energy.CompareTo("pPb_5.023TeVRun2") == 0 ) {
                if (mode == 0){
                    return 7;
                } else if (mode == 1){
                    return 5;
                } else if (mode == 2 || mode == 13){
                    if (directPhotonRunningOption.CompareTo("directPhotonTagging") == 0){
                        return 10;
                    } else {
                        switch (trigger){
                            case 0:
                            case 1:
                            case 10:
                            case 11:
                                return 7;      // INT triggers
                                break;
                            case 51:
                            case 52:
                            case 53:
                                return 20;      // EMC triggers
                                break;
                            case 85:
                                return 26;
                                break;
                            case 81:
                            case 82:
                            case 83:
                                return 32;      // EGA triggers
                                break;
                            default:
                                return 7;
                                break;
                        }
                    }
                } else if (mode == 4 || mode == 12 ){
                    if (directPhotonRunningOption.CompareTo("directPhoton") == 0)
                        return 13;
                    else
                        return 25;
                } else if (mode == 5){
                    return 25;
                } else if (mode == 6){
                    return 7;
                } else if (mode == 7){
                    return 6;
                } else if (mode == 10){
                    return 6;
                } else {
                    return 7;
                }
            } else if( energy.CompareTo("pPb_8TeV") == 0 ) {
                if (mode == 0){
                    return 7;
                } else if (mode == 1){
                    return 5;
                } else if (mode == 5){
                    return 25;
                } else if (mode == 6){
                    return 7;
                } else if (mode == 7){
                    return 6;
                } else if (mode == 10){
                    switch (trigger){
                        case 10:            // INT7 13g
                            return 15;
                            break;
                        case 52:            // EMC7
                            return 15;
                            break;
                        case 85:            // EG2
                            return 18;
                            break;
                        case 83:            // EG1
                            return 24;
                            break;
                        default:
                            return 7;
                            break;
                    }
                } else {
                    return 7;
                }
            } else if( energy.CompareTo("PbPb_2.76TeV") == 0) {
                if (mode == 0){
                    scaleFac    = 10;
                    return 4;
                } else if (mode == 1){
                    scaleFac    = 20;
                    return 3;
                } else if (mode == 2 || mode == 13){
                    scaleFac    = 5;
                    return 8;
                } else if (mode == 4 || mode == 12 ){
                    scaleFac    = 1.5;
                    return 14;
                } else
                    return 4;
            } else if( energy.CompareTo("PbPb_5.02TeV") == 0 || energy.CompareTo("PbPb_5TeV") == 0) {
                if (mode == 0){
                    scaleFac    = 10;
                    return 4;
                } else if (mode == 1){
                    scaleFac    = 20;
                    return 3;
                } else if (mode == 2 || mode == 13){
                    scaleFac    = 5;
                    return 8;
                } else if (mode == 4 || mode == 12 ){
                    scaleFac    = 1.5;
                    return 18;
                } else
                    return 4;
            } else if( energy.CompareTo("XeXe_5.44TeV") == 0) {
                if (mode == 0){
                    scaleFac    = 2;
                    return 5;
                } else if (mode == 2){
                    scaleFac    = 2;
                    return 12;
                } else if (mode == 4){
                  scaleFac    = 2;
                  return 15;
                } else if (mode == 5){
                    scaleFac    = 2;
                    return 12;
                } else {
                    scaleFac    = 2;
                    return 10;
                }
            }
        } else if (meson.Contains("Eta")) {
            if (energy.CompareTo("900GeV") == 0) {
                if (mode == 2 || mode == 13)
                    return 2;
                else
                    return 1;
            } else if (energy.CompareTo("2.76TeV") == 0) {
                if (mode == 0){             // PCM-PCM
                    return 4;
                } else if (mode == 2 || mode == 13) {     // PCM-EMC
                    switch (trigger){
                        case 0:             // INT1 13g
                        case 1:             // INT1 13g
                        case 10:            // INT7 13g
                        case 11:            // INT8 13g
                            return 4;
                            break;
                        case 3:             // INT1 11a
                            return 4;
                            break;
                        case 51:            // EMC1
                            return 8;
                            break;
                        case 52:            // EMC7
                            return 5;
                            break;
                        case 85:            // EG2
                            return 7;
                            break;
                        case 83:            // EG1
                            return 9;
                            break;
                        default:
                            return 7;
                            break;
                    }
                } else if ( mode == 4 || mode == 12  ){    // EMC-EMC
                    switch (trigger){
                        case 3:             // INT1 11a
                            return 6;
                            break;
                        case 0:             // INT1 13g
                        case 1:             // INT1 13g
                        case 10:            // INT7 13g
                        case 11:            // INT8 13g
                            return 7;
                            break;
                        case 52:            // EMC7
                            return 5;
                            break;
                        case 51:            // EMC1
                            return 8;
                            break;
                        case 85:            // EG2
                            return 7;
                            break;
                        case 83:            // EG1
                            return 10;
                            break;
                        default:
                            return 4;
                            break;
                    }
                } else {
                    return 4;
                }
            } else if (energy.CompareTo("5TeV") == 0 || energy.CompareTo("5TeV2017") == 0) {
                if (mode == 2 )
                    return 8;
                else if (mode == 4 || mode == 12 )
                    return 9;
                else
                    return 8;
            } else if (energy.CompareTo("7TeV") == 0) {
                if (mode == 1 )
                    return 4;
                if (mode == 3 ){
                    return 2;

                } else if(mode == 40){
                    scaleFac        = 4.;
                    return 6;
                } else if(mode == 41){
                    scaleFac        = 1.;
                    return 10;
                } else if(mode == 42){
                    scaleFac        = 1.;
                    return 7;
                } else if(mode == 44){
                    scaleFac        = 1.;
                    return 11;
                } else if(mode == 45){
                    scaleFac        = 1.;
                    return 10;
                } else
                    return 6;
            } else if (energy.CompareTo("8TeV") == 0) {
                if (mode == 0){             // PCM- PCM
                    switch (trigger){
                        case 0:
                        case 1:
                        case 10:
                            return 3;       // INT triggers
                        case 11:
                            return 6;       // INT triggers
                            break;
                        case 52:
                            return 14;
                        case 53:
                            return 11;      // EMC triggers
                            break;
                        case 81:
                        case 82:
                            return 13;      // EGA triggers
                            break;
                        default:
                            return 6;
                            break;
                    }
                } else if (mode == 2 || mode == 13){      // PCM-EMC
                    switch (trigger){
                        case 0:
                        case 1:
                        case 10:
                        case 11:
                            return 7;       // INT triggers
                            break;
                        case 52:
                        case 53:
                            return 14;      // EMC triggers
                            break;
                        case 81:
                        case 82:
                            return 19;      // EGA triggers
                            break;
                        default:
                            return 6;
                            break;
                    }

                } else if (mode == 4 || mode == 12 ){      // EMC-EMC
                    switch (trigger){
                        case 0:
                        case 1:
                        case 10:
                        case 11:
                            return 7;      // INT triggers
                            break;
                        case 52:
                        case 53:
                            if(meson.CompareTo("Pi0EtaBinning") == 0) return 15;
                            return 14;      // EMC triggers
                            break;
                        case 81:
                        case 82:
                            if(meson.CompareTo("Pi0EtaBinning") == 0) return 18;
                            return 20;      // EGA triggers
                            break;
                        default:
                            return 9;
                            break;
                    }
                } else {                    // other modes
                    return 6;
                }
            } else if (energy.CompareTo("13TeV") == 0) {
                if (mode == 0){
                    return 2;
                } else if(mode == 40){
                    scaleFac        = 4.;
                    return 2;
                }else{
                    return 7;
                }
            } else if (energy.CompareTo("13TeVLowB") == 0) {
                return 2;
            } else if( energy.CompareTo("pPb_5.023TeV") == 0 || energy.CompareTo("pPb_5.023TeVRun2") == 0  ) {
                if (mode == 0){
    //                 scaleFac    = 2;
                    return 6;
                } else if (mode == 1){
                    return 4;
                } else if (mode == 2 || mode == 13){
                    switch (trigger){
                        case 0:
                        case 1:
                        case 10:
                        case 11:
                            if (meson.CompareTo("Eta") == 0) scaleFac = 4.0;
                            return 8;      // INT triggers
                            break;
                        case 51:
                        case 52:
                        case 53:
                            return 12;      // EMC triggers
                            break;
                        case 85:
                            return 17;
                            break;
                        case 81:
                        case 82:
                        case 83:
                            return 20;      // EGA triggers
                            break;
                        default:
                            return 6;
                            break;
                    }
                } else if (mode == 3){
                    return 11;
                } else if (mode == 4 || mode == 12 ){
                    return 10;
                } else if (mode == 5){
                    return 10;
                } else {
                    return 6;
                }
            } else if( energy.CompareTo("pPb_8TeV") == 0  ) {
                if (mode == 0){
    //                 scaleFac    = 2;
                    return 6;
                } else if (mode == 1){
                    return 4;
                } else if (mode == 2 || mode == 13){
                    switch (trigger){
                        case 0:
                        case 1:
                        case 10:
                        case 11:
                            if (meson.CompareTo("Eta") == 0) scaleFac = 4.0;
                            return 8;      // INT triggers
                            break;
                        case 51:
                        case 52:
                        case 53:
                            return 12;      // EMC triggers
                            break;
                        case 85:
                            return 17;
                            break;
                        case 81:
                        case 82:
                        case 83:
                            return 20;      // EGA triggers
                            break;
                        default:
                            return 6;
                            break;
                    }
                } else if (mode == 3){
                    return 11;
                } else if (mode == 4 || mode == 12 ){
                    return 10;
                } else if (mode == 5){
                    return 10;
                } else {
                    return 6;
                }
            } else if( energy.CompareTo("PbPb_2.76TeV") == 0) {
                if (mode == 0){
                    scaleFac    = 40;
                    return 4;
                } else if (mode == 2 || mode == 13){
                    scaleFac    = 2;
                    return 7;
                } else if (mode == 4 || mode == 12 ){
                    scaleFac    = 1;
                    return 9;
                } else
                    return 4;
            } else if( energy.CompareTo("PbPb_5.02TeV") == 0) {
                if (mode == 2 || mode == 13){
                    return 8;
                }else if (mode == 4 || mode == 12 ){
                    return 10;
                }else
                    return 1;
            } else if( energy.CompareTo("XeXe_5.44TeV") == 0) {
                if (mode == 0)
                    return 4;
                else if (mode == 2)
                    return 6;
                else
                    return 6;
            }
        } else if (meson.CompareTo("EtaPrim") == 0){
            return 3;
        } else if (meson.Contains("Omega")) {
            if(energy.CompareTo("13TeV") == 0) {
                if(mode == 40){
                    scaleFac        = 4.;
                    return 4;
                }
            } else {
                if(mode == 40){
                    scaleFac        = 4.;
                    return 5;
                } else if(mode == 41){
                    scaleFac        = 1.;
                    return 10;
                } else if(mode == 42){
                    scaleFac        = 1.;
                    return 7;
                } else if(mode == 44){
                    scaleFac        = 1.;
                    return 11;
                } else if(mode == 45){
                    scaleFac        = 1.;
                    return 10;
                } else{
                    scaleFac        = 2.;
                    return 2;
                }
            }

        } else {
            cout << "single bin for meson not defined" << endl;
            return 1;
        }
        cout << "meson not defined" << endl;
        return 0;
    }

    //*************************************************************************************************
    //******************** GetStartBin for general combination *****************************************
    //*************************************************************************************************
    Int_t GetStartBin(  TString   meson,
                        TString   energy,
                        Int_t     mode,
                        Int_t     specialTrigg  =-1,
                        TString   centrality    = "",
                        TString   minECut       = ""
    ){

        Int_t startPtBin = 0;
        if (meson.CompareTo("Pi0")==0){
            if (energy.CompareTo("2.76TeV") == 0){
                if ( mode == 0 ){
                    startPtBin     = 1;
                } else if ( mode == 1 ){
                    startPtBin     = 3;
                } else if ( mode == 2 || mode == 13 ){
                    startPtBin     = 3;
                } else if ( mode == 4 || mode == 12 ){
                    startPtBin     = 6;
                } else if ( mode == 5){
                    startPtBin     = 4;
                } else if ( mode == 10){
                    startPtBin     = 21;
                } else if (mode == 20){
                    startPtBin     = 1;
                }
            } else if (energy.CompareTo("5TeV") == 0 || energy.CompareTo("5TeV2017") == 0){
                if ( mode == 20 ){
                    startPtBin     = 1;
                }
            } else if (energy.CompareTo("8TeV") == 0){
                if ( mode == 0 ){
                    startPtBin     = 1;
                } else if ( mode == 1 ){
                    startPtBin     = 1;
                } else if ( mode == 2 || mode == 13 ){
                    startPtBin     = 2;
                } else if ( mode == 4 || mode == 12 ){
                    startPtBin     = 7;
                } else if ( mode == 5){
                    startPtBin     = 4;
                } else if ( mode == 10){
                    startPtBin     = 28;
                } else if (mode == 20){
                    startPtBin     = 1;
                }
            } else if (energy.CompareTo("pPb_5.023TeV") == 0 ){
                if ( mode == 0 ){
                    startPtBin     = 1;
                } else if ( mode == 1 ){
                    startPtBin     = 1;
                } else if ( mode == 2 || mode == 13 ){
                    if (specialTrigg == 1)
                        fStartPtBin     = 14;
                    else if (specialTrigg == 2)
                        fStartPtBin     = 24;
                    else if (specialTrigg == 3)
                        fStartPtBin     = 29;
                    else
                        startPtBin     = 6;
                } else if ( mode == 3 ){
                    startPtBin     = 3;
                } else if ( mode == 4 || mode == 12 ){
                    startPtBin     = 9;
                } else if ( mode == 5){
                    startPtBin     = 7;
                } else if ( mode == 10){
                    startPtBin     = 1;
                } else if (mode == 20){
                    startPtBin     = 1;
                } else {
                    startPtBin     = 1;
                }
            } else if (energy.CompareTo("pPb_5.023TeVRun2") == 0 ){
                if ( mode == 0 ){
                    startPtBin     = 1;
                } else if ( mode == 1 ){
                    startPtBin     = 1;
                } else if ( mode == 2 || mode == 13 ){
                    if (specialTrigg == 1)
                        fStartPtBin     = 14;
                    else if (specialTrigg == 2)
                        fStartPtBin     = 24;
                    else if (specialTrigg == 3)
                        fStartPtBin     = 29;
                    else
                        startPtBin     = 5;
                } else if ( mode == 3 ){
                    startPtBin     = 2;
                } else if ( mode == 4 || mode == 12 ){
                    startPtBin     = 3;
                } else if ( mode == 5){
                    startPtBin     = 4;
                } else if ( mode == 10){
                    startPtBin     = 1;
                } else if (mode == 20){
                    startPtBin     = 1;
                } else {
                    startPtBin     = 1;
                }
            } else if (energy.CompareTo("pPb_8TeV") == 0 ){
                if ( mode == 0 ){
                    startPtBin     = 1;
                } else if (mode == 10){
                  if (specialTrigg == 1)
                      startPtBin     = 14;
                  else if (specialTrigg == 2)
                      startPtBin     = 24;
                  else if (specialTrigg == 3)
                      startPtBin     = 29;
                  else
                      startPtBin     = 5;
                } else {
                    startPtBin     = 1;
                }
            } else if (energy.CompareTo("PbPb_2.76TeV") == 0){
                if ( mode == 0 ){
                    startPtBin      = 1;
                } else if ( mode == 1 ){
                    startPtBin      = 2;
                } else if ( mode == 2 || mode == 13 ){
                    startPtBin      = 4;
                } else if ( mode == 3 ){
                    startPtBin      = 3;
                } else if ( mode == 4 || mode == 12 ){
                    cout << minECut << endl;
                    if (minECut.Atoi() != 3)
                        startPtBin      = 12;
                    else
                        startPtBin      = 6;
                } else if ( mode == 5){
                    startPtBin      = 4;
                } else if (mode == 20){
                    startPtBin      = 1;
                } else {
                    startPtBin      = 1;
                }
            } else if (energy.CompareTo("PbPb_5.02TeV") == 0){
                if ( mode == 0 ){
                    startPtBin      = 1;
                } else if ( mode == 1 ){
                    startPtBin      = 2;
                } else if ( mode == 2 || mode == 13 ){
                    startPtBin      = 4;
                } else if ( mode == 3 ){
                    startPtBin      = 3;
                } else if ( mode == 4 || mode == 12 ){
                    cout << minECut << endl;
                    if (minECut.Atoi() != 3)
                        startPtBin      = 6;
                    else
                        startPtBin      = 6;
                } else if ( mode == 5){
                    startPtBin      = 4;
                } else if (mode == 20){
                    startPtBin      = 1;
                } else {
                    startPtBin      = 1;
                }
            } else if (energy.CompareTo("XeXe_5.44TeV") == 0){
                if ( mode == 0 ){
                    if (centrality.CompareTo("0-90%") == 0)
                        startPtBin     = 2;
                    else
                        startPtBin     = 3;
                } else if ( mode == 1 ){
                    startPtBin     = 2;
                } else if ( mode == 2 || mode == 13 ){
                    startPtBin     = 7;
                } else if ( mode == 3 ){
                    startPtBin     = 6;
                } else if ( mode == 4 || mode == 12 ){
                    startPtBin     = 9;
                } else if ( mode == 5){
                    startPtBin     = 8;
                } else if (mode == 20){
                    startPtBin     = 2;
                }
            }
        } else if (meson.Contains("Eta")){
            if (energy.CompareTo("2.76TeV") == 0){
                if ( mode == 0 ){
                    startPtBin     = 1;
                } else if ( mode == 1 ){
                    startPtBin     = 1;
                } else if ( mode == 2 || mode == 13 ){
                    startPtBin     = 2;
                } else if ( mode == 3 ){
                    startPtBin     = 2;
                } else if ( mode == 4 || mode == 12 ){
                    startPtBin     = 4;
                } else if ( mode == 5){
                    startPtBin     = 3;
                } else if (mode == 20){
                    startPtBin     = 1;
                }
            } else if (energy.CompareTo("5TeV") == 0 || energy.CompareTo("5TeV2017") == 0){
                if ( mode == 20 ){
                    startPtBin     = 1;
                }
            } else if (energy.CompareTo("7TeV") == 0){
                if (mode == 40){
                    startPtBin     = 2;
                } else if (mode == 41){
                    startPtBin     = 6;
                } else if (mode == 42){
                    startPtBin     = 5;
                } else if (mode == 44){
                    startPtBin     = 8;
                } else if (mode == 45){
                    startPtBin     = 5;
                }
            } else if (energy.CompareTo("8TeV") == 0){
                if ( mode == 0 ){
                    startPtBin     = 1;
                } else if ( mode == 1 ){
                    startPtBin     = 1;
                } else if ( mode == 2 || mode == 13 ){
                    startPtBin     = 3;
                } else if ( mode == 3 ){
                    startPtBin     = 2;
                } else if ( mode == 4 || mode == 12 ){
                    startPtBin     = 5;
                } else if ( mode == 5){
                    startPtBin     = 3;
                } else if (mode == 20){
                    startPtBin     = 1;
                }
            } else if (energy.CompareTo("13TeV") == 0){
                if (mode == 40){
                    startPtBin     = 2;
                } else if (mode == 41){
                    startPtBin     = 6;
                } else if (mode == 42){
                    startPtBin     = 4;
                } else if (mode == 44){
                    startPtBin     = 9;
                } else if (mode == 45){
                    startPtBin     = 7;
                }
            } else if (energy.CompareTo("pPb_5.023TeV") == 0){
                if ( mode == 0 ){
                    startPtBin      = 3;
                } else if ( mode == 1 ){
                    startPtBin      = 3;
                } else if ( mode == 2 || mode == 13 ){
                    if (specialTrigg == 1)
                        startPtBin  = 11;
                    else if (specialTrigg == 2)
                        startPtBin  = 16;
                    else if (specialTrigg == 3)
                        startPtBin  = 19;
                    else
                        startPtBin  = 5;
                } else if ( mode == 3 ){
                    startPtBin      = 4;
                } else if ( mode == 4 || mode == 12 ){
                    startPtBin      = 7;
                } else if ( mode == 5){
                    startPtBin      = 11;
                } else if ( mode == 10){
                    startPtBin      = 11;
                } else if (mode == 20){
                    startPtBin      = 3;
                }
            } else if (energy.CompareTo("pPb_5.023TeVRun2") == 0){
                if ( mode == 0 ){
                    startPtBin     = 3;
                } else if ( mode == 1 ){
                    startPtBin     = 3;
                } else if ( mode == 2 || mode == 13 ){
                    startPtBin     = 5;
                } else if ( mode == 3 ){
                    startPtBin     = 4;
                } else if ( mode == 4 || mode == 12 ){
                    startPtBin     = 2;
                } else if ( mode == 5){
                    startPtBin     = 11;
                } else if (mode == 20){
                    startPtBin     = 3;
                }
            } else if (energy.CompareTo("pPb_8TeV") == 0){
                if ( mode == 0 ){
                    startPtBin     = 3;
                } else if ( mode == 1 ){
                    startPtBin     = 3;
                } else if ( mode == 2 || mode == 13 ){
                    startPtBin     = 5;
                } else if ( mode == 3 ){
                    startPtBin     = 4;
                } else if ( mode == 4 || mode == 12 ){
                    startPtBin     = 7;
                } else if ( mode == 5){
                    startPtBin     = 5;
                } else if (mode == 20){
                    startPtBin     = 3;
                }
            } else if (energy.CompareTo("XeXe_5.44TeV") == 0){
                if ( mode == 0 ){
                    if (centrality.CompareTo("0-90%") == 0)
                        startPtBin     = 2;
                    else
                        startPtBin     = 3;
                } else if ( mode == 1 ){
                    startPtBin     = 2;
                } else if ( mode == 2 || mode == 13 ){
                    startPtBin     = 3;
                } else if ( mode == 3 ){
                    startPtBin     = 3;
                } else if ( mode == 4 || mode == 12 ){
                    startPtBin     = 1;
                } else if ( mode == 5){
                    startPtBin     = 5;
                } else if (mode == 20){
                    startPtBin     = 1;
                }
            }
        } else if (meson.CompareTo("Omega") == 0){
            if (energy.CompareTo("7TeV") == 0){
                if (mode == 40){
                    startPtBin     = 4;
                } else if (mode == 41){
                    startPtBin     = 6;
                } else if (mode == 42){
                    startPtBin     = 5;
                } else if (mode == 44){
                    startPtBin     = 8;
                } else if (mode == 45){
                    startPtBin     = 5;
                }
            } else if(energy.CompareTo("13TeV") == 0){
                if (mode == 40){
                    startPtBin     = 2;
                }
            }
        } else if ( meson.CompareTo("Rho") == 0 || meson.CompareTo("K0Star") == 0){
            startPtBin     = 1;
        } else if (meson.CompareTo("CPion") == 0){
            startPtBin     = 2;
        } else if (meson.CompareTo("Proton") == 0){
            startPtBin     = 3;
        } else if (meson.CompareTo("Phi") == 0 ){
            startPtBin     = 4;
        } else if (meson.CompareTo("Lambda") == 0){
            startPtBin     = 5;
        } else if (meson.CompareTo("CKaon") == 0){
            startPtBin     = 7;
        }
        return startPtBin;
    }


    void InitializeClusterBinning (TString energy, Int_t modi ){
        fBinsClusterPt          = new Double_t[100];
        if( energy.CompareTo("2.76TeV") == 0 || energy.CompareTo("PbPb_2.76TeV") == 0 || energy.CompareTo("PbPb_5.02TeV") == 0 || energy.CompareTo("pPb_5.023TeV") == 0 || energy.CompareTo("pPb_5.023TeVRun2") == 0 || energy.CompareTo("5TeV") == 0 || energy.CompareTo("5TeV2017") == 0 || energy.CompareTo("pPb_8TeV") == 0 || energy.CompareTo("XeXe_5.44TeV") == 0 ){
            fNBinsClusterPt       = fNBinsCluster2760GeVPt;
            for(Int_t iPt=0;iPt<=fNBinsClusterPt;iPt++){
                fBinsClusterPt[iPt] = fBinsCluster2760GeVPt[iPt];
            }
        } else if( energy.CompareTo("7TeV") == 0 || energy.CompareTo("900GeV") == 0){
            fNBinsClusterPt       = fNBinsCluster8TeVPt;
            for(Int_t iPt=0;iPt<=fNBinsClusterPt;iPt++){
                fBinsClusterPt[iPt] = fBinsCluster8TeVPt[iPt];
            }
        } else if( energy.CompareTo("8TeV") == 0){
            fNBinsClusterPt       = fNBinsCluster8TeVmEMCPt;
            for(Int_t iPt=0;iPt<=fNBinsClusterPt;iPt++){
                fBinsClusterPt[iPt] = fBinsCluster8TeVmEMCPt[iPt];
            }
        } else {
            fNBinsClusterPt       = 0;
            fBinsClusterPt        = NULL;
        }
    }

    //*************************************************************************************************
    //******************** Initialize binning for analysis stream  ************************************
    //*************************************************************************************************
    void InitializeBinning( TString setPi0,
                            Int_t numberOfBins,
                            TString energy,
                            TString directPhoton,
                            Int_t modi,
                            TString eventCutSelection, TString clusterCutSelection, Int_t triggerSet = -1, Bool_t isDCA = kFALSE, TString centDCA = "", TString periodDCA = ""){
        //*************************************************************************************************
        //************************************ Binning for Cluster ****************************************
        //*************************************************************************************************

        InitializeClusterBinning(energy, modi);
        //get centrality
        TString centrality      = GetCentralityString(eventCutSelection);
         // set trigger string
        TString trigger         = eventCutSelection(GetEventSelectSpecialTriggerCutPosition(),2);
        Int_t specialTrigg      = 0;

        // Initialize bin for single invariant mass plot
        fExampleBin             = ReturnSingleInvariantMassBinPlotting (setPi0, energy, modi, trigger.Atoi(), fExampleBinScaleFac, triggerSet, directPhoton);
        cout << "Example pt bin: " <<  fExampleBin << endl;
        //*************************************************************************************************
        //************************************ Binning for Pi0 ********************************************
        //*************************************************************************************************
        if (setPi0.CompareTo("Pi0") == 0){
            fNBinsPt                = numberOfBins;
            fBinsPt                 = new Double_t[70];
            fNRebin                 = new Int_t[69];
            //*********************************************************************************************
            //********************************** Pi0 for pp 0.9TeV*****************************************
            //*********************************************************************************************
            if (energy.CompareTo("900GeV") == 0) {
                if (directPhoton.CompareTo("directPhoton") == 0){
                    fStartPtBin     = 1;
                    if( modi == 2){
                      fStartPtBin = 3;
                    }else if(modi == 4){
                      fStartPtBin = 6;
                    }

                    if (fNBinsPt > 13) {
                        cout << "You have chosen Direct Photon Plots and more than 13 bins, this is not possible, it will be reduced to 14 bins." << endl;
                        fNBinsPt    = 13;
                    }
                    GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);
                    for (Int_t i = 0; i < fNBinsPt+1; i++) {
                        fBinsPt[i]  = fBinsDirGamma900GeVPt[i];
                        if (i < fNBinsPt+1)
                            fNRebin[i] = fBinsDirGamma900GeVPtRebin[i];
                    }
                } else {
                    fStartPtBin     = 1;
                    if (fNBinsPt > 11) {
                        cout << "You have chosen to have more than 11 bins, this is not possible, it will be reduced to 11" << endl;
                        fNBinsPt    = 11;
                    }
                    GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);
                    for (Int_t i = 0; i < fNBinsPt+1; i++) {
                    if(modi != 2 && modi !=4){
                        fBinsPt[i]  = fBinsPi0900GeVPt[i];
                        if (i < fNBinsPt+1)
                            fNRebin[i] = fBinsPi0900GeVPtRebin[i];
                    } else if(modi == 2){
                        fBinsPt[i]  = fBinsPi0900GeVPCMEMCPt[i];
                        if (i < fNBinsPt+1)
                            fNRebin[i] = fBinsPi0900GeVPCMEMCPtRebin[i];
                    } else if(modi == 4){
                        fBinsPt[i]  = fBinsPi0900GeVEMCPt[i];
                        if (i < fNBinsPt+1)
                            fNRebin[i] = fBinsPi0900GeVEMCPtRebin[i];
                    }
                    }
                    nIterBGFit      = 11;
                }
            //*********************************************************************************************
            //********************************** Pi0 for pp 2.76TeV****************************************
            //*********************************************************************************************
            } else if (energy.CompareTo("2.76TeV") == 0) {
                if (triggerSet == -1){
                    if (trigger.CompareTo("52") == 0){
                        specialTrigg = 1;    // L0
                    } else if ( trigger.CompareTo("85") == 0 ){
                        specialTrigg = 2; //L1 G2 (lower threshold)
                    } else if ( trigger.CompareTo("83") == 0    ){
                        specialTrigg = 3; //L1 G1 (higher threshold)
                    } else if ( trigger.CompareTo("51") == 0    ){
                        specialTrigg = 4; //L0 LHC11a
                    } else if ( trigger.CompareTo("01") == 0  || trigger.CompareTo("00") == 0   ){
                        specialTrigg = 5; //INT7 LHC13g
                    }
                } else {
                    specialTrigg        = triggerSet;
                }

                if (directPhoton.CompareTo("directPhoton") == 0){
                    fStartPtBin     = 1;
                    if (modi == 2)
                        fStartPtBin = 3;

                    if (fNBinsPt > 14 && isDCA) {
                        cout << "You have chosen to have more than 14 bins, this is not possible, it will be reduced to 14" << endl;
                        fNBinsPt    = 14;
                    } else if (fNBinsPt > 21 && specialTrigg == 5 && modi!=0) {
                        cout << "You have chosen Direct Photon Plots and more than 21 bins, this is not possible, it will be reduced to 21 bins." << endl;
                        fNBinsPt    = 21;
                    } else if (fNBinsPt > 21 && modi ==0) {
                        cout << "You have chosen Direct Photon Plots and more than 21 bins, this is not possible, it will be reduced to 21 bins." << endl;
                        fNBinsPt    = 21;
                    } else if (fNBinsPt > 24 && modi!=0) {
                        cout << "You have chosen Direct Photon Plots and more than 24 bins, this is not possible, it will be reduced to 24 bins." << endl;
                        fNBinsPt    = 24;
                    }
                    GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);

                    for (Int_t i = 0; i < fNBinsPt+1; i++) {
                        fBinsPt[i]  = fBinsDirGamma2760GeVPt[i];
                        if (i < fNBinsPt+1)
                            fNRebin[i] = fBinsDirGamma2760GeVPtRebin[i];
                    }
                } else {
                    fStartPtBin     = 1;
                    if (modi == 2 && specialTrigg == 0)
                        fStartPtBin = 3;
                    else if (modi == 2 && specialTrigg == 1)
                        fStartPtBin = 10;
                    else if (modi == 4 && specialTrigg == 1)
                        fStartPtBin = 13;
                    else if (modi == 2 && specialTrigg == 2)
                        fStartPtBin = 15;
                    else if (modi == 4 && specialTrigg == 2)
                        fStartPtBin = 16;
                    else if (modi == 2 && specialTrigg == 3)
                        fStartPtBin = 16;
                    else if (modi == 4 && specialTrigg == 3)
                        fStartPtBin = 18;
                    else if (modi == 2 && specialTrigg == 4)
                        fStartPtBin = 12;
                    else if (modi == 4 && specialTrigg == 4)
                        fStartPtBin = 15;
                    else if (modi == 10 && ( ReturnClusterNLM(clusterCutSelection) == 2 || ReturnClusterNLM(clusterCutSelection) == 0))
                        fStartPtBin = 17;
                    else if (modi == 10 && ReturnClusterNLM(clusterCutSelection) == 1 && (specialTrigg == 0 || specialTrigg == 5))
                        fStartPtBin = 21;
                    else if (modi == 10 && ReturnClusterNLM(clusterCutSelection) == 1)
                        fStartPtBin = 21; // 20 with V1 clusterizer
                    else if (modi == 4 )
                        fStartPtBin = 6;
                    else if (modi == 1 )
                        fStartPtBin = 3;

                    if (fNBinsPt > 14 && isDCA) {
                        cout << "You have chosen to have more than 14 bins, this is not possible, it will be reduced to 14" << endl;
                        fNBinsPt    = 14;
                    } else if (fNBinsPt > 19 && ( modi == 0 || modi == 1) && specialTrigg < 1) {
                        cout << "You have chosen to have more than 19 bins, this is not possible, it will be reduced to 19" << endl;
                        fNBinsPt    = 19;
                    } else if (fNBinsPt > 24 &&  modi == 0  && specialTrigg > 0) {
                        cout << "You have chosen to have more than 19 bins, this is not possible, it will be reduced to 19" << endl;
                        fNBinsPt    = 24;
                    } else if (fNBinsPt > 24 && (modi == 2 || modi == 3) && specialTrigg == 0){
                        cout << "You have chosen to have more than 24 bins, this is not possible, it will be reduced to 24" << endl;
                        fNBinsPt    = 24;
                    } else if (fNBinsPt > 29 && ( (modi == 2 && (specialTrigg == 1 || specialTrigg == 2 || specialTrigg == 3)) || modi ==4)){
                        cout << "You have chosen to have more than 29 bins, this is not possible, it will be reduced to 29" << endl;
                        fNBinsPt    = 29;
                    } else if (fNBinsPt > 28 &&  modi == 2 && specialTrigg == 3){
                        cout << "You have chosen to have more than 28 bins, this is not possible, it will be reduced to 28" << endl;
                        fNBinsPt    = 28;
                    } else if (fNBinsPt > 25 && ( (modi == 2  && (specialTrigg == 4 || specialTrigg == 1 || specialTrigg == 2 )) || (modi == 3 && specialTrigg == 4) )){
                        cout << "You have chosen to have more than 25 bins, this is not possible, it will be reduced to 25" << endl;
                        fNBinsPt    = 25;
                    } else if (fNBinsPt > 32 && (modi == 10)){
                        cout << "You have chosen to have more than 32 bins, this is not possible, it will be reduced to 32" << endl;
                        fNBinsPt    = 32;
                    }
                    GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);

                    for (Int_t i = 0; i < fNBinsPt+1; i++) {
                        if (isDCA)
                            fBinsPt[i]          = fBinsPi02760GeVPtDCA[i];
                        else
                            fBinsPt[i]          = fBinsPi02760GeVPt[i];
                        if ((modi == 2) && specialTrigg == 0 ){
                            if (i < fNBinsPt+1)
                                fNRebin[i]  = fBinsPi02760GeVPCMEMCPtRebin[i];
                        } else if ( modi == 4 && (specialTrigg == 1 || specialTrigg == 2 || specialTrigg == 3 || specialTrigg == 4 ) ) {
                            if (i < fNBinsPt+1)
                                fNRebin[i]  = fBinsPi02760GeVEMCPtTrig13gRebin[i];
                            fBinsPt[i]      = fBinsPi02760GeVPtTrig13g[i];
                        } else if ( modi == 2 && specialTrigg == 3 ) {
                            if (i < fNBinsPt+1)
                                fNRebin[i]  = fBinsPi02760GeVPCMEMCPtTrig13gRebin[i];
                            fBinsPt[i]      = fBinsPi02760GeVPtTrig13gPCMEMC[i];
                        } else if ( modi == 2 && (specialTrigg == 4 || specialTrigg == 1 || specialTrigg == 2 ) ){
                            if (i < fNBinsPt+1)
                                fNRebin[i]  = fBinsPi02760GeVPCMEMCPtTrig11aRebin[i];
                            fBinsPt[i]      = fBinsPi02760GeVPtTrig11a[i];
                        } else if ( modi == 0 && (specialTrigg == 3 || specialTrigg == 1 || specialTrigg == 2 ) ){
                            if (i < fNBinsPt+1)
                                fNRebin[i]  = fBinsPi02760GeVPCMEMCPtTrig11aRebin[i];
                            fBinsPt[i]      = fBinsPi02760GeVPtTrig11a[i];

                        } else if ( modi == 10 ) {
                            if (i < fNBinsPt+1)
                                fNRebin[i]  = fBinsPi02760GeVPtmEMCRebin[i];
                            fBinsPt[i]      = fBinsPi02760GeVPtmEMC[i];
                        } else if ( modi == 1 ) {
                            if (i < fNBinsPt+1)
                                fNRebin[i]  = fBinsPi02760GeVDalitzPtRebin[i];
                            fBinsPt[i]      = fBinsPi02760GeVDalitzPt[i];
                        } else {
                            if (i < fNBinsPt+1) fNRebin[i] = fBinsPi02760GeVPtRebin[i];
                        }
                    }
                    fMaxYFracBGOverIntHist              = 50;
                    nIterBGFit                          = 13;
                    optionBGSmoothingStandard           = "BackSmoothing9";
                    optionBGSmoothingVar1               = "BackSmoothing7";
                    optionBGSmoothingVar2               = "BackSmoothing11";
                }
            //*********************************************************************************************
            //********************************** Pi0 for pp 5TeV*******************************************
            //*********************************************************************************************
            } else if (energy.CompareTo("5TeV") == 0 || energy.CompareTo("5TeV2017") == 0) {
                if (directPhoton.CompareTo("directPhoton") == 0){
                    fStartPtBin     = 1;
                    if (fNBinsPt > 17) {
                        cout << "You have chosen Direct Photon Plots and more than 17 bins, this is not possible, it will be reduced to 17 bins." << endl;
                        fNBinsPt    = 17;
                    }
                    GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);
                    for (Int_t i = 0; i < fNBinsPt+1; i++) {
                        fBinsPt[i]         = fBinsDirGamma5TeVPt[i];
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsDirGamma5TeVPtRebin[i];
                    }
                } else {

                    if (triggerSet == -1){
                        if (trigger.CompareTo("52") == 0){
                            specialTrigg = 1; // EMC7
                        } else if ( trigger.CompareTo("85") == 0 ){
                            specialTrigg = 2; // EG2 lower
                        } else if ( trigger.CompareTo("83") == 0 ) {
                            specialTrigg = 3; // EG1 higher
                        }
                    } else {
                        specialTrigg        = triggerSet;
                    }

                    fStartPtBin     = 1;

                    if( modi == 2 )
                      fStartPtBin = 6;
                    if( modi == 4 )
                      fStartPtBin = 8;
                    if( modi == 12 || modi == 13 )
                      fStartPtBin = 2;
                    if (modi == 2 && specialTrigg == 1) fStartPtBin = 7; // EMC7
                    if (modi == 2 && specialTrigg == 2) fStartPtBin = 7; // EG2
                    if (modi == 2 && specialTrigg == 3) fStartPtBin = 7; // EG1

                    if (modi == 4 && specialTrigg == 1) { fStartPtBin = 20; fNBinsPt = 49; } // EMC7
                    if (modi == 4 && specialTrigg == 2) { fStartPtBin = 20; fNBinsPt = 49; } // EG2
                    if (modi == 4 && specialTrigg == 3) { fStartPtBin = 20; fNBinsPt = 49; } // EG1

                    if (fNBinsPt > 15 && isDCA) {
                        cout << "You have chosen to have more than 15 bins, this is not possible, it will be reduced to 15" << endl;
                        fNBinsPt    = 15;
                    }   else if ( fNBinsPt > 50 && !isDCA) {
                        cout << "You have chosen t o have more than 50 bins, this is not possible, it will be reduced to 50" << endl;
                        fNBinsPt    = 50;
                    }

                    GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);

                    for (Int_t i = 0; i < fNBinsPt+1; i++) {
                        if (isDCA) {
                            if ( modi == 0 && energy.Contains("2017"))
                                fBinsPt[i] = fBinsPi05TeV2017PtDCA[i];
                            else
                                fBinsPt[i] = fBinsPi05TeVPtDCA[i];
                        } else if ( modi == 0 ) {
                            if(energy.Contains("2017")){
                                fBinsPt[i]          = fBinsPi05TeV2017Pt[i];
                                if (i < fNBinsPt)
                                fNRebin[i]  = fBinsPi05TeV2017PtRebin[i];
                            } else {
                                fBinsPt[i]          = fBinsPi05TeVPt[i];
                                if (i < fNBinsPt)
                                fNRebin[i]  = fBinsPi05TeVPtRebin[i];
                            }
                        } else if ( modi == 2 ) {
                            fBinsPt[i]     = fBinsPi05TeVPtPCMEMC[i];
                            if ( i < fNBinsPt )
                                fNRebin[i] = fBinsPi05TeVPCMEMCPtRebin[i];
                        } else if ( modi == 4 ) {
                          if(specialTrigg == 1 || specialTrigg == 2 || specialTrigg == 3){
                            fBinsPt[i]     = fBinsPi05TeVPtEMCTrigger1[i];
                            if ( i < fNBinsPt )
                                fNRebin[i] = fBinsPi05TeVEMCPtRebinTrigger1[i];
                          }else{
                            fBinsPt[i]     = fBinsPi05TeVPtEMC[i];
                            if ( i < fNBinsPt )
                                fNRebin[i] = fBinsPi05TeVEMCPtRebin[i];
                          }
                        } else if ( modi == 12 ) {
                          fBinsPt[i]     = fBinsPi05TeVPtDCal[i];
                          if ( i < fNBinsPt )   fNRebin[i] = fBinsPi05TeVPtRebinDCal[i];
                        } else if ( modi == 13 ) {
                          fBinsPt[i]     = fBinsPi05TeVPtPCMDCal[i];
                          if ( i < fNBinsPt )   fNRebin[i] = fBinsPi05TeVPtRebinPCMDCal[i];
                        } else  {
                            fBinsPt[i]          = fBinsPi05TeVPt[i];
                            if (i < fNBinsPt)
                            fNRebin[i]  = fBinsPi05TeVPtRebin[i];
                        }

                    }
                    if (isDCA) {
                        nIterBGFit                  = 10;
                    }
                }
            //*********************************************************************************************
            //********************************** Pi0 for pp 7TeV*******************************************
            //*********************************************************************************************
            } else if (energy.CompareTo("7TeV") == 0) {
                if (directPhoton.CompareTo("directPhoton") == 0){
                    fStartPtBin     = 1;
                    if (modi == 4)
                        fStartPtBin = 6;
                    else if(modi == 2)
                        fStartPtBin = 4;
                    else if(modi == 1)
                        fStartPtBin = 6;
                    if (fNBinsPt > 23) {
                        cout << "You have chosen Direct Photon Plots and more than 23 bins, this is not possible, it will be reduced to 23 bins." << endl;
                        fNBinsPt    = 23;
                    }
                    GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);
                    for (Int_t i = 0; i < fNBinsPt+1; i++) {
                        fBinsPt[i]         = fBinsDirGamma7TeVPt[i];
                        if (i < fNBinsPt+1) {
                            if (modi == 4)
                                fNRebin[i] = fBinsDirGamma7TeVEMCPtRebin[i];
                            else
                                fNRebin[i] = fBinsDirGamma7TeVPtRebin[i];
                        }
                    }
                }else if (directPhoton.CompareTo("directPhotonTagging") == 0){
                    fStartPtBin     = 1;
                    if (fNBinsPt > 23) {
                        cout << "You have chosen Direct Photon Plots and more than 23 bins, this is not possible, it will be reduced to 23 bins." << endl;
                        fNBinsPt    = 23;
                    }
                    GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);
                    for (Int_t i = 0; i < fNBinsPt+1; i++) {
                        fBinsPt[i]         = fBinsDirGamma7TeVPt[i];
                        if (i < fNBinsPt+1) {
                              fNRebin[i] = fBinsDirGamma7TeVPtRebin[i];
                        }
                    }
                } else {
                    fStartPtBin     = 1;
                    if (modi == 4)
                        fStartPtBin = 10;
                    else if(modi == 2)
                        fStartPtBin = 6;
                    if(modi == 5)
                        fStartPtBin = 2;

                    if (fNBinsPt > 27 && isDCA) {
                        cout << "You have chosen to have more than 27 bins, this is not possible, it will be reduced to 27" << endl;
                        fNBinsPt    = 27;
                    } else if (fNBinsPt > 40) {
                        cout << "You have chosen to have more than 40 bins, this is not possible, it will be reduced to 40" << endl;
                        fNBinsPt    = 40;
                    }
                    GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);
                    for (Int_t i = 0; i < fNBinsPt+1; i++) {
                        if (isDCA){
                            fBinsPt[i]          = fBinsPi07TeVPtDCA[i];
                        } else {
                            if (modi == 2){
                                fBinsPt[i]      = fBinsPi07TeVPCMEMCPt[i];
                                if (i < fNBinsPt)
                                    fNRebin[i]  = fBinsPi07TeVPCMEMCPtRebin[i];
                            } else if (modi == 3){
                                fBinsPt[i]      = fBinsPi07TeVPCMPHOSPt[i];
                                if (i < fNBinsPt)
                                fNRebin[i]   = fBinsPi07TeVPCMPHOSPtRebin[i];
                            } else if (modi == 4){
                                fBinsPt[i]      = fBinsPi07TeVEMCPt[i];
                                if (i < fNBinsPt)
                                fNRebin[i]   = fBinsPi07TeVEMCPtRebin[i];
                            } else if (modi == 5){
                                fBinsPt[i]      = fBinsPi07TeVPCMPHOSPt[i];
                                if (i < fNBinsPt)
                                fNRebin[i]   = fBinsPi07TeVPCMPHOSPtRebin[i];
                            } else if (modi == 1){
                                fBinsPt[i]      = fBinsPi07TeVDalitzPt[i];
                                if (i < fNBinsPt)
                                fNRebin[i]   = fBinsPi07TeVDalitzPtRebin[i];
                            } else {
                                fBinsPt[i]      = fBinsPi07TeVPt[i];
                                if (i < fNBinsPt)
                                    fNRebin[i]  = fBinsPi07TeVPtRebin[i];
                            }
                        }
                    }
                    nIterBGFit                  = 9;
                    fMaxYFracBGOverIntHist      = 40;
                    optionBGSmoothingStandard   = "BackDecreasingWindow,BackSmoothing5";
                    optionBGSmoothingVar1       = "BackDecreasingWindow,BackSmoothing7";
                    optionBGSmoothingVar2       = "BackDecreasingWindow,BackSmoothing3";
                }
            //*********************************************************************************************
            //********************************** Pi0 for pp 8TeV*******************************************
            //*********************************************************************************************
            } else if (energy.CompareTo("8TeV") == 0) {
                if (triggerSet == -1){
                    if (trigger.CompareTo("52") == 0){
                        specialTrigg = 1; // L0 EMC7
                    } else if ( trigger.CompareTo("81") == 0 ){
                        specialTrigg = 2; //L1 INT7 EGA
                    } else if ( trigger.CompareTo("53") == 0 ){
                        specialTrigg = 3; // L0 EMC8
                    } else if ( trigger.CompareTo("82") == 0 ) {
                        specialTrigg = 4; // L1 INT8 EGA
                    }
                } else {
                    specialTrigg        = triggerSet;
                }
                if (directPhoton.CompareTo("directPhoton") == 0){
                    fStartPtBin     = 1;
                    if( modi == 2){
                      fStartPtBin = 4;
                    }else if(modi == 4){
                      fStartPtBin = 15;
                    }
                    if (fNBinsPt > 32 && (modi == 4 || modi == 2) ){
                      if( specialTrigg == 2 && fNBinsPt > 41){
                        cout << "You have chosen to have more than 41 bins, this is not possible, it will be reduced to 41" << endl;
                        fNBinsPt                        = 41;
                      } else if ( specialTrigg == 1 && fNBinsPt > 41){
                        cout << "You have chosen to have more than 41 bins, this is not possible, it will be reduced to 41" << endl;
                        fNBinsPt                        = 41;
                      } else if (specialTrigg!=1 && specialTrigg!=2){
                        cout << "You have chosen to have more than 23 bins, this is not possible, it will be reduced to 23" << endl;
                        fNBinsPt                        = 23;
                      }
                    } else if (fNBinsPt > 23 && (modi !=4 && modi !=2) ) {
                        cout << "You have chosen Direct Photon Plots and more than 23 bins, this is not possible, it will be reduced to 23 bins." << endl;
                        fNBinsPt    = 23;
                    }
                    GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);

                    for (Int_t i = 0; i < fNBinsPt+1; i++) {
                        fBinsPt[i]         = fBinsDirGamma8TeVPt[i];
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsDirGamma8TeVPtRebin[i];

                        if (modi == 4 || modi == 2){
                            if( specialTrigg == 1 ){
                                fBinsPt[i]                 = fBinsDirGamma8TeVEMCalTriggerPt[i];
                            } else if ( specialTrigg == 2 ){
                                fBinsPt[i]                 = fBinsDirGamma8TeVEMCalTriggerPt[i];
                            } else
                                fBinsPt[i]                 = fBinsDirGamma8TeVPt[i];
                        }

                        if(modi == 4 || modi == 2) {
                            if( specialTrigg == 1 ){
                                if (i < fNBinsPt+1) fNRebin[i] = fBinsDirGamma8TeVEMCalTriggerPtRebin[i];
                            } else if( specialTrigg == 2 ){
                                if (i < fNBinsPt+1) fNRebin[i] = fBinsDirGamma8TeVEMCalTriggerPtRebin[i];
                            } else{
                                if (i < fNBinsPt+1) fNRebin[i] = fBinsDirGamma8TeVPtRebin[i];
                            }
                        }
                    }
                } else if (directPhoton.CompareTo("directPhotonTagging") == 0){
                    fStartPtBin     = 1;
                    if( modi == 2){
                        fStartPtBin = 1;
                    }
                    if (fNBinsPt > 29 ) {
                        cout << "You have chosen Direct Photon Plots and more than 29 bins, this is not possible, it will be reduced to 29 bins." << endl;
                        fNBinsPt    = 29;
                    }
                    GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);
                    for (Int_t i = 0; i < fNBinsPt+1; i++) {
                        fBinsPt[i]         = fBinsDirGammaTagging8TeVPt[i];
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsDirGammaTagging8TeVPtRebin[i];
                    }
                } else {
                    fStartPtBin = 1;
                    if (modi == 4 ) fStartPtBin = 7;
                    if (modi == 2 ) fStartPtBin = 2;
                    if (modi == 0 && specialTrigg == 1) fStartPtBin = 21;
                    if (modi == 0 && specialTrigg == 2) fStartPtBin = 27;
                    if (modi == 2 && specialTrigg == 1) fStartPtBin = 21;
                    if (modi == 2 && specialTrigg == 2) fStartPtBin = 28;
                    if (modi == 4 && specialTrigg == 1) fStartPtBin = 22;
                    if (modi == 4 && specialTrigg == 2) fStartPtBin = 33;
                    if (modi == 10 && specialTrigg == 0) fStartPtBin = 28;
                    if (modi == 10 && specialTrigg == 1) fStartPtBin = 28;
                    if (modi == 10 && specialTrigg == 2) fStartPtBin = 28;

                    if (fNBinsPt > 21 && isDCA) {
                        cout << "You have chosen to have more than 21 bins, this is not possible, it will be reduced to 21" << endl;
                        fNBinsPt                        = 21;
                    } else if (fNBinsPt > 33 && modi != 2 && modi != 3 && modi != 4 && modi != 10) {
                        if ( specialTrigg == 1 && fNBinsPt > 42){
                            cout << "You have chosen to have more than 42 bins, this is not possible, it will be reduced to 42" << endl;
                            fNBinsPt                    = 42;
                        } else if ( specialTrigg == 2 && fNBinsPt > 41){
                            cout << "You have chosen to have more than 41 bins, this is not possible, it will be reduced to 41" << endl;
                            fNBinsPt                    = 41;
                        } else if (specialTrigg!=1 && specialTrigg!=2){
                            cout << "You have chosen to have more than 33 bins, this is not possible, it will be reduced to 32" << endl;
                            fNBinsPt                    = 33;
                        }
                    } else if (fNBinsPt > 32 && (modi ==4)){
                        if( specialTrigg == 2 && fNBinsPt > 42){
                            cout << "You have chosen to have more than 42 bins, this is not possible, it will be reduced to 42" << endl;
                            fNBinsPt                        = 42;
                        } else if ( specialTrigg == 1 && fNBinsPt > 42){
                            cout << "You have chosen to have more than 42 bins, this is not possible, it will be reduced to 42" << endl;
                            fNBinsPt                        = 42;
                        } else if (specialTrigg!=1 && specialTrigg!=2){
                            cout << "You have chosen to have more than 32 bins, this is not possible, it will be reduced to 32" << endl;
                            fNBinsPt                        = 32;
                        }
                    } else if (fNBinsPt > 29 && (modi == 2 || modi == 3)){
                        if( specialTrigg == 2 && fNBinsPt > 42){
                        cout << "You have chosen to have more than 42 bins, this is not possible, it will be reduced to 42" << endl;
                        fNBinsPt        = 42;
                        } else if ( specialTrigg == 1 && fNBinsPt > 42){
                        cout << "You have chosen to have more than 42 bins, this is not possible, it will be reduced to 42" << endl;
                        fNBinsPt = 42;
                        } else if(specialTrigg!=1 && specialTrigg!=2) {
                        cout << "You have chosen to have more than 31 bins, this is not possible, it will be reduced to 31" << endl;
                        fNBinsPt        = 29;
                        }
                    } else if (fNBinsPt > 57 && (modi == 10)){
                        cout << "You have chosen to have more than 57 bins, this is not possible, it will be reduced to 57" << endl;
                        fNBinsPt        = 57;
                    }
                    GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);

                    for (Int_t i = 0; i < fNBinsPt+1; i++) {
                        if (modi == 4 ){
                            if( specialTrigg == 1 ){
                                fBinsPt[i]                 = fBinsPi08TeVEMCalTrigger1Pt[i];
                            } else if ( specialTrigg == 2 ){
                                fBinsPt[i]                 = fBinsPi08TeVEMCalTrigger2Pt[i];
                            } else
                                fBinsPt[i]                 = fBinsPi08TeVPtEMC[i];
                        } else if (modi == 2){
                            if( specialTrigg == 1 ){
                                fBinsPt[i]                 = fBinsPi08TeVPCMEMCalTrigger1Pt[i];
                            } else if ( specialTrigg == 2 ){
                                fBinsPt[i]                 = fBinsPi08TeVPCMEMCalTrigger2Pt[i];
                            } else
                                fBinsPt[i]                 = fBinsPi08TeVPtPCMEMC[i];
                        } else if (modi == 10){
                            fBinsPt[i]                     = fBinsPi08TeVPtmEMC[i];
                        } else {
                            if( specialTrigg == 1 ){
                                fBinsPt[i]                 = fBinsPi08TeVTrigger1Pt[i];
                            } else if ( specialTrigg == 2 ){
                                fBinsPt[i]                 = fBinsPi08TeVPCMTrigger2Pt[i];
                            } else if ( isDCA ) {
                                fBinsPt[i]                 = fBinsPi08TeVPtDCA[i];
                            } else
                                fBinsPt[i]                 = fBinsPi08TeVPt[i];
                        }

                        if (modi == 2){
                            if( specialTrigg == 1 ){
                                if (i < fNBinsPt+1) fNRebin[i] = fBinsPi08TeVPCMEMCTrigger1PtRebin[i];
                            } else if( specialTrigg == 2 ){
                                if (i < fNBinsPt+1) fNRebin[i] = fBinsPi08TeVPCMEMCTrigger2PtRebin[i];
                            } else{
                                if (i < fNBinsPt+1) fNRebin[i] = fBinsPi08TeVPCMEMCPtRebin[i];
                            }
                        } else if(modi == 4) {
                            if( specialTrigg == 1 ){
                                if (i < fNBinsPt+1) fNRebin[i] = fBinsPi08TeVEMCTrigger1PtRebin[i];
                            } else if( specialTrigg == 2 ){
                                if (i < fNBinsPt+1) fNRebin[i] = fBinsPi08TeVEMCTrigger2PtRebin[i];
                            } else{
                                if (i < fNBinsPt+1) fNRebin[i] = fBinsPi08TeVEMCPtRebin[i];
                            }
                        } else if(modi == 10) {
                            if (i < fNBinsPt+1) fNRebin[i]     = fBinsPi08TeVPtmEMCRebin[i];
                        } else {
                            if( specialTrigg == 1 ){
                                if (i < fNBinsPt+1) fNRebin[i] = fBinsPi08TeVPCMTrigger1PtRebin[i];
                            } else if( specialTrigg == 2 ){
                                if (i < fNBinsPt+1) fNRebin[i] = fBinsPi08TeVPCMTrigger2PtRebin[i];
                            } else{
                                if (i < fNBinsPt+1) fNRebin[i] = fBinsPi08TeVPtRebin[i];
                            }
                        }
                    }

                    nIterBGFit                  = 7;
                    fMaxYFracBGOverIntHist      = 60;
                    optionBGSmoothingStandard   = "BackDecreasingWindow,BackSmoothing5";
                    optionBGSmoothingVar1       = "BackDecreasingWindow,BackSmoothing7";
                    optionBGSmoothingVar2       = "BackDecreasingWindow,BackSmoothing3";

                }
            //*********************************************************************************************
            //********************************** Pi0 for pp 13TeV******************************************
            //*********************************************************************************************
            } else if (energy.CompareTo("13TeV") == 0) {
                if (directPhoton.CompareTo("directPhoton") == 0){
                    fStartPtBin     = 1;
                    if (fNBinsPt > 24) {
                        cout << "You have chosen Direct Photon Plots and more than 24 bins, this is not possible, it will be reduced to 24 bins." << endl;
                        fNBinsPt    = 24;
                    }
                    GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);
                    for (Int_t i = 0; i < fNBinsPt+1; i++) {
                        fBinsPt[i]         = fBinsDirGamma13TeVPt[i];
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsDirGamma13TeVPtRebin[i];
                    }
                    fNBinsPtDCAzDist    = 15;
                    fBinsPtDCAzDist     = new Double_t[fNBinsPtDCAzDist+1];
                    for (Int_t i = 0; i < fNBinsPtDCAzDist+1; i++) {
                        fBinsPtDCAzDist[i] = fBinsDirGamma13TeVPtDCAzDist[i];
                    }
                } else {
                    fStartPtBin         = 1;
                    if (fNBinsPt > 27 && isDCA) {
                        cout << "You have chosen to have more than 27 bins, this is not possible, it will be reduced to 27" << endl;
                        fNBinsPt    = 27;
                    } else if (fNBinsPt > 45) {
                        cout << "You have chosen to have more than 45 bins, this is not possible, it will be reduced to 45" << endl;
                        fNBinsPt    = 45;

                    }
                    GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);

                    for (Int_t i = 0; i < fNBinsPt+1; i++) {
                        if (isDCA) {
                            fBinsPt[i]      = fBinsPi013TeVPtDCA[i];
                        } else {
                            if (modi == 0 ){
                                fBinsPt[i]      = fBinsPi013TeVPt[i];
                                if (i < fNBinsPt+1)
                                    fNRebin[i]  = fBinsPi013TeVPtRebin[i];
                            } else {
                                fBinsPt[i]      = fBinsPi013TeVPCMEMCPt[i];
                                if (i < fNBinsPt+1)
                                    fNRebin[i]  = fBinsPi013TeVPCMEMCPtRebin[i];

                            }
                        }
                    }
                }
            //*********************************************************************************************
            //**************************************** Pi0 for 13TeV low B field **************************
            //*********************************************************************************************
            } else if (energy.CompareTo("13TeVLowB") == 0) {
                if (directPhoton.CompareTo("directPhoton") == 0){
                    fStartPtBin     = 1;
                    if (fNBinsPt > 24) {
                        cout << "You have chosen Direct Photon Plots and more than 24 bins, this is not possible, it will be reduced to 24 bins." << endl;
                        fNBinsPt    = 24;
                    }
                    GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);
                    for (Int_t i = 0; i < fNBinsPt+1; i++) {
                        fBinsPt[i]         = fBinsDirGamma13TeVLowBPt[i];
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsDirGamma13TeVLowBPtRebin[i];
                    }
                    fNBinsPtDCAzDist    = 15;
                    fBinsPtDCAzDist     = new Double_t[fNBinsPtDCAzDist+1];
                    for (Int_t i = 0; i < fNBinsPtDCAzDist+1; i++) {
                        fBinsPtDCAzDist[i] = fBinsDirGamma13TeVLowBPtDCAzDist[i];
                    }
                } else {
                    fStartPtBin         = 1;
                    if (fNBinsPt < 17)
                        fColumn         = 4;
                    if (fNBinsPt > 17) {
                        cout << "You have chosen to have more than 17 bins, this is not possible, it will be reduced to 17" << endl;
                        fNBinsPt        = 17;
                    }
                    GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);
                    for (Int_t i = 0; i < fNBinsPt+1; i++) {
                        fBinsPt[i]      = fBinsPi013TeVLowBPt[i];
                        if (i < fNBinsPt+1)
                            fNRebin[i]  = fBinsPi013TeVLowBPtRebin[i];
                    }
                }
            //*********************************************************************************************
            //********************************** Pi0 for pPb 5.023TeV**************************************
            //*********************************************************************************************
            } else if( energy.CompareTo("pPb_5.023TeV") == 0 || energy.CompareTo("pPb_5.023TeVRun2") == 0) {
                if (triggerSet == -1){
                    if (trigger.CompareTo("52") == 0){
                        specialTrigg = 1;    // L0
                    } else if ( trigger.CompareTo("85") == 0 ){
                        specialTrigg = 2; //L1 G2 (lower threshold)
                    } else if ( trigger.CompareTo("83") == 0    ){
                        specialTrigg = 3; //L1 G2 (lower threshold)
                    } else if ( trigger.CompareTo("62") == 0    ){
                        specialTrigg = 4; //PHOS PHI7
                    } else {
                        specialTrigg = 0;    // L0
                    }
                } else {
                    specialTrigg        = triggerSet;
                }

                if (directPhoton.Contains("directPhoton") ){
                    fStartPtBin     = 1;
                    if (modi == 2 && directPhoton.CompareTo("directPhoton") == 0){
                        fStartPtBin     = 1;
                    } else if (modi == 2 && directPhoton.CompareTo("directPhotonTagging") == 0){
                        fStartPtBin     = 8;
                    } else if (modi == 4){
                        fStartPtBin     = 8;
                    }

                    if (specialTrigg == 0 && ( modi == 2 || modi == 4 ) && fNBinsPt > 28 ){
                        cout << "You have chosen to have more than 28 bins, this is not possible, it will be reduced to 28 for calo analysis" << endl;
                        fNBinsPt    = 28;
                    } else if ( !( modi == 2 || modi == 4 ) && fNBinsPt > 25) {
                        cout << "You have chosen Direct Photon Plots and more than 25 bins, this is not possible, it will be reduced to 25 bins." << endl;
                        fNBinsPt    = 23;
                    }
                    GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);
                    for (Int_t i = 0; i < fNBinsPt+1; i++) {
                        if (modi == 0){
                            fBinsPt[i]  = fBinsDirGammapPb5TeVPt[i];
                            if (i < fNBinsPt+1)
                                fNRebin[i]  = fBinsDirGammapPb5TeVPtRebin[i];
                        } else if (modi == 2){
                            fBinsPt[i]  = fBinsDirGammapPb5TeVPCMEMCPt[i];
                            if (i < fNBinsPt+1)
                                fNRebin[i]  = fBinsDirGammapPb5TeVPCMEMCPtRebin[i];
                        } else if (modi == 4){
                            fBinsPt[i]  = fBinsDirGammapPb5TeVPt[i];
                            if (i < fNBinsPt+1)
                                fNRebin[i]  = fBinsDirGammapPb5TeVPtRebin[i];
                        } else {
                            fBinsPt[i]  = fBinsDirGammapPb5TeVPt[i];
                            if (i < fNBinsPt+1)
                                fNRebin[i]  = fBinsDirGammapPb5TeVPtRebin[i];
                        }
                    }
                    optionBGSmoothingStandard   = "BackDecreasingWindow,BackSmoothing3";
                    optionBGSmoothingVar1       = "BackDecreasingWindow,BackSmoothing5";
                    optionBGSmoothingVar2       = "noSmoothing";
                    nIterBGFit                  = 13;
                    fMaxYFracBGOverIntHist      = 20;
                } else {
                    fStartPtBin                 = GetStartBin("Pi0", energy, modi, specialTrigg);
                    if (fNBinsPt > 16 && isDCA) {
                        cout << "You have chosen to have more than 16 bins, this is not possible, it will be reduced to 16" << endl;
                        fNBinsPt    = 16;
                    } else if (specialTrigg == 0 && modi == 4  && fNBinsPt > 36 && energy.CompareTo("pPb_5.023TeV") == 0){
                        fNBinsPt    = 36;
                        cout << "You have chosen to have more than 36 bins, this is not possible, it will be reduced to 36 for calo analysis" << endl;
                    } else if (specialTrigg == 0 && modi == 2 && fNBinsPt > 36 ){
                        cout << "You have chosen to have more than 36 bins, this is not possible, it will be reduced to 36 for calo analysis" << endl;
                        fNBinsPt    = 36;
                    } else if ( modi == 10  && fNBinsPt > 31 && energy.CompareTo("pPb_5.023TeV") == 0){
                        cout << "You have chosen to have more than 31 bins, this is not possible, it will be reduced to 31 for merged-calo analysis" << endl;
                        fNBinsPt    = 31;
                    } else if (fNBinsPt > 39 && specialTrigg == 0 && energy.CompareTo("pPb_5.023TeV") == 0){
                        cout << "You have chosen to have more than 39 bins, this is not possible, it will be reduced to 39 for conv analysis" << endl;
                        fNBinsPt    = 37;
                    } else if (fNBinsPt > 42 && energy.CompareTo("pPb_5.023TeV") == 0){
                        cout << "You have chosen to have more than 42 bins, this is not possible, it will be reduced to 42 for calo analysis" << endl;
                        fNBinsPt    = 42;
                    } else if (specialTrigg == 0 && ( modi == 4 ) && fNBinsPt > 61 && energy.CompareTo("pPb_5.023TeVRun2") == 0){
                        cout << "You have chosen to have more than 61 bins, this is not possible, it will be reduced to 61 for calo analysis" << endl;
                        fNBinsPt    = 61;
                    }
                    GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);

                    for (Int_t i = 0; i < fNBinsPt+1; i++) {
                        if (specialTrigg == 1 && modi == 2){
                            fBinsPt[i]  = fBinsPi0pPb5TeVPtEMCTrig[i];
                            if (i < fNBinsPt+1)
                                fNRebin[i]  = fBinsPi0pPb5TeVPCMEMCTrigPtRebin[i];
                        } else if (specialTrigg == 2 && modi == 2){
                            fBinsPt[i]  = fBinsPi0pPb5TeVPtEMCTrig[i];
                            if (i < fNBinsPt+1)
                                fNRebin[i]  = fBinsPi0pPb5TeVPCMEMCTrigPtRebin[i];
                        } else if (specialTrigg == 3 && modi == 2){
                            fBinsPt[i]  = fBinsPi0pPb5TeVPtEMCTrig[i];
                            if (i < fNBinsPt+1)
                                fNRebin[i]  = fBinsPi0pPb5TeVPCMEMCTrigEG1PtRebin[i];
                        } else {
                            if (isDCA)
                                fBinsPt[i]  = fBinsPi0pPb5TeVPtDCA[i];
                            else
                                fBinsPt[i]  = fBinsPi0pPb5TeVPt[i];
                            if ((modi == 2 || modi == 4) && energy.CompareTo("pPb_5.023TeV") == 0)
                                fBinsPt[i]  = fBinsPi0pPb5TeVEMCPt[i];
                            if ((modi == 2 || modi == 4) && energy.CompareTo("pPb_5.023TeVRun2") == 0)
                                fBinsPt[i]  = fBinsPi0pPb5TeVEMCR2Pt[i];
                            else if (modi == 3 || modi == 5)
                                fBinsPt[i]  = fBinsPi0pPb5TeVPHOSPt[i];
                            else if ( modi == 6 )
                                fBinsPt[i]  = fBinsPi0pPb5TeVEMCDalitzPt[i];
                            else if ( modi == 1 )
                                fBinsPt[i]  = fBinsPi0pPb5TeVDalitzPt[i];
                            else if ( modi == 10 )
                                fBinsPt[i]  = fBinsPi0pPb5TeVmEMCPt[i];

                            if (i < fNBinsPt+1){
                                fNRebin[i]                         = fBinsPi0pPb5TeVPtRebin[i];
                                if (modi == 1 ) fNRebin[i]         = fBinsPi0pPb5TeVDalitzPtRebin[i];
                                if (modi == 2 ) fNRebin[i]         = fBinsPi0pPb5TeVPCMEMCPtRebin[i];
                                if (modi == 3 ) fNRebin[i]         = fBinsPi0pPb5TeVPCMPHOSPtRebin[i];
                                if (modi == 4 && energy.CompareTo("pPb_5.023TeV") == 0 )
                                                fNRebin[i]         = fBinsPi0pPb5TeVEMCPtRebin[i];
                                if (modi == 4 && energy.CompareTo("pPb_5.023TeVRun2") == 0 )
                                                fNRebin[i]         = fBinsPi0pPb5TeVEMCR2PtRebin[i];
                                if (modi == 5 ) fNRebin[i]         = fBinsPi0pPb5TeVPHOSPtRebin[i];
                                if (modi == 6 ) fNRebin[i]         = fBinsPi0pPb5TeVEMCDalitzPtRebin[i];
                                if (modi == 7 ) fNRebin[i]         = fBinsPi0pPb5TeVEMCDalitzPtRebin[i];
                                if (modi == 10 ) fNRebin[i]        = fBinsPi0pPb5TeVmEMCPtRebin[i];
                            }
                        }
                    }
                    optionBGSmoothingStandard   = "BackDecreasingWindow,BackSmoothing3";
                    optionBGSmoothingVar1       = "BackDecreasingWindow,BackSmoothing5";
                    optionBGSmoothingVar2       = "noSmoothing";
                    nIterBGFit                  = 11;
                    fMaxYFracBGOverIntHist      = 20;
                }
            //*********************************************************************************************
            //********************************** Pi0 for pPb 8TeV**************************************
            //*********************************************************************************************
           } else if( energy.CompareTo("pPb_8TeV") == 0) {
                if (triggerSet == -1){
                    if (trigger.CompareTo("52") == 0){
                        specialTrigg = 1;    // L0
                    } else if ( trigger.CompareTo("85") == 0 ){
                        specialTrigg = 2; //L1 G2 (lower threshold)
                    } else if ( trigger.CompareTo("83") == 0    ){
                        specialTrigg = 3; //L1 G2 (lower threshold)
                    } else if ( trigger.CompareTo("62") == 0    ){
                        specialTrigg = 4; //PHOS PHI7
                    } else {
                        specialTrigg = 0;    // L0
                    }
                } else {
                    specialTrigg        = triggerSet;
                }

                if (directPhoton.Contains("directPhoton") ){
                    fStartPtBin     = 1;
                    if (modi == 2 && directPhoton.CompareTo("directPhoton") == 0){
                        fStartPtBin     = 1;
                    } else if (modi == 2 && directPhoton.CompareTo("directPhotonTagging") == 0){
                        fStartPtBin     = 8;
                    } else if (modi == 4){
                        fStartPtBin     = 8;
                    }

                    if (specialTrigg == 0 && ( modi == 2 || modi == 4 ) && fNBinsPt > 28 ){
                        cout << "You have chosen to have more than 28 bins, this is not possible, it will be reduced to 28 for calo analysis" << endl;
                        fNBinsPt    = 28;
                    } else if ( !( modi == 2 || modi == 4 ) && fNBinsPt > 25) {
                        cout << "You have chosen Direct Photon Plots and more than 25 bins, this is not possible, it will be reduced to 25 bins." << endl;
                        fNBinsPt    = 23;
                    }
                    GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);
                    for (Int_t i = 0; i < fNBinsPt+1; i++) {
                        if (modi == 0){
                            fBinsPt[i]  = fBinsDirGammapPb8TeVPt[i];
                            if (i < fNBinsPt+1)
                                fNRebin[i]  = fBinsDirGammapPb8TeVPtRebin[i];
                        } else if (modi == 2){
                            fBinsPt[i]  = fBinsDirGammapPb8TeVPCMEMCPt[i];
                            if (i < fNBinsPt+1)
                                fNRebin[i]  = fBinsDirGammapPb8TeVPCMEMCPtRebin[i];
                        } else if (modi == 4){
                            fBinsPt[i]  = fBinsDirGammapPb8TeVPt[i];
                            if (i < fNBinsPt+1)
                                fNRebin[i]  = fBinsDirGammapPb8TeVPtRebin[i];
                        } else {
                            fBinsPt[i]  = fBinsDirGammapPb8TeVPt[i];
                            if (i < fNBinsPt+1)
                                fNRebin[i]  = fBinsDirGammapPb8TeVPtRebin[i];
                        }
                    }
                    optionBGSmoothingStandard   = "BackDecreasingWindow,BackSmoothing3";
                    optionBGSmoothingVar1       = "BackDecreasingWindow,BackSmoothing5";
                    optionBGSmoothingVar2       = "noSmoothing";
                    nIterBGFit                  = 13;
                    fMaxYFracBGOverIntHist      = 20;
                } else {
                    fStartPtBin                 = GetStartBin("Pi0", energy, modi, specialTrigg);
                    if (fNBinsPt > 16 && isDCA) {
                        cout << "You have chosen to have more than 16 bins, this is not possible, it will be reduced to 16" << endl;
                        fNBinsPt    = 16;
                    } else if (specialTrigg == 0 && ( modi == 2 || modi == 4 ) && fNBinsPt > 36 ){
                        cout << "You have chosen to have more than 36 bins, this is not possible, it will be reduced to 36 for calo analysis" << endl;
                        fNBinsPt    = 36;
                    } else if (fNBinsPt > 39 && specialTrigg == 0){
                        cout << "You have chosen to have more than 39 bins, this is not possible, it will be reduced to 39 for conv analysis" << endl;
                        fNBinsPt    = 37;
                    } else if (fNBinsPt > 60 ){
                        cout << "You have chosen to have more than 60 bins, this is not possible, it will be reduced to 60 for calo analysis" << endl;
                        fNBinsPt    = 60;
                    }
                    GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);

                    for (Int_t i = 0; i < fNBinsPt+1; i++) {
                        if (specialTrigg == 1 && modi == 10){
                            fBinsPt[i]  = fBinsPi0pPb8TeVPtEMCTrig[i];
                            if (i < fNBinsPt+1)
                                fNRebin[i]  = fBinsPi0pPb8TeVEMCTrigPtRebin[i];
                        } else if (specialTrigg == 2 && modi == 10){
                            fBinsPt[i]  = fBinsPi0pPb8TeVPtEMCTrig[i];
                            if (i < fNBinsPt+1)
                                fNRebin[i]  = fBinsPi0pPb8TeVEMCTrigPtRebin[i];
                        } else if (specialTrigg == 3 && modi == 10){
                            fBinsPt[i]  = fBinsPi0pPb8TeVPtEMCTrig[i];
                            if (i < fNBinsPt+1)
                                fNRebin[i]  = fBinsPi0pPb8TeVEMCTrigPtRebin[i];
                        } else {
                            if (isDCA)
                                fBinsPt[i]  = fBinsPi0pPb8TeVPtDCA[i];
                            else
                                fBinsPt[i]  = fBinsPi0pPb8TeVPt[i];
                            if (modi == 2 || modi == 4)
                                fBinsPt[i]  = fBinsPi0pPb8TeVEMCPt[i];
                            else if (modi == 3 || modi == 5)
                                fBinsPt[i]  = fBinsPi0pPb8TeVPHOSPt[i];
                            else if ( modi == 6 )
                                fBinsPt[i]  = fBinsPi0pPb8TeVEMCDalitzPt[i];
                            else if ( modi == 1 )
                                fBinsPt[i]  = fBinsPi0pPb8TeVDalitzPt[i];

                            if (i < fNBinsPt+1){
                                fNRebin[i]                         = fBinsPi0pPb8TeVPtRebin[i];
                                if (modi == 1 ) fNRebin[i]         = fBinsPi0pPb8TeVDalitzPtRebin[i];
                                if (modi == 2 ) fNRebin[i]         = fBinsPi0pPb8TeVPCMEMCPtRebin[i];
                                if (modi == 3 ) fNRebin[i]         = fBinsPi0pPb8TeVPCMPHOSPtRebin[i];
                                if (modi == 4 ) fNRebin[i]         = fBinsPi0pPb8TeVEMCPtRebin[i];
                                if (modi == 5 ) fNRebin[i]         = fBinsPi0pPb8TeVPHOSPtRebin[i];
                                if (modi == 6 ) fNRebin[i]         = fBinsPi0pPb8TeVEMCDalitzPtRebin[i];
                                if (modi == 7 ) fNRebin[i]         = fBinsPi0pPb8TeVEMCDalitzPtRebin[i];
                            }
                        }
                    }
                    optionBGSmoothingStandard   = "BackDecreasingWindow,BackSmoothing3";
                    optionBGSmoothingVar1       = "BackDecreasingWindow,BackSmoothing5";
                    optionBGSmoothingVar2       = "noSmoothing";
                    nIterBGFit                  = 11;
                    fMaxYFracBGOverIntHist      = 20;
                }
            //*********************************************************************************************
            //********************************** Pi0 for PbPb 2.76TeV**************************************
            //*********************************************************************************************
            } else if( energy.CompareTo("PbPb_2.76TeV") == 0) {
                if (directPhoton.CompareTo("directPhoton") == 0){
                    fStartPtBin     = 3;
                    if (fNBinsPt > 22) {
                        cout << "You have chosen Direct Photon Plots and more than 24 bins, this is not possible, it will be reduced to 24 bins." << endl;
                        fNBinsPt    = 22;
                    }
                    GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);
                    for (Int_t i = 0; i < fNBinsPt+1; i++) {
                        if(fNBinsPt==22){
                            fBinsPt[i]  = fBinsDirGammaPbPb2760GeVPtLHC11h[i];
                            if (i < fNBinsPt+1){
                                if(centrality.CompareTo("20-40%")==0 || centrality.CompareTo("20-50%")==0) fNRebin[i] = fBinsDirGammaPbPb2760GeVPtLHC11hSemicRebin[i];
                                else fNRebin[i] = fBinsDirGammaPbPb2760GeVPtLHC11hRebin[i];
                            }
                        } else {
                            fBinsPt[i]  = fBinsDirGammaPbPb2760GeVPtLHC11hVar2[i];
                            if (i < fNBinsPt+1){
                                if(centrality.CompareTo("20-40%")==0 || centrality.CompareTo("20-50%")==0) fNRebin[i] = fBinsDirGammaPbPb2760GeVPtLHC11hSemicRebinVar2[i];
                                else fNRebin[i] = fBinsDirGammaPbPb2760GeVPtLHC11hRebinVar2[i];
                            }
                        }
                    }
                } else {
                    fStartPtBin     = GetStartBin("Pi0", energy, modi, specialTrigg, clusterCutSelection(GetClusterMinEnergyCutPosition(clusterCutSelection),1));
                    if (fNBinsPt > 15 && isDCA) {
                        cout << "You have chosen to have more than 15 bins, this is not possible, it will be reduced to 15" << endl;
                        fNBinsPt    = 15;
                    } else if (fNBinsPt > 26) {
                        cout << "You have chosen to have more than 26 bins, this is not possible, it will be reduced to 24" << endl;
                        fNBinsPt    = 26;
                    }
                    GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);
                    for (Int_t i = 0; i < fNBinsPt+1; i++) {
                        if (isDCA) {
                            if (!centDCA.CompareTo("60-80%") || !centDCA.CompareTo("70-80%") || !centDCA.CompareTo("75-90%") ){
                                fBinsPt[i]          = fBinsPi0PbPb2760GeVPtDCAPer[i];
                            } else {
                                fBinsPt[i]          = fBinsPi0PbPb2760GeVPtDCA[i];
                            }
                        } else fBinsPt[i]  = fBinsPi0PbPb2760GeVPtLHC11h[i];
                        if (modi == 0){
                            if (i < fNBinsPt+1){
                                if(centrality.CompareTo("20-40%")==0 || centrality.CompareTo("20-50%")==0) fNRebin[i] = fBinsPi0PbPb2760GeVPtLHC11hSemicRebin[i];
                                else fNRebin[i] = fBinsPi0PbPb2760GeVPtLHC11hRebin[i];
                            }
                        } else {
                            if (i < fNBinsPt+1) fNRebin[i] = fBinsPi0PbPb2760GeVPtLHC11hPCMEMCRebin[i];
                        }
                    }
                    optionBGSmoothingStandard   = "BackDecreasingWindow,BackSmoothing5";
                    optionBGSmoothingVar1       = "BackDecreasingWindow,BackSmoothing3";
                    optionBGSmoothingVar2       = "BackDecreasingWindow,BackSmoothing7";
                    if (!centDCA.CompareTo("60-80%")){
                        nIterBGFit                  = 15;
                        fMaxYFracBGOverIntHist      = 15;
                    } else if ( (!centDCA.CompareTo("75-90%")) || (!centDCA.CompareTo("70-80%"))){
                        optionBGSmoothingStandard   = "BackDecreasingWindow,BackSmoothing9";
                        optionBGSmoothingVar1       = "BackDecreasingWindow,BackSmoothing7";
                        optionBGSmoothingVar2       = "BackDecreasingWindow,BackSmoothing11";
                        nIterBGFit                  = 14;
                        fMaxYFracBGOverIntHist      = 50;
                    } else if (!centDCA.CompareTo("70-80%")){
                        optionBGSmoothingStandard   = "BackDecreasingWindow,BackSmoothing9";
                        optionBGSmoothingVar1       = "BackDecreasingWindow,BackSmoothing7";
                        optionBGSmoothingVar2       = "BackDecreasingWindow,BackSmoothing11";
                        nIterBGFit                  = 14;
                        fMaxYFracBGOverIntHist      = 50;
                    } else if (!centDCA.CompareTo("60-70%")){
                        optionBGSmoothingStandard   = "BackDecreasingWindow,BackSmoothing7";
                        optionBGSmoothingVar1       = "BackDecreasingWindow,BackSmoothing5";
                        optionBGSmoothingVar2       = "BackDecreasingWindow,BackSmoothing9";
                        nIterBGFit                  = 17;
                        fMaxYFracBGOverIntHist      = 15;
                    } else if (!centDCA.CompareTo("50-60%")){
                        nIterBGFit                  = 14;
                        fMaxYFracBGOverIntHist      = 12;
                    } else if (!centDCA.CompareTo("40-60%")){
                        nIterBGFit                  = 17;
                        fMaxYFracBGOverIntHist      = 10;
                    } else if (!centDCA.CompareTo("40-50%")) {
                        nIterBGFit                  = 16;
                        fMaxYFracBGOverIntHist      = 12;
                    } else if ( (!centDCA.CompareTo("30-50%")) || (!centDCA.CompareTo("30-40%")) ) {
                        nIterBGFit                  = 18;
                        fMaxYFracBGOverIntHist      = 12;
                    } else if (!centDCA.CompareTo("20-50%")) {
                        nIterBGFit                  = 17;
                        fMaxYFracBGOverIntHist      = 12;
                    } else if (!centDCA.CompareTo("20-40%")){
                        nIterBGFit              = 17;
                        fMaxYFracBGOverIntHist  = 8;
                    } else if (!centDCA.CompareTo("20-30%")) {
                        nIterBGFit                  = 18;
                        fMaxYFracBGOverIntHist      = 12;
                    } else {
                        fMaxYFracBGOverIntHist      = 4;
                        nIterBGFit                  = 21;
                    }
                }
            //*********************************************************************************************
            //********************************** Pi0 for PbPb 5.02TeV**************************************
            //*********************************************************************************************
            } else if( energy.CompareTo("PbPb_5.02TeV") == 0) {
                if (directPhoton.CompareTo("directPhoton") == 0){
                    fStartPtBin     = 1;
                    if (fNBinsPt > 19) {
                        cout << "You have chosen Direct Photon Plots and more than 19 bins, this is not possible, it will be reduced to 19 bins." << endl;
                        fNBinsPt    = 19;
                    }
                    GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);
                    for (Int_t i = 0; i < fNBinsPt+1; i++) {
                        fBinsPt[i]  = fBinsDirGammaPbPb5TeVPt[i];
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsDirGammaPbPb5TeVPtRebin[i];
                    }
                } else{
                    fStartPtBin     = GetStartBin("Pi0", energy, modi, specialTrigg, clusterCutSelection(GetClusterMinEnergyCutPosition(clusterCutSelection),1));
                    if (fNBinsPt > 12 && isDCA) {
                        cout << "You have chosen to have more than 12 bins, this is not possible, it will be reduced to 12" << endl;
                        fNBinsPt        = 12;
                    }
                    GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);

                    for (Int_t i = 0; i < fNBinsPt+1; i++) {
                        if (isDCA){
                            fBinsPt[i]  = fBinsPi0PbPb5TeVPtDCA[i];
                            if (i < fNBinsPt+1) fNRebin[i] = fBinsPi0PbPb5TeVPtRebin[i];
                        }else{
                          if (modi == 2){
                            fBinsPt[i]  = fBinsPi0PbPb5TeVPCMEMCPt[i];
                            if (i < fNBinsPt+1) fNRebin[i] = fBinsPi0PbPb5TeVPCMEMCPtRebin[i];
                          }else if (modi == 4){
                            fBinsPt[i]  = fBinsPi0PbPb5TeVEMCPt[i];
                            if (i < fNBinsPt+1) fNRebin[i] = fBinsPi0PbPb5TeVEMCPtRebin[i];
                          }else{
                            fBinsPt[i]  = fBinsPi0PbPb5TeVPt[i];
                            if (i < fNBinsPt+1) fNRebin[i] = fBinsPi0PbPb5TeVPtRebin[i];
                          }
                        }
                    }
                }
            //*********************************************************************************************
            //********************************** Pi0 for XeXe 5.44TeV**************************************
            //*********************************************************************************************
            } else if( energy.CompareTo("XeXe_5.44TeV") == 0) {
                fStartPtBin     = GetStartBin("Pi0", energy, modi, -1, centrality);

                if (fNBinsPt > 15 && isDCA) {
                    cout << "You have chosen to have more than 15 bins, this is not possible, it will be reduced to 15" << endl;
                    fNBinsPt    = 15;
                } else if (fNBinsPt > 25) {
                    cout << "You have chosen to have more than 26 bins, this is not possible, it will be reduced to 25" << endl;
                    fNBinsPt    = 25;
                }

                GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);
                for (Int_t i = 0; i < fNBinsPt+1; i++) {
                    if (isDCA)
                        fBinsPt[i]          = fBinsPi0XeXe5440GeVPtDCA[i];
                    else
                        fBinsPt[i]          = fBinsPi0XeXe5440GeVPt[i];
                    if (i < fNBinsPt+1){
                      fNRebin[i]            = fBinsPi0XeXe5440GeVPtRebin[i];
                      if (centrality.CompareTo("0-90%") == 0)
                          fNRebin[i]        = fBinsPi0XeXe5440GeVPtRebin[i];
                      else
                          fNRebin[i]        = fBinsPi0XeXe5440GeVPtRebinCent[i];
                    }
                }
                optionBGSmoothingStandard   = "BackDecreasingWindow,BackSmoothing5";
                optionBGSmoothingVar1       = "BackDecreasingWindow,BackSmoothing3";
                optionBGSmoothingVar2       = "BackDecreasingWindow,BackSmoothing7";
                nIterBGFit                  = 15;
                fMaxYFracBGOverIntHist      = 15;
            }

        //*************************************************************************************************
        //********************************** Binning for Eta **********************************************
        //*************************************************************************************************
        } else if (setPi0.CompareTo("Eta") == 0 || setPi0.CompareTo("Pi0EtaBinning") == 0){
            fNBinsPt                = numberOfBins;
            fBinsPt                 = new Double_t[50];
            fNRebin                 = new Int_t[49];
            //*********************************************************************************************
            //********************************** Eta for pp 0.9 TeV****************************************
            //*********************************************************************************************
            if (energy.CompareTo("900GeV") == 0) {
                fStartPtBin         = 1;
                if(modi == 4) fStartPtBin         = 3;
                if (modi == 2){
                    if (fNBinsPt > 4) {
                        cout << "You have chosen to have more than 4 bins for Eta, this is not possible, it will be reduced to 4" << endl;
                        fNBinsPt        = 4;
                    }
                } else {
                    if (fNBinsPt > 3) {
                        cout << "You have chosen to have more than 3 bins for Eta, this is not possible, it will be reduced to 3" << endl;
                        fNBinsPt        = 3;
                    }
                }
                GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);

                for (Int_t i = 0; i < fNBinsPt+1; i++) {
                if( modi == 2){
                    fBinsPt[i]      = fBinsEta900GeVPCMEMCPt[i];
                if (i < fNBinsPt+1)
                        fNRebin[i]  = fBinsEta900GeVPCMEMCPtRebin[i];
                }else{
                    fBinsPt[i]      = fBinsEta900GeVPt[i];
                    if (i < fNBinsPt+1)
                        fNRebin[i]  = fBinsEta900GeVPtRebin[i];
                }
                }
                nIterBGFit          = 13;
                fMaxYFracBGOverIntHist = 20;
            //*********************************************************************************************
            //********************************** Eta for pp 2.76TeV****************************************
            //*********************************************************************************************
            } else if (energy.CompareTo("2.76TeV") == 0) {
                //LHC13g running with trigger
                if (triggerSet == -1){
                    if (trigger.CompareTo("52") == 0){
                        specialTrigg = 1;    // L0
                    } else if ( trigger.CompareTo("85") == 0 ){
                        specialTrigg = 2; //L1 G2 (lower threshold)
                    } else if ( trigger.CompareTo("83") == 0    ){
                        specialTrigg = 3; //L1 G1 (lower threshold)
                    } else if ( trigger.CompareTo("51") == 0    ){
                        specialTrigg = 4; //L0 LHC11a
                    } else if ( trigger.CompareTo("01") == 0  || trigger.CompareTo("00") == 0   ){
                        specialTrigg = 5; //INT7 LHC13g
                    }
                } else {
                    specialTrigg        = triggerSet;
                }

                fStartPtBin         = 1;
                if ( modi == 3)
                    fStartPtBin     = 2;
                else if (modi == 2 && specialTrigg == 0) // MB, PCM-EMC
                    fStartPtBin     = 2;
                else if (modi == 2 && specialTrigg == 5) { // INT7, PCM-EMC
                    fStartPtBin     = 4;
                } else if (modi == 2 && specialTrigg == 1) // EMC7, PCM-EMC
                    fStartPtBin     = 4;
                else if (modi == 2 && specialTrigg == 2) // L1 G2, PCM-EMC
                    fStartPtBin     = 6;
                else if (modi == 2 && specialTrigg == 3) // L1 G1, PCM-EMC
                    fStartPtBin     = 7;
                else if (modi == 2 && specialTrigg == 4) // EMC1, PCM-EMC
                    fStartPtBin     = 4;
                else if (modi == 4 && specialTrigg == 1)
                    fStartPtBin     = 5;
                else if (modi == 4 && specialTrigg == 2)
                    fStartPtBin     = 6;
                else if (modi == 4 && specialTrigg == 3)
                    fStartPtBin     = 7;
                else if (modi == 4 && specialTrigg == 4)
                    fStartPtBin     = 6;
                else if (modi == 4 )
                    fStartPtBin     = 4;
                else if (modi == 5 )
                    fStartPtBin     = 3;

                if (fNBinsPt > 14 && isDCA) {
                    cout << "You have chosen to have more than 15 DCA bins for Eta, this is not possible, it will be reduced to 15" << endl;
                    fNBinsPt        = 14;
                } else if (fNBinsPt > 7 && (modi == 0 || modi == 1) && specialTrigg < 1) {
                    cout << "You have chosen to have more than 7 bins for Eta, this is not possible, it will be reduced to 7" << endl;
                    fNBinsPt        = 7;
                } else if (fNBinsPt > 13 && (modi == 2 || modi == 3 || modi == 4 || modi == 0)){
                    cout << "You have chosen to have more than 13 bins for Eta, this is not possible, it will be reduced to 13" << endl;
                    fNBinsPt        = 13;
                }
                GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);
                for (Int_t i = 0; i < fNBinsPt+1; i++) {
                    if ( ( modi == 2 && specialTrigg == 0) ||
                        ( modi == 4 && specialTrigg == 0) ){
                        fBinsPt[i]  = fBinsEta2760GeVPt[i];
                        if (setPi0.CompareTo("Eta") == 0){
                            if (i < fNBinsPt+1) fNRebin[i] = fBinsEta2760GeVPCMEMCPtRebin[i];
                        } else {
                            if (i < fNBinsPt+1) fNRebin[i] = fBinsPi0EtaBinning2760GeVPCMEMCPtRebin[i];
                        }
                    } else if ( (modi == 2 && specialTrigg == 5)||
                                (modi == 4 && specialTrigg == 5)){
                        fBinsPt[i]  = fBinsEta2760GeVPt[i];
                        if (setPi0.CompareTo("Eta") == 0){
                            if (i < fNBinsPt+1) fNRebin[i] = fBinsEta2760GeVPCMEMCPtTrigINT7Rebin[i];
                        } else {
                            if (i < fNBinsPt+1) fNRebin[i] = fBinsPi0EtaBinning2760GeVPCMEMCPtRebin[i];
                        }
                    } else if ( (modi == 2 && specialTrigg == 4 ) ||
                                (modi == 4 && specialTrigg == 4 ) ||
                                (modi == 4 && specialTrigg == 2 ) ||
                                (modi == 4 && specialTrigg == 3 )
                            ){
                        fBinsPt[i]  = fBinsEta2760GeVPtTrig11a[i];
                        if (setPi0.CompareTo("Eta") == 0){
                            if (i < fNBinsPt+1) fNRebin[i] = fBinsEta2760GeVPCMEMCPtTrig11aRebin[i];
                        } else {
                            if (i < fNBinsPt+1){
                                fNRebin[i] = fBinsPi0EtaBinning2760GeVPCMEMCPtTrig11aRebin[i];
                            }
                        }
                    } else if ( (modi == 2 && specialTrigg == 3 ) ||
                                (modi == 0 && specialTrigg > 0 )
                            ){
                        fBinsPt[i]  = fBinsEta2760GeVPtTrig11a[i];
                        if (setPi0.CompareTo("Eta") == 0){
                            if (i < fNBinsPt+1) fNRebin[i] = fBinsEta2760GeVPCMEMCPtRebin[i];
                        } else {
                            if (i < fNBinsPt+1) fNRebin[i] = fBinsPi0EtaBinning2760GeVPCMEMCPtRebin[i];
                        }
                    } else if ( modi == 2 && specialTrigg == 2 ){
                        fBinsPt[i]  = fBinsEta2760GeVPtTrig11a[i];
                        if (setPi0.CompareTo("Eta") == 0){
                            if (i < fNBinsPt+1) fNRebin[i] = fBinsEta2760GeVPCMEMCPtEG2Rebin[i];
                        } else {
                            if (i < fNBinsPt+1) fNRebin[i] = fBinsPi0EtaBinning2760GeVPCMEMCPtRebin[i];
                        }

                    } else {
                        if (isDCA) {
                            if (!setPi0.CompareTo("Pi0EtaBinning"))
                                fBinsPt[i]  = fBinsEta2760GeVPt[i];
                            else
                                fBinsPt[i]  = fBinsPi02760GeVPtDCA[i];
                        } else
                            fBinsPt[i]  = fBinsEta2760GeVPt[i];
                        if (setPi0.CompareTo("Eta") == 0){
                            if (i < fNBinsPt+1) fNRebin[i] = fBinsEta2760GeVPtRebin[i];
                        } else {
                            if (i < fNBinsPt+1) fNRebin[i] = fBinsPi0EtaBinning2760GeVPtRebin[i];
                        }
                    }
                }
                if (!setPi0.CompareTo("Pi0EtaBinning"))
                    fMaxYFracBGOverIntHist      = 20;
                else
                    fMaxYFracBGOverIntHist      = 50;
                nIterBGFit                  = 13;
            //*********************************************************************************************
            //********************************** Eta for pp 5TeV*******************************************
            //*********************************************************************************************
            } else if (energy.CompareTo("5TeV") == 0 || energy.CompareTo("5TeV2017") == 0) {

                if (triggerSet == -1){
                    if (trigger.CompareTo("52") == 0){
                        specialTrigg = 1; // EMC7
                    } else if ( trigger.CompareTo("85") == 0 ){
                        specialTrigg = 2; // EG2 lower
                    } else if ( trigger.CompareTo("83") == 0 ) {
                        specialTrigg = 3; // EG1 higher
                    }
                } else {
                    specialTrigg        = triggerSet;
                }

                fStartPtBin         = 1;
                if( modi == 2 )
                    fStartPtBin = 5;
                if( modi == 4 )
                    fStartPtBin = 7;
                if (modi == 4 && specialTrigg == 1) { fStartPtBin = 11; fNBinsPt = 29; } // EMC7
                if (modi == 4 && specialTrigg == 2) { fStartPtBin = 11; fNBinsPt = 29; } // EG2
                if (modi == 4 && specialTrigg == 3) { fStartPtBin = 11; fNBinsPt = 29; } // EG1

                if (fNBinsPt > 8 && isDCA) {
                    cout << "You have chosen to have more than 8 DCA bins for Eta, this is not possible, it will be reduced to 8" << endl;
                    fNBinsPt        = 8;
                } else if (fNBinsPt > 23) {
                    cout << "You have chosen to have more than 23 bins for Eta, this is not possible, it will be reduced to 23" << endl;
                    fNBinsPt        = 23;
                }
                GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);

                for (Int_t i = 0; i < fNBinsPt+2; i++) {
                    if (isDCA){
                        if ( modi == 0 && energy.Contains("2017"))
                            fBinsPt[i]  = fBinsEta5TeV2017PtDCA[i];
                        else
                            fBinsPt[i]  = fBinsEta5TeVPtDCA[i];
                    } else {
                            if        ( modi == 0 ) {
                                if(energy.Contains("2017")){
                                    fBinsPt[i]  = fBinsEta5TeV2017Pt[i];
                                } else {
                                    fBinsPt[i]  = fBinsEta5TeVPt[i];
                                }
                            } else if ( modi == 2 ) {
                              fBinsPt[i]  = fBinsEta5TeVPCMEMCPt[i];
                            } else if ( modi == 4 ) {
                              if(specialTrigg == 1 || specialTrigg == 2 || specialTrigg == 3){
                                fBinsPt[i]  = fBinsEta5TeVEMCPtTrigger1[i];
                              }else{
                                fBinsPt[i]  = fBinsEta5TeVEMCPt[i];
                              }
                            } else {
                                fBinsPt[i]  = fBinsEta5TeVPt[i];
                            }
                    }
                    if (setPi0.CompareTo("Eta") == 0){
                        if (i < fNBinsPt+1){
                            if( modi == 2 ){
                              fNRebin[i] = fBinsEta5TeVPCMEMCPtRebin[i];
                            } else if ( modi == 4 ){
                              if(specialTrigg == 1 || specialTrigg == 2 || specialTrigg == 3){
                                fNRebin[i] = fBinsEta5TeVEMCPtRebinTrigger1[i];
                              }else{
                                fNRebin[i] = fBinsEta5TeVEMCPtRebin[i];
                              }
                            } else {
                                fNRebin[i]  = fBinsEta5TeVPtRebin[i];
                            }
                        }
                    } else {
                        if (i < fNBinsPt+1) {
                            if( modi == 2 ){
                                fNRebin[i] = fBinsPi0EtaBinning5TeVPCMEMCPtRebin[i];
                            } else if ( modi == 4 && (specialTrigg == 1 || specialTrigg == 2 || specialTrigg == 3) ){
                              fNRebin[i]  = fBinsPi0EtaBinning5TeVPtRebinEMCTrigger1[i];
                            } else {
                              fNRebin[i]  = fBinsPi0EtaBinning5TeVPtRebin[i];
                            }
                        }
                    }
                }
            //*********************************************************************************************
            //********************************** Eta for pp 7TeV*******************************************
            //*********************************************************************************************
            } else if (energy.CompareTo("7TeV") == 0) {
                fStartPtBin         = 1;
                if(modi == 40 || modi == 41 || modi == 42 || modi == 44 || modi == 45) fStartPtBin     = GetStartBin("Eta","7TeV",modi);

                if (modi == 2 ) {
                    fStartPtBin     = 3;
                } else if (modi == 3 ) {
                    fStartPtBin     = 2;
                } else if (modi == 4) {
                    fStartPtBin     = 6;
                }

                if (fNBinsPt > 18) {
                    cout << "You have chosen to have more than 18 bins for Eta, this is not possible, it will be reduced to 18" << endl;
                    fNBinsPt        = 18;
                }
                GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);
                for (Int_t i = 0; i < fNBinsPt+2; i++) {
                    if (modi == 0){
                        fBinsPt[i]      = fBinsEta7TeVPt[i];
                        if (i < fNBinsPt+1){
                          if(!setPi0.CompareTo("Pi0EtaBinning"))
                            fNRebin[i]  = fBinsPi0EtaBinning7TeVPtRebin[i];
                          else
                            fNRebin[i]  = fBinsEta7TeVPtRebin[i];
                        }
                    } else if (modi == 1){
                        fBinsPt[i]      = fBinsEta7TeVDalitzPt[i];
                        if (i < fNBinsPt+1)
                            fNRebin[i]  = fBinsEta7TeVDalitzPtRebin[i];
                    } else if (modi == 2){
                        fBinsPt[i]      = fBinsEta7TeVPCMEMCPt[i];
                        if (i < fNBinsPt+1){
                          if(!setPi0.CompareTo("Pi0EtaBinning"))
                            fNRebin[i] = fBinsPi0EtaBinning7TeVPCMEMCPtRebin[i];
                          else
                            fNRebin[i] = fBinsEta7TeVPCMEMCPtRebin[i];
                        }
                    } else if (modi == 3){
                        fBinsPt[i]      = fBinsEta7TeVPCMPHOSPt[i];
                        if (i < fNBinsPt+1)
                            fNRebin[i]  = fBinsEta7TeVPCMPHOSPtRebin[i];
                    } else if(modi == 4){
                        fBinsPt[i]      = fBinsEta7TeVPCMEMCPt[i];
                        if (i < fNBinsPt+1){
                          if(!setPi0.CompareTo("Pi0EtaBinning"))
                            fNRebin[i] = fBinsPi0EtaBinning7TeVEMCPtRebin[i];
                          else
                            fNRebin[i] = fBinsEta7TeVEMCPtRebin[i];
                        }
                    } else if(modi == 5){
                      fBinsPt[i]      = fBinsEta7TeVPHOSPt[i];
                      if (i < fNBinsPt+1)
                        fNRebin[i]  = fBinsEta7TeVPHOSPtRebin[i];
                    }else if(modi == 40){
                        fBinsPt[i] = fBinsEtaPiPlPiMiPiZero7TevPtPCM[i];
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsEtaPiPlPiMiPiZero7TevPtRebinPCM[i];
                    } else if(modi == 41){
                        fBinsPt[i] = fBinsEtaPiPlPiMiPiZero7TevPtPCMEMC[i];
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsEtaPiPlPiMiPiZero7TevPtRebinPCMEMC[i];
                    } else if(modi == 42){
                        fBinsPt[i] = fBinsEtaPiPlPiMiPiZero7TevPtPCMPHOS[i];
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsEtaPiPlPiMiPiZero7TevPtRebinPCMPHOS[i];
                    } else if(modi == 44){
                        fBinsPt[i] = fBinsEtaPiPlPiMiPiZero7TevPtEMC[i];
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsEtaPiPlPiMiPiZero7TevPtRebinEMC[i];
                    } else if(modi == 45){
                        fBinsPt[i] = fBinsEtaPiPlPiMiPiZero7TevPtPHOS[i];
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsEtaPiPlPiMiPiZero7TevPtRebinPHOS[i];
                    } else {
                      fBinsPt[i]      = fBinsEta7TeVPt[i];
                      if (i < fNBinsPt+1)
                        fNRebin[i]  = fBinsEta7TeVPtRebin[i];
                    }
                }
                nIterBGFit                  = 12;
            //*********************************************************************************************
            //********************************** Eta for pp 8TeV*******************************************
            //*********************************************************************************************
            } else if (energy.CompareTo("8TeV") == 0) {
                if (triggerSet == -1){
                    if (trigger.CompareTo("52") == 0){
                        specialTrigg = 1; // L0 EMC7
                    } else if ( trigger.CompareTo("81") == 0 ){
                        specialTrigg = 2; //L1 INT7 EGA
                    } else if ( trigger.CompareTo("53") == 0 ){
                        specialTrigg = 3; // L0 EMC8
                    } else if ( trigger.CompareTo("82") == 0 ) {
                        specialTrigg = 4; // L1 INT8 EGA
                    }
                } else {
                    specialTrigg        = triggerSet;
                }

                fStartPtBin = 1;
                if (modi == 2 ) fStartPtBin = 2;
                if (modi == 4 ) fStartPtBin = 5;

                if (modi == 0 && specialTrigg == 1) fStartPtBin = 10;
                if (modi == 0 && specialTrigg == 2) fStartPtBin = 12;
                if (modi == 2 && specialTrigg == 1) fStartPtBin = 10;
                if (modi == 2 && specialTrigg == 2) fStartPtBin = 14;
                if (modi == 4 && specialTrigg == 1) fStartPtBin = 10;
                if (modi == 4 && specialTrigg == 2) fStartPtBin = 14;

                if ( fNBinsPt > 17 && isDCA ) {
                    cout << "You have chosen to have more than 17 bins for Eta, this is not possible, it will be reduced to 12" << endl;
                    fNBinsPt            = 17;
                } else if (fNBinsPt > 16 && modi != 2 && modi != 3 && modi != 4) {
                    if( specialTrigg == 2 && fNBinsPt > 23){
                        cout << "You have chosen to have more than 23 bins, this is not possible, it will be reduced to 23" << endl;
                        fNBinsPt        = 23;
                    } else if ( specialTrigg == 1 && fNBinsPt > 23){
                        cout << "You have chosen to have more than 23 bins, this is not possible, it will be reduced to 23" << endl;
                        fNBinsPt = 23;
                    } else if(specialTrigg!=1 && specialTrigg!=2 && fNBinsPt >21) {
                        cout << "You have chosen to have more than 21 bins for Eta, this is not possible, it will be reduced to 21" << endl;
                        fNBinsPt        = 21;
                    }
                } else if (fNBinsPt > 19 && (modi == 4)){
                    if( setPi0.CompareTo("Pi0EtaBinning") == 0 && ( specialTrigg ==1 && fNBinsPt > 24) ){
                        fNBinsPt        = 24;
                    } else if ( setPi0.CompareTo("Pi0EtaBinning") == 0 && ( specialTrigg == 2 && fNBinsPt > 19) ){
                        fNBinsPt        = 19;
                    } else if( specialTrigg == 2 && fNBinsPt > 23){
                        cout << "You have chosen to have more than 23 bins, this is not possible, it will be reduced to 23" << endl;
                        fNBinsPt        = 23;
                    } else if ( specialTrigg == 1 && fNBinsPt > 26){
                        cout << "You have chosen to have more than 26 bins, this is not possible, it will be reduced to 26" << endl;
                        fNBinsPt = 26;
                    } else if(specialTrigg!=1 && specialTrigg!=2 && fNBinsPt >21) {
                        cout << "You have chosen to have more than 21 bins for Eta, this is not possible, it will be reduced to 21" << endl;
                        fNBinsPt        = 21;
                    }
                } else if (fNBinsPt > 19 && (modi == 2 || modi == 3)){
                    if( specialTrigg == 2 && fNBinsPt > 23){
                        cout << "You have chosen to have more than 23 bins, this is not possible, it will be reduced to 23" << endl;
                        fNBinsPt        = 23;
                    } else if ( specialTrigg == 1 && fNBinsPt > 23){
                        cout << "You have chosen to have more than 23 bins, this is not possible, it will be reduced to 23" << endl;
                        fNBinsPt = 23;
                    } else if(specialTrigg!=1 && specialTrigg!=2) {
                        cout << "You have chosen to have more than 19 bins for Eta, this is not possible, it will be reduced to 19" << endl;
                        fNBinsPt        = 19;
                    }
                }
                GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);

                for (Int_t i = 0; i < fNBinsPt+1; i++) {
                    if( modi == 0 ){
                        if(specialTrigg == 1){
                            fBinsPt[i]      = fBinsEta8TeVPCMTrigger1Pt[i];
                        } else if (specialTrigg == 2){
                            fBinsPt[i]      = fBinsEta8TeVPCMTrigger2Pt[i];
                        } else
                            fBinsPt[i]      = fBinsEta8TeVPt[i];
                    } else if ( modi == 2 ){
                        if(specialTrigg == 1){
                            fBinsPt[i]      = fBinsEta8TeVTrigger1Pt[i];
                        } else if (specialTrigg == 2){
                            fBinsPt[i]      = fBinsEta8TeVTrigger2Pt[i];
                        } else
                            fBinsPt[i]      = fBinsEta8TeVPCMEMCPt[i];
                    } else if( modi == 4 ){
                        if(specialTrigg == 1){
                        fBinsPt[i]      = fBinsEta8TeVEMCTrigger1Pt[i];
                        } else if (specialTrigg == 2){
                            fBinsPt[i]      = fBinsEta8TeVTrigger2Pt[i];
                        } else
                            fBinsPt[i]      = fBinsEta8TeVEMCPt[i];
                    } else {
                        fBinsPt[i]      = fBinsEta8TeVPt[i];
                    }

                    if ( modi == 0 ){
                        if(specialTrigg == 1){
                            if (i < fNBinsPt+1) fNRebin[i] = fBinsEta8TeVPCMTrigger1PtRebin[i];
                        } else if(specialTrigg == 2){
                            if (i < fNBinsPt+1) fNRebin[i] = fBinsEta8TeVPCMTrigger2PtRebin[i];
                        } else if(!setPi0.CompareTo("Pi0EtaBinning")){
                            if (i < fNBinsPt+1) fNRebin[i] = fBinsPi0EtaBinning8TeVPtRebin[i];
                        } else {
                            if (i < fNBinsPt+1) fNRebin[i] = fBinsEta8TeVPtRebin[i];
                        }
                    } else if ( modi == 2 ){
                        if(specialTrigg == 1){
                            if (i < fNBinsPt+1) fNRebin[i] = fBinsEta8TeVPCMEMCTrigger1PtRebin[i];
                        } else if(specialTrigg == 2){
                            if (i < fNBinsPt+1) fNRebin[i] = fBinsEta8TeVPCMEMCTrigger2PtRebin[i];
                        } else {
                            if (i < fNBinsPt+1) fNRebin[i] = fBinsEta8TeVPCMEMCPtRebin[i];
                        }
                    } else if ( modi == 4 ) {
                        if(specialTrigg == 1){
                            if (i < fNBinsPt+1) fNRebin[i] = fBinsEta8TeVEMCTrigger1PtRebin[i];
                        } else if(specialTrigg == 2){
                            if (i < fNBinsPt+1){
                                fNRebin[i] = fBinsEta8TeVEMCTrigger2PtRebin[i];
                                if(setPi0.CompareTo("Pi0EtaBinning") == 0 && fBinsPt[i]==18) fNRebin[i] = 16;
                            }
                        } else {
                            if (i < fNBinsPt+1) fNRebin[i] = fBinsEta8TeVEMCPtRebin[i];
                        }
                    } else {
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsEta8TeVPtRebin[i];
                    }
                }
                nIterBGFit                  = 8;
                fMaxYFracBGOverIntHist      = 50;
                optionBGSmoothingStandard   = "BackDecreasingWindow,BackSmoothing5";
                optionBGSmoothingVar1       = "BackDecreasingWindow,BackSmoothing6";
                optionBGSmoothingVar2       = "BackDecreasingWindow,BackSmoothing7";

            //*********************************************************************************************
            //********************************** Eta for pp 13TeV******************************************
            //*********************************************************************************************
            } else if (energy.CompareTo("13TeV") == 0) {
                fStartPtBin         = 1;
                if(modi == 40 || modi == 41 || modi == 42 || modi == 44 || modi == 45) fStartPtBin     = GetStartBin("Eta","13TeV",modi);

                if (fNBinsPt > 17 && modi == 0) {
                    cout << "You have chosen to have more than 17 bins for Eta, this is not possible, it will be reduced to 17" << endl;
                    fNBinsPt        = 17;
                } else if (fNBinsPt > 24 ) {
                    cout << "You have chosen to have more than 24 bins for Eta, this is not possible, it will be reduced to 34" << endl;
                    fNBinsPt        = 24;
                }
                GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);
                for (Int_t i = 0; i < fNBinsPt+1; i++) {
                    if (modi == 0){
                        if (isDCA)
                            fBinsPt[i]  = fBinsEta13TeVPtDCA[i];
                        else
                            fBinsPt[i]  = fBinsEta13TeVPt[i];
                        if (setPi0.CompareTo("Eta") == 0){
                            if (i < fNBinsPt+1) fNRebin[i]  = fBinsEta13TeVPtRebin[i];
                        } else {
                            if (i < fNBinsPt+1) fNRebin[i]  = fBinsPi0EtaBinning13TeVPtRebin[i];
                        }
                    }else if(modi == 40){
                      for (Int_t i = 0; i < fNBinsPt+2; i++) {
                        fBinsPt[i] = fBinsEtaPiPlPiMiPiZero13TevPtPCM[i];
                        if (i < fNBinsPt+1)
                          fNRebin[i] = fBinsEtaPiPlPiMiPiZero13TevPtRebinPCM[i];
                      }
                    } else {
                        fBinsPt[i]  = fBinsEta13TeVPCMEMCPt[i];
                        if (setPi0.CompareTo("Eta") == 0){
                            if (i < fNBinsPt+1) fNRebin[i]  = fBinsEta13TeVPCMEMCPtRebin[i];
                        } else {
                            if (i < fNBinsPt+1) fNRebin[i]  = fBinsPi0EtaBins13TeVPCMEMCPtRebin[i];
                        }
                    }
                }
                if (!setPi0.CompareTo("Pi0EtaBinning"))
                    nIterBGFit          = 12;
            //*********************************************************************************************
            // ********************************* Eta for 13TeV low B field ********************************
            //*********************************************************************************************
            } else if (energy.CompareTo("13TeVLowB") == 0) {
                fStartPtBin         = 1;
                if (fNBinsPt > 4) {
                    cout << "You have chosen to have more than 4 bins for Eta, this is not possible, it will be reduced to 4" << endl;
                    fNBinsPt        = 4;
                }
                GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);

                for (Int_t i = 0; i < fNBinsPt+1; i++) {
                    fBinsPt[i]      = fBinsEta13TeVLowBPt[i];
                    if (setPi0.CompareTo("Eta") == 0){
                        if (i < fNBinsPt+1) fNRebin[i]  = fBinsEta13TeVLowBPtRebin[i];
                    } else {
                        if (i < fNBinsPt+1) fNRebin[i]  = fBinsPi0EtaBinning13TeVLowBPtRebin[i];
                    }
                }
            //*********************************************************************************************
            //********************************** Eta for pPb 5.023TeV**************************************
            //*********************************************************************************************
            } else if( energy.CompareTo("pPb_5.023TeV") == 0 || energy.CompareTo("pPb_5.023TeVRun2") == 0) {
                if (triggerSet == -1){
                    if (trigger.CompareTo("52") == 0){
                        specialTrigg = 1;    // L0
                    } else if ( trigger.CompareTo("85") == 0 ){
                        specialTrigg = 2; //L1 G2 (lower threshold)
                    } else if ( trigger.CompareTo("83") == 0    ){
                        specialTrigg = 3; //L1 G2 (lower threshold)
                    }
                } else {
                    specialTrigg        = triggerSet;
                }

                fStartPtBin         = GetStartBin("Eta", energy, modi, specialTrigg);
                if (fNBinsPt > 16 && isDCA) {
                    cout << "You have chosen to have more than 16 DCA bins, this is not possible, it will be reduced to 16" << endl;
                    fNBinsPt        = 16;
                } else if (fNBinsPt > 20 && modi < 2) {
                    cout << "You have chosen to have more than 20 bins, this is not possible, it will be reduced to 20" << endl;
                    fNBinsPt        = 20;
                } else if (fNBinsPt > 21 && ( modi == 2 ) && specialTrigg == 0 ) {
                    cout << "You have chosen to have more than 21 bins, this is not possible, it will be reduced to 21" << endl;
                    fNBinsPt        = 21;
                } else if (fNBinsPt > 21 && ( modi == 4) && specialTrigg == 0  && energy.CompareTo("pPb_5.023TeV") == 0)  {
                    cout << "You have chosen to have more than 21 bins, this is not possible, it will be reduced to 21" << endl;
                    fNBinsPt        = 21;
                } else if (fNBinsPt > 29 && ( modi == 4) && specialTrigg == 0  && energy.CompareTo("pPb_5.023TeVRun2") == 0)  {
                    cout << "You have chosen to have more than 29 bins, this is not possible, it will be reduced to 29" << endl;
                    fNBinsPt        = 29;
                } else if (fNBinsPt > 22 && specialTrigg == 0  && energy.CompareTo("pPb_5.023TeV") == 0){
                    cout << "You have chosen to have more than 22 bins, this is not possible, it will be reduced to 22" << endl;
                    fNBinsPt        = 22;
                } else if (fNBinsPt > 26  && energy.CompareTo("pPb_5.023TeV") == 0){
                    cout << "You have chosen to have more than 26 bins, this is not possible, it will be reduced to 26" << endl;
                    fNBinsPt        = 26;
                }
                GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);
                for (Int_t i = 0; i < fNBinsPt+1; i++) {
                    if (modi == 2 && specialTrigg == 1){
                        fBinsPt[i]      = fBinsEtapPb5TeVPtEMCTrig[i];
                        if (i < fNBinsPt+1){
                            fNRebin[i]  = fBinsEtapPb5TeVPCMEMCTrigEMC7PtRebin[i];
                        }
                    } else if (modi == 2 && specialTrigg == 2){
                        fBinsPt[i]      = fBinsEtapPb5TeVPtEMCTrig[i];
                        if (i < fNBinsPt+1){
                            fNRebin[i]  = fBinsEtapPb5TeVPCMEMCTrigEG2PtRebin[i];
                        }
                    } else if (modi == 2 && specialTrigg == 3){
                        fBinsPt[i]      = fBinsEtapPb5TeVPtEMCTrig[i];
                        if (i < fNBinsPt+1){
                            fNRebin[i]  = fBinsEtapPb5TeVPCMEMCTrigPtRebin[i];
                        }
                    } else {
                        // PCM binning
                        if ( modi == 0){
                          if (isDCA )
                              fBinsPt[i]      = fBinsEtapPb5TeVPtDCA[i];
                          else
                              fBinsPt[i]      = fBinsEtapPb5TeVPt[i];
                        // Dalitz binning
                        } else if (modi == 1){
                            fBinsPt[i]      = fBinsEtapPb5TeVDalitzPt[i];
                        // PCM-EMC binning
                        } else if (modi == 2 ){
                            fBinsPt[i]      = fBinsEtapPb5TeVEMCPt[i];
                        // EMC binning
                        } else if (modi == 4 && energy.CompareTo("pPb_5.023TeV") == 0){
                            fBinsPt[i]      = fBinsEtapPb5TeVEMCPt[i];
                        } else if (modi == 4 && energy.CompareTo("pPb_5.023TeVRun2") == 0){
                            fBinsPt[i]      = fBinsEtapPb5TeVEMCR2Pt[i];
                        } else if (modi == 3){
                            fBinsPt[i]      = fBinsEtapPb5TeVPCMPHOSPt[i];
                        } else if (modi == 5){
                            fBinsPt[i]      = fBinsEtapPb5TeVPHOSPt[i];
                        } else {
                            fBinsPt[i]      = fBinsEtapPb5TeVPt[i];
                        }
                        // Rebin factors
                        if (i < fNBinsPt+1){
                            if (modi == 0 && !setPi0.CompareTo("Eta"))
                                fNRebin[i]  = fBinsEtapPb5TeVPtRebin[i];
                            else if (modi == 0 && !setPi0.CompareTo("Pi0EtaBinning"))
                                fNRebin[i]  = fBinsPi0EtapPb5TeVPtRebin[i];
                            else if (modi == 1)
                                fNRebin[i]  = fBinsEtapPb5TeVDalitzPtRebin[i];
                            else if (modi == 2 && !setPi0.CompareTo("Eta"))
                                fNRebin[i]  = fBinsEtapPb5TeVPCMEMCPtRebin[i];
                            else if (modi == 2 && !setPi0.CompareTo("Pi0EtaBinning"))
                                fNRebin[i]  = fBinsPi0EtapPb5TeVPCMEMCPtRebin[i];
                            else if (modi == 3 && !setPi0.CompareTo("Eta"))
                                fNRebin[i]  = fBinsEtapPb5TeVPCMPHOSPtRebin[i];
                            else if (modi == 3 && !setPi0.CompareTo("Pi0EtaBinning"))
                                fNRebin[i]  = fBinsPi0EtapPb5TeVPCMPHOSPtRebin[i];
                            else if (modi == 4 && !setPi0.CompareTo("Eta") && energy.CompareTo("pPb_5.023TeV") == 0)
                                fNRebin[i]  = fBinsEtapPb5TeVEMCPtRebin[i];
                            else if (modi == 4 && !setPi0.CompareTo("Eta") && energy.CompareTo("pPb_5.023TeVRun2") == 0  && !centrality.CompareTo("0-100%") )
                                fNRebin[i]  = fBinsEtapPb5TeVEMCR2PtRebin[i];
                            else if (modi == 4 && !setPi0.CompareTo("Eta") && energy.CompareTo("pPb_5.023TeVRun2") == 0  && centrality.CompareTo("0-100%"))
                                fNRebin[i]  = fBinsEtapPb5TeVCentEMCR2PtRebin[i];
                            else if (modi == 4 && !setPi0.CompareTo("Pi0EtaBinning") && energy.CompareTo("pPb_5.023TeV") == 0)
                                fNRebin[i]  = fBinsPi0EtapPb5TeVEMCPtRebin[i];
                            else if (modi == 4 && !setPi0.CompareTo("Pi0EtaBinning") && energy.CompareTo("pPb_5.023TeVRun2") == 0)
                                fNRebin[i]  = fBinsPi0EtapPb5TeVEMCR2PtRebin[i];
                            else if (modi == 5 && !setPi0.CompareTo("Eta"))
                                fNRebin[i]  = fBinsEtapPb5TeVPHOSPtRebin[i];
                            else if (modi == 5 && !setPi0.CompareTo("Pi0EtaBinning"))
                                fNRebin[i]  = fBinsPi0EtapPb5TeVPHOSPtRebin[i];
                            else
                                fNRebin[i]  = fBinsEtapPb5TeVPtRebin[i];
                        }
                    }
                }

                if (!setPi0.CompareTo("Pi0EtaBinning")){
                    optionBGSmoothingStandard   = "BackDecreasingWindow,BackSmoothing3";
                    optionBGSmoothingVar1       = "BackDecreasingWindow,BackSmoothing5";
                    optionBGSmoothingVar2       = "noSmoothing";
                    nIterBGFit                  = 11;
                } else {
                    optionBGSmoothingStandard   = "BackDecreasingWindow,BackSmoothing3";
                    optionBGSmoothingVar1       = "BackDecreasingWindow,BackSmoothing5";
                    optionBGSmoothingVar2       = "noSmoothing";
                    nIterBGFit                  = 11;
                }
                fMaxYFracBGOverIntHist          = 20;
            //*********************************************************************************************
            //********************************** Eta for pPb 8TeV**************************************
            //*********************************************************************************************
            } else if( energy.CompareTo("pPb_8TeV") == 0 || energy.CompareTo("pPb_8TeVRun2") == 0) {
                if (triggerSet == -1){
                    if (trigger.CompareTo("52") == 0){
                        specialTrigg = 1;    // L0
                    } else if ( trigger.CompareTo("85") == 0 ){
                        specialTrigg = 2; //L1 G2 (lower threshold)
                    } else if ( trigger.CompareTo("83") == 0    ){
                        specialTrigg = 3; //L1 G2 (lower threshold)
                    }
                } else {
                    specialTrigg        = triggerSet;
                }

                fStartPtBin         = GetStartBin("Eta", energy, modi, specialTrigg);
                if (fNBinsPt > 16 && isDCA) {
                    cout << "You have chosen to have more than 16 DCA bins, this is not possible, it will be reduced to 16" << endl;
                    fNBinsPt        = 16;
                } else if (fNBinsPt > 20 && modi < 2) {
                    cout << "You have chosen to have more than 20 bins, this is not possible, it will be reduced to 20" << endl;
                    fNBinsPt        = 20;
                } else if (fNBinsPt > 21 && ( modi == 2 || modi == 4) && specialTrigg == 0 ) {
                    cout << "You have chosen to have more than 21 bins, this is not possible, it will be reduced to 21" << endl;
                    fNBinsPt        = 21;
                } else if (fNBinsPt > 22 && specialTrigg == 0){
                    cout << "You have chosen to have more than 22 bins, this is not possible, it will be reduced to 22" << endl;
                    fNBinsPt        = 22;
                } else if (fNBinsPt > 26 ){
                    cout << "You have chosen to have more than 26 bins, this is not possible, it will be reduced to 26" << endl;
                    fNBinsPt        = 26;
                }
                GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);
                for (Int_t i = 0; i < fNBinsPt+1; i++) {
                    if (modi == 2 && specialTrigg == 1){
                        fBinsPt[i]      = fBinsEtapPb8TeVPtEMCTrig[i];
                        if (i < fNBinsPt+1){
                            fNRebin[i]  = fBinsEtapPb8TeVPCMEMCTrigEMC7PtRebin[i];
                        }
                    } else if (modi == 2 && specialTrigg == 2){
                        fBinsPt[i]      = fBinsEtapPb8TeVPtEMCTrig[i];
                        if (i < fNBinsPt+1){
                            fNRebin[i]  = fBinsEtapPb8TeVPCMEMCTrigEG2PtRebin[i];
                        }
                    } else if (modi == 2 && specialTrigg == 3){
                        fBinsPt[i]      = fBinsEtapPb8TeVPtEMCTrig[i];
                        if (i < fNBinsPt+1){
                            fNRebin[i]  = fBinsEtapPb8TeVPCMEMCTrigPtRebin[i];
                        }
                    } else {
                        // PCM binning
                        if ( modi == 0){
                          if (isDCA )
                              fBinsPt[i]      = fBinsEtapPb8TeVPtDCA[i];
                          else
                              fBinsPt[i]      = fBinsEtapPb8TeVPt[i];
                        // Dalitz binning
                        } else if (modi == 1){
                            fBinsPt[i]      = fBinsEtapPb8TeVDalitzPt[i];
                        // EMC and PCM-EMC binning
                        } else if (modi == 2 || modi == 4){
                            fBinsPt[i]      = fBinsEtapPb8TeVEMCPt[i];
                        } else if (modi == 3){
                            fBinsPt[i]      = fBinsEtapPb8TeVPCMPHOSPt[i];
                        } else if (modi == 5){
                            fBinsPt[i]      = fBinsEtapPb8TeVPHOSPt[i];
                        } else {
                            fBinsPt[i]      = fBinsEtapPb8TeVPt[i];
                        }
                        // Rebin factors
                        if (i < fNBinsPt+1){
                            if (modi == 0 && !setPi0.CompareTo("Eta"))
                                fNRebin[i]  = fBinsEtapPb8TeVPtRebin[i];
                            else if (modi == 0 && !setPi0.CompareTo("Pi0EtaBinning"))
                                fNRebin[i]  = fBinsPi0EtapPb8TeVPtRebin[i];
                            else if (modi == 1)
                                fNRebin[i]  = fBinsEtapPb8TeVDalitzPtRebin[i];
                            else if (modi == 2 && !setPi0.CompareTo("Eta"))
                                fNRebin[i]  = fBinsEtapPb8TeVPCMEMCPtRebin[i];
                            else if (modi == 2 && !setPi0.CompareTo("Pi0EtaBinning"))
                                fNRebin[i]  = fBinsPi0EtapPb8TeVPCMEMCPtRebin[i];
                            else if (modi == 3 && !setPi0.CompareTo("Eta"))
                                fNRebin[i]  = fBinsEtapPb8TeVPCMPHOSPtRebin[i];
                            else if (modi == 3 && !setPi0.CompareTo("Pi0EtaBinning"))
                                fNRebin[i]  = fBinsPi0EtapPb8TeVPCMPHOSPtRebin[i];
                            else if (modi == 4 && !setPi0.CompareTo("Eta"))
                                fNRebin[i]  = fBinsEtapPb8TeVEMCPtRebin[i];
                            else if (modi == 4 && !setPi0.CompareTo("Pi0EtaBinning"))
                                fNRebin[i]  = fBinsPi0EtapPb8TeVEMCPtRebin[i];
                            else if (modi == 5 && !setPi0.CompareTo("Eta"))
                                fNRebin[i]  = fBinsEtapPb8TeVPHOSPtRebin[i];
                            else if (modi == 5 && !setPi0.CompareTo("Pi0EtaBinning"))
                                fNRebin[i]  = fBinsPi0EtapPb8TeVPHOSPtRebin[i];
                            else
                                fNRebin[i]  = fBinsEtapPb8TeVPtRebin[i];
                        }
                    }
                }

                if (!setPi0.CompareTo("Pi0EtaBinning")){
                    optionBGSmoothingStandard   = "BackDecreasingWindow,BackSmoothing3";
                    optionBGSmoothingVar1       = "BackDecreasingWindow,BackSmoothing5";
                    optionBGSmoothingVar2       = "noSmoothing";
                    nIterBGFit                  = 11;
                } else {
                    optionBGSmoothingStandard   = "BackDecreasingWindow,BackSmoothing3";
                    optionBGSmoothingVar1       = "BackDecreasingWindow,BackSmoothing5";
                    optionBGSmoothingVar2       = "noSmoothing";
                    nIterBGFit                  = 11;
                }
                fMaxYFracBGOverIntHist          = 20;
            //*********************************************************************************************
            //********************************** Eta for PbPb 2.76TeV**************************************
            //*********************************************************************************************
            } else if( energy.CompareTo("PbPb_2.76TeV") == 0) {
                fStartPtBin         = 2;
                if (modi == 4){
                    fStartPtBin     = 5;
                } else if (modi == 2) {
                    fStartPtBin     = 3;
                }
                if (isDCA){
                    if (!setPi0.CompareTo("Pi0EtaBinning"))
                        fStartPtBin     = 1; //otherwise usually 3
                    else
                        fStartPtBin     = 4; //otherwise usually 3
                }
                if (isDCA) {
                    if (!setPi0.CompareTo("Pi0EtaBinning")) {
                        if (fNBinsPt > 10) {
                            cout << "You have chosen to have more than 10 bins, this is not possible, it will be reduced to 10" << endl;
                            fNBinsPt            = 10;
                        }
                    } else {
                        if (fNBinsPt > 16) {
                            cout << "You have chosen to have more than 16 bins, this is not possible, it will be reduced to 16" << endl;
                            fNBinsPt                    = 16;
                        }
                    }
                } else if (modi != 4 && modi != 2 &&    fNBinsPt > 12) {
                    cout << "You have chosen to have more than 12 bins, this is not possible, it will be reduced to 12" << endl;
                    fNBinsPt        = 12;
                }
                if ((modi == 4 || modi == 2) &&   fNBinsPt > 14) {
                    cout << "You have chosen to have more than 14 bins, this is not possible, it will be reduced to 14" << endl;
                    fNBinsPt        = 14;
                }
                GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);
                for (Int_t i = 0; i < fNBinsPt+1; i++) {
                    if (isDCA){
                        if (!setPi0.CompareTo("Pi0EtaBinning")) {
                            fBinsPt[i]          = fBinsEtaPbPb2760GeVPt[i];
                        } else {
                            fBinsPt[i]          = fBinsEtaPbPb2760GeVPtDCA[i];
                        }
                    } else {
                        if (modi == 0)
                            fBinsPt[i]          = fBinsEtaPbPb2760GeVPtLHC11hLessBins[i]; //fBinsEtaPbPb2760GeVPtLHC11h[i];
                        else if (modi == 2 || modi == 4)
                            fBinsPt[i]          = fBinsEtaPbPb2760GeVPtLHC11hEMCBins[i];
                        else
                            fBinsPt[i]          = fBinsEtaPbPb2760GeVPtLHC11hLessBins[i];
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsEtaPbPb2760GeVPtRebinLHC11hLessBins[i]; // fBinsEtaPbPb2760GeVPtRebinLHC11h[i]; //fBinsEtaPbPb2760GeVPtRebinLHC11hFinerBinning[i];
                    }
                }
                optionBGSmoothingStandard       = "BackDecreasingWindow,BackSmoothing5";
                optionBGSmoothingVar1           = "BackDecreasingWindow,BackSmoothing3";
                optionBGSmoothingVar2           = "BackDecreasingWindow,BackSmoothing7";
                fMaxYFracBGOverIntHist          = 8;
                if (!setPi0.CompareTo("Pi0EtaBinning")) {
                    optionBGSmoothingStandard       = "BackSmoothing9";
                    optionBGSmoothingVar1           = "BackSmoothing7";
                    optionBGSmoothingVar2           = "BackSmoothing11";
                    if (!centDCA.CompareTo("60-80%")){
                        nIterBGFit              = 15;
                    } else if (!centDCA.CompareTo("40-60%")){
                        nIterBGFit              = 17;
                    } else if (!centDCA.CompareTo("20-50%")){
                        nIterBGFit              = 19;
                    } else if (!centDCA.CompareTo("20-40%")){
                        nIterBGFit              = 19;
                    } else {
                        nIterBGFit              = 21;
                    }
                } else {
                    if (!centDCA.CompareTo("60-80%") || !centDCA.CompareTo("60-70%") || !centDCA.CompareTo("70-80%") || !centDCA.CompareTo("75-90%") ){
                        nIterBGFit                  = 15;
                        fMaxYFracBGOverIntHist      = 15;
                        optionBGSmoothingStandard   = "BackDecreasingWindow,BackSmoothing9";
                        optionBGSmoothingVar1       = "BackDecreasingWindow,BackSmoothing7";
                        optionBGSmoothingVar2       = "BackDecreasingWindow,BackSmoothing11";
                    } else if (!centDCA.CompareTo("50-60%")){
                        nIterBGFit                  = 14;
                        fMaxYFracBGOverIntHist      = 12;
                    } else if (!centDCA.CompareTo("40-60%") || !centDCA.CompareTo("40-50%") ){
                        nIterBGFit                  = 16;
                        fMaxYFracBGOverIntHist      = 10;
                    } else if (!centDCA.CompareTo("30-40%")){
                        nIterBGFit                  = 17;
                    } else if (!centDCA.CompareTo("20-50%")){
                        nIterBGFit                  = 16;
                    } else if (!centDCA.CompareTo("20-40%")){
                        nIterBGFit                  = 16;
                    } else if (!centDCA.CompareTo("20-30%")){
                        nIterBGFit                  = 18;
                    } else {
                        fMaxYFracBGOverIntHist      = 4;
                        nIterBGFit                  = 21;
                    }
                }

            //*********************************************************************************************
            //********************************** Eta for PbPb 5.02TeV**************************************
            //*********************************************************************************************
            } else if( energy.CompareTo("PbPb_5.02TeV") == 0) {
                fStartPtBin         = 1;
                if( modi == 2 ){
                  fStartPtBin = 5;
                } else if( modi == 4 ){
                  fStartPtBin = 4;
                }

                if (fNBinsPt > 22) {
                    cout << "You have chosen to have more than 22 bins, this is not possible, it will be reduced to 22" << endl;
                    fNBinsPt        = 22;
                }
                GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);
                for (Int_t i = 0; i < fNBinsPt+1; i++) {
                    if(modi == 2){
                        fBinsPt[i]         = fBinsEtaPbPb5TeVPCMEMCPt[i];
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsEtaPbPb5TeVPCMEMCPtRebin[i];
                    }else if(modi == 4){
                        fBinsPt[i]         = fBinsEtaPbPb5TeVEMCPt[i];
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsEtaPbPb5TeVEMCPtRebin[i];
                    }else{
                        fBinsPt[i]         = fBinsEtaPbPb5TeVPt[i];
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsEtaPbPb5TeVPtRebin[i];
                    }
                }

            //*********************************************************************************************
            //********************************** Eta for XeXe 5.44TeV**************************************
            //*********************************************************************************************
            } else if( energy.CompareTo("XeXe_5.44TeV") == 0) {
                fStartPtBin     = GetStartBin("Eta", energy, modi);
                if ( fNBinsPt > 9) {
                    cout << "You have chosen to have more than 9 bins, this is not possible, it will be reduced to 9" << endl;
                    fNBinsPt        = 9;
                }
                GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);
                for (Int_t i = 0; i < fNBinsPt+1; i++) {
                    fBinsPt[i]          = fBinsEtaXeXe5440GeVPt[i];
                    if (setPi0.CompareTo("Pi0EtaBinning")){
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsEtaXeXe5440GeVPtRebin[i];
                    } else {
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsPi0EtaBinningXeXe5440GeVPtRebin[i];
                    }
                }
                optionBGSmoothingStandard       = "BackDecreasingWindow,BackSmoothing5";
                optionBGSmoothingVar1           = "BackDecreasingWindow,BackSmoothing3";
                optionBGSmoothingVar2           = "BackDecreasingWindow,BackSmoothing7";
                fMaxYFracBGOverIntHist          = 8;
                if (setPi0.CompareTo("Pi0EtaBinning")) {
                    nIterBGFit                  = 15;
                    fMaxYFracBGOverIntHist      = 15;
                    optionBGSmoothingStandard   = "BackDecreasingWindow,BackSmoothing9";
                    optionBGSmoothingVar1       = "BackDecreasingWindow,BackSmoothing7";
                    optionBGSmoothingVar2       = "BackDecreasingWindow,BackSmoothing11";

                }
            }
        //*************************************************************************************************
        //********************************** Binning for Eta' *********************************************
        //*************************************************************************************************
        } else if (setPi0.CompareTo("EtaPrim") == 0){
            fNBinsPt                = numberOfBins;
            fBinsPt                 = new Double_t[20];
            fNRebin                 = new Int_t[19];
            //*********************************************************************************************
            //********************************** Eta' for pp 7TeV *****************************************
            //*********************************************************************************************
            if (energy.CompareTo("7TeV") == 0) {
                fStartPtBin         = 1;
                if (fNBinsPt > 7) {
                    cout << "You have chosen directphoton Plots and more than 7 bins for Eta, this is not possible, it will be reduced to 7 bins." << endl;
                    fNBinsPt        = 7;
                }
                GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);
                for (Int_t i = 0; i < fNBinsPt+2; i++) {
                    fBinsPt[i]      = fBinsEtaPrim7TeVPt[i];
                    if (i < fNBinsPt+1)
                        fNRebin[i]  = fBinsEtaPrim7TeVPtRebin[i];
                }
            }
        //*************************************************************************************************
        //********************************** Binning for Omega ********************************************
        //*************************************************************************************************
        } else if (setPi0.CompareTo("Omega") == 0) {
            fNBinsPt        = numberOfBins;
            fBinsPt         = new Double_t[20];
            fNRebin         = new Int_t[19];
            fStartPtBin     = 0;

            if (energy.CompareTo("7TeV") == 0) {
                if (fNBinsPt > 20) {
                    cout << "You have chosen to have more than 15 bins for Omega, this is not possible, it will be reduced to 12" << endl;
                    fNBinsPt = 19;
                }
                fStartPtBin     = GetStartBin("Omega","7TeV",modi);
                GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);

                if(modi == 40){
                    for (Int_t i = 0; i < fNBinsPt+2; i++) {
                        fBinsPt[i] = fBinsOmegaPiPlPiMiPiZero7TevPtPCM[i];
                        if (i < fNBinsPt+1)
                            fNRebin[i] = fBinsOmegaPiPlPiMiPiZero7TevPtRebinPCM[i];
                    }
                } else if(modi == 41){
                    for (Int_t i = 0; i < fNBinsPt+2; i++) {
                        fBinsPt[i] = fBinsOmegaPiPlPiMiPiZero7TevPtPCMEMC[i];
                        if (i < fNBinsPt+1)
                            fNRebin[i] = fBinsOmegaPiPlPiMiPiZero7TevPtRebinPCMEMC[i];
                    }
                } else if(modi == 42){
                    for (Int_t i = 0; i < fNBinsPt+2; i++) {
                        fBinsPt[i] = fBinsOmegaPiPlPiMiPiZero7TevPtPCMPHOS[i];
                        if (i < fNBinsPt+1)
                            fNRebin[i] = fBinsOmegaPiPlPiMiPiZero7TevPtRebinPCMPHOS[i];
                    }
                } else if(modi == 44){
                    for (Int_t i = 0; i < fNBinsPt+2; i++) {
                        fBinsPt[i] = fBinsOmegaPiPlPiMiPiZero7TevPtEMC[i];
                        if (i < fNBinsPt+1)
                            fNRebin[i] = fBinsOmegaPiPlPiMiPiZero7TevPtRebinEMC[i];
                    }
                } else if(modi == 45){
                    for (Int_t i = 0; i < fNBinsPt+2; i++) {
                        fBinsPt[i] = fBinsOmegaPiPlPiMiPiZero7TevPtPHOS[i];
                        if (i < fNBinsPt+1)
                            fNRebin[i] = fBinsOmegaPiPlPiMiPiZero7TevPtRebinPHOS[i];
                    }
                } else{
                    for (Int_t i = 0; i < fNBinsPt+2; i++) {
                        fBinsPt[i] = fBinsOmegaPiPlPiMiPiZero7TevPtPCM[i];
                        if (i < fNBinsPt+1)
                            fNRebin[i] = fBinsOmegaPiPlPiMiPiZero7TevPtRebinPCM[i];
                    }
                }
            } else if (energy.CompareTo("13TeV") == 0) {

                if (fNBinsPt > 20) {
                    cout << "You have chosen to have more than 15 bins for Omega, this is not possible, it will be reduced to 12" << endl;
                    fNBinsPt = 19;
                }
                fStartPtBin     = GetStartBin("Omega","13TeV",modi);
                GetOptimumNColumnsAndRows(fNBinsPt, fStartPtBin, fColumn, fRow);

                if(modi == 40){
                    for (Int_t i = 0; i < fNBinsPt+2; i++) {
                        fBinsPt[i] = fBinsOmegaPiPlPiMiPiZero13TevPtPCM[i];
                        if (i < fNBinsPt+1)
                            fNRebin[i] = fBinsOmegaPiPlPiMiPiZero13TevPtRebinPCM[i];
                    }
                } else{
                    for (Int_t i = 0; i < fNBinsPt+2; i++) {
                        fBinsPt[i] = fBinsOmegaPiPlPiMiPiZero13TevPtPCM[i];
                        if (i < fNBinsPt+1)
                            fNRebin[i] = fBinsOmegaPiPlPiMiPiZero13TevPtRebinPCM[i];
                    }
                }
            }
        }
    }

    //*************************************************************************************************
    //******************** GetBinning for general combination *****************************************
    //*************************************************************************************************
    Int_t GetBinning(   Double_t*  binning,
                        TString   meson   = "Pi0",
                        TString   energy  = "2.76TeV",
                        Int_t     mode    = 2
                        ){

        Int_t maxNBins = 0;
        if (meson.CompareTo("Pi0")==0){
            if (energy.CompareTo("900GeV") == 0){
                if ( mode == 0 ){
                    maxNBins = 11;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsPi0900GeVPt[i];
                    }
                }else if (mode == 2 || mode == 13){
                    maxNBins = 11;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsPi0900GeVPCMEMCPt[i];
                    }
                }else if (mode == 4 || mode == 12 ){
                maxNBins = 11;
                for(Int_t i = 0; i < maxNBins+1; i++){
                    binning[i] = fBinsPi0900GeVEMCPt[i];
                }
            }
            } else if (energy.CompareTo("2.76TeV") == 0){
                if ( mode == 2 || mode == 13 ){
                    maxNBins = 25;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsPi02760GeVPtTrigFullPCMEMC[i];
                    }
                } else if ( mode == 0 ){
                    maxNBins = 19;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsPi02760GeVPt[i];
                    }
                } else if ( mode == 4 || mode == 12 ){
                    maxNBins = 26;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsPi02760GeVPtTrig13g[i];
                    }
                } else if ( mode == 10){
                    maxNBins = 32;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                    binning[i] = fBinsPi02760GeVPtmEMC[i];

                    }
                } else if (mode == 20){
                    maxNBins = 33;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsPi02760GeVFullHaitaomEMC[i];
                    }
                }
            } else if (energy.CompareTo("5TeV") == 0 || energy.CompareTo("5TeV2017") == 0){
                if ( mode == 2 || mode == 20){
                    maxNBins = 34;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsPi05TeVPtPCMEMC[i];
                    }
                } else if ( mode == 4 || mode == 12 ){
                    maxNBins = 34;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsPi05TeVPtEMC[i];
                    }
                } else if ( mode == 0 ){
                    if(energy.Contains("2017")){
                        maxNBins = 43;
                        for(Int_t i = 0; i < maxNBins+1; i++){
                            binning[i] = fBinsPi05TeV2017Pt[i];
                        }
                    } else {
                        maxNBins = 24;
                        for(Int_t i = 0; i < maxNBins+1; i++){
                            binning[i] = fBinsPi05TeVPt[i];
                        }
                    }
                }
            } else if (energy.CompareTo("7TeV") == 0){
                if ( mode == 2 ){
                    maxNBins = 38;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsPi07TeVPCMEMCPt[i];
                    }
                } else if ( mode == 4 || mode == 12 ){
                    maxNBins = 38;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsPi07TeVEMCPt[i];
                    }
                } else if ( mode == 0 ){
                  maxNBins = 38;
                  for(Int_t i = 0; i < maxNBins+1; i++){
                    binning[i] = fBinsPi07TeVPt[i];
                  }
                }
            } else if (energy.CompareTo("8TeV") == 0){
                if ( mode == 2 ){
                    maxNBins = 46;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsPi0Comb8TeVPt[i];
                    }
                } else if ( mode == 4 || mode == 12 ){
                    maxNBins = 41;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsPi0Comb8TeVPt[i];
                    }
                } else if ( mode == 0 ){
                    maxNBins = 33;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsPi08TeVPt[i];
                    }
                } else if ( mode == 10 ){
                    maxNBins = 55;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsPi08TeVPtmEMC[i];
                    }
                } else if ( mode == 11 ){
                    maxNBins = 60;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsPi08TeVPtmEMCComb[i];
                    }
                }
            } else if (energy.CompareTo("pPb_5.023TeV") == 0 || energy.CompareTo("pPb_5.023TeVRun2") == 0){
                if (mode == 0 ){ // PCM
                    maxNBins = 31;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsPi0pPb5TeVPt[i];
                    }
                } else if (mode == 1){ // Dalitz
                    maxNBins = 22;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsPi0pPb5TeVDalitzPt[i];
                    }
                } else if ( mode == 2 || mode == 13 ) {
                    maxNBins = 32;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsPi0pPb5TeVEMCPt[i];
                    }
                } else if ( mode == 4 || mode == 12  ) {
                    maxNBins = 32;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsPi0pPb5TeVEMCPt[i];
                    }
                } else if ( mode == 3 || mode == 5 ) {
                    maxNBins = 32;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsPi0pPb5TeVEMCPt[i];
                    }
                } else if (mode == 20){ //combined
                    maxNBins = 32;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsPi0pPb5TeVEMCPt[i];
                    }
                }
            } else if (energy.CompareTo("PbPb_5.02TeV") == 0 ){
              if (mode == 0 ){ // PCM
                maxNBins = 15;
                for(Int_t i = 0; i < maxNBins+1; i++){
                  binning[i] = fBinsPi0PbPb5TeVPt[i];
                }
              } else if ( mode == 2 || mode == 13 ) {
                maxNBins = 24;
                for(Int_t i = 0; i < maxNBins+1; i++){
                  binning[i] = fBinsPi0PbPb5TeVPCMEMCPt[i];
                }
              } else if ( mode == 4 || mode == 12  ) {
                maxNBins = 24;
                for(Int_t i = 0; i < maxNBins+1; i++){
                  binning[i] = fBinsPi0PbPb5TeVEMCPt[i];
                }
              } else if (mode == 20){ //combined
                maxNBins = 15;
                for(Int_t i = 0; i < maxNBins+1; i++){
                  binning[i] = fBinsPi0PbPb5TeVPt[i];
                }
              }
            } else if (energy.CompareTo("pPb_8TeV") == 0 ){
                if (mode == 0 ){ // PCM
                    maxNBins = 31;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsPi0pPb8TeVPt[i];
                    }
                } else if (mode == 1){ // Dalitz
                    maxNBins = 22;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsPi0pPb8TeVDalitzPt[i];
                    }
                } else if ( mode == 2 || mode == 13 ) {
                    maxNBins = 32;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsPi0pPb8TeVEMCPt[i];
                    }
                } else if ( mode == 4 || mode == 12  ) {
                    maxNBins = 32;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsPi0pPb8TeVEMCPt[i];
                    }
                } else if ( mode == 3 || mode == 5 ) {
                    maxNBins = 32;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsPi0pPb8TeVEMCPt[i];
                    }
                } else if (mode == 20){ //combined
                    maxNBins = 32;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsPi0pPb8TeVEMCPt[i];
                    }
                }
            }
        } else if (meson.Contains("Eta")){
            if (energy.CompareTo("2.76TeV") == 0){
                maxNBins = 12;
                for(Int_t i = 0; i < maxNBins+1; i++){
                    binning[i] = fBinsEta2760GeVPtTrig11a[i];
                }
            } else if (energy.CompareTo("5TeV") == 0 || energy.CompareTo("5TeV2017") == 0){
                if ( mode == 2 || mode == 13 || mode == 12  ){
                    maxNBins = 22;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsEta5TeVPCMEMCPt[i];
                    }
                } else if ( mode == 4 ){
                    maxNBins = 22;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsEta5TeVEMCPt[i];
                    }
                } else if ( mode == 0 ){
                    if(energy.Contains("2017")){
                        maxNBins = 12;
                        for(Int_t i = 0; i < maxNBins+1; i++){
                            binning[i] = fBinsEta5TeV2017Pt[i];
                        }
                    } else {
                        maxNBins = 13;
                        for(Int_t i = 0; i < maxNBins+1; i++){
                            binning[i] = fBinsEta5TeVPt[i];
                        }
                    }
                } else if ( mode == 20 ){
                    maxNBins = 22;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsEta5TeVPCMEMCPt[i];
                    }
                }
            } else if (energy.CompareTo("7TeV") == 0){
                if ( mode == 2 || mode == 13 || mode == 4 || mode == 12  ){
                    maxNBins = 18;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsEta7TeVPCMEMCPt[i];
                    }
                } else if ( mode == 0 ){
                    maxNBins = 16;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsEta7TeVPt[i];
                    }
                } else if(mode == 40){
                    maxNBins = 12;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsEtaPiPlPiMiPiZero7TevPtPCM[i];
                    }
                } else if(mode == 41){
                    maxNBins = 10;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsEtaPiPlPiMiPiZero7TevPtPCMEMC[i];
                    }
                } else if(mode == 42){
                    maxNBins = 9;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsEtaPiPlPiMiPiZero7TevPtPCMPHOS[i];
                    }
                } else if(mode == 44){
                    maxNBins = 5;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsEtaPiPlPiMiPiZero7TevPtEMC[i];
                    }
                } else if(mode == 45){
                    maxNBins = 11;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsEtaPiPlPiMiPiZero7TevPtPHOS[i];
                    }
                }
            } else if (energy.CompareTo("8TeV") == 0){
                if ( mode == 2 || mode == 13 || mode == 4 || mode == 12  ){
                    maxNBins = 26;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsEtaComb8TeVPt[i];
                    }
                } else if ( mode == 0 ){
                    maxNBins = 19;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsEta8TeVPt[i];
                    }
                }
            } else if (energy.CompareTo("pPb_5.023TeV") == 0){
                if (mode == 0){
                    maxNBins = 16;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsEtapPb5TeVPt[i];
                    }
                } else if (mode == 2 || mode == 13 ){
                    maxNBins = 18;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsEtapPb5TeVEMCPt[i];
                    }
                } else if (mode == 3 ){
                    maxNBins = 14;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsEtapPb5TeVPCMPHOSPt[i];
                    }
                } else if (mode == 4 || mode == 12 ){
                    maxNBins = 19;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsEtapPb5TeVEMCPt[i];
                    }
                } else if (mode == 20 ){
                    maxNBins = 19;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsEtapPb5TeVEMCPt[i];
                    }
                }
            } else if (energy.CompareTo("pPb_8TeV") == 0){
                if (mode == 0){
                    maxNBins = 16;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsEtapPb8TeVPt[i];
                    }
                } else if (mode == 2 || mode == 13 ){
                    maxNBins = 18;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsEtapPb8TeVEMCPt[i];
                    }
                } else if (mode == 3 ){
                    maxNBins = 14;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsEtapPb8TeVPCMPHOSPt[i];
                    }
                } else if (mode == 4 || mode == 12 ){
                    maxNBins = 19;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsEtapPb8TeVEMCPt[i];
                    }
                } else if (mode == 20 ){
                    maxNBins = 19;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsEtapPb8TeVEMCPt[i];
                    }
                }
            }
        } else if (meson.Contains("Omega")){
            if (energy.CompareTo("7TeV") == 0){
               if(mode == 40){
                   maxNBins = 11;
                   for(Int_t i = 0; i < maxNBins+1; i++){
                       binning[i] = fBinsOmegaPiPlPiMiPiZero7TevPtPCM[i];
                   }
               } else if(mode == 41){
                   maxNBins = 10;
                   for(Int_t i = 0; i < maxNBins+1; i++){
                       binning[i] = fBinsOmegaPiPlPiMiPiZero7TevPtPCMEMC[i];
                   }
               } else if(mode == 42){
                   maxNBins = 9;
                   for(Int_t i = 0; i < maxNBins+1; i++){
                       binning[i] = fBinsOmegaPiPlPiMiPiZero7TevPtPCMPHOS[i];
                   }
               } else if(mode == 44){
                   maxNBins = 5;
                   for(Int_t i = 0; i < maxNBins+1; i++){
                       binning[i] = fBinsOmegaPiPlPiMiPiZero7TevPtEMC[i];
                   }
               } else if(mode == 45){
                   maxNBins = 11;
                   for(Int_t i = 0; i < maxNBins+1; i++){
                       binning[i] = fBinsOmegaPiPlPiMiPiZero7TevPtPHOS[i];
                   }
               }
            }
        } else if (meson.CompareTo("Gamma") == 0){
            if (energy.CompareTo("2.76TeV") == 0){
                if (mode == 0 || mode == 2){
                    maxNBins = 18;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i]  = fBinsDirGamma2760GeVPt[i];
                    }
                } else if (mode == 4){
                    maxNBins = 19;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsDirGamma2760GeVPt[i];
                    }
                } else if (mode == 20) {
                    maxNBins = 19;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsDirGamma2760GeVPt[i];
                    }
                }
            } else if (energy.CompareTo("8TeV") == 0){
                if (mode == 0){
                    maxNBins = 23;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i]  = fBinsDirGamma8TeVPt[i];
                    }
                }
            } else if (energy.CompareTo("pPb_5.023TeV") == 0 || energy.CompareTo("pPb_5.023TeVRun2") == 0 ){
                if (mode == 0){
                    maxNBins = 25;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i]  = fBinsDirGammapPb5TeVPt[i];
                    }
                } else if (mode == 2){
                    maxNBins = 28;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsDirGammapPb5TeVPCMEMCPt[i];
                    }
                } else if (mode == 4){
                    maxNBins = 25;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsDirGammapPb5TeVPt[i];
                    }
                } else if (mode == 20) {
                    maxNBins = 28;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsDirGammapPb5TeVPCMEMCPt[i];
                    }
                }
            } else if (energy.CompareTo("pPb_8TeV") == 0  ){
                if (mode == 0){
                    maxNBins = 25;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i]  = fBinsDirGammapPb8TeVPt[i];
                    }
                } else if (mode == 2){
                    maxNBins = 28;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsDirGammapPb8TeVPCMEMCPt[i];
                    }
                } else if (mode == 4){
                    maxNBins = 25;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsDirGammapPb8TeVPt[i];
                    }
                } else if (mode == 20) {
                    maxNBins = 28;
                    for(Int_t i = 0; i < maxNBins+1; i++){
                        binning[i] = fBinsDirGammapPb8TeVPCMEMCPt[i];
                    }
                }
            }
        } else if (meson.CompareTo("CKaon") == 0 || meson.CompareTo("CPion") == 0 ){
            maxNBins = 61;
            for(Int_t i = 0; i < maxNBins+1; i++){
                binning[i]  = fBinsInterAndExtrapolationFine[i];
            }
        } else if (meson.CompareTo("Lambda") == 0 || meson.CompareTo("Proton") == 0 || meson.CompareTo("Rho") == 0 || meson.CompareTo("K0Star") == 0 || meson.CompareTo("Phi") == 0){
            maxNBins = 48;
            if(meson.CompareTo("Phi") == 0)
                maxNBins = 36;
            for(Int_t i = 0; i < maxNBins+1; i++){
                binning[i]  = fBinsInterAndExtrapolation[i];
            }
        }
        return maxNBins;
    }

#endif
