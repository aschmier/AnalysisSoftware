// provided by Gamma Conversion Group, $ALICE_ROOT/PWG4/GammaConv ;https://twiki.cern.ch/twiki/bin/view/ALICE/PWG4GammaConversion

#include "ConversionFunctionsBasicsAndLabeling.h"

Int_t fStartPtBin                               = 0;
Int_t fColumn                                   = 0; 
Int_t fRow                                      = 0;    
Int_t fNBinsPt                                  = 0;    
Double_t *fBinsPt                               = NULL;
Int_t* fNRebin                                  = NULL;
Int_t fNBinsClusterPt                           = 0;
Double_t *fBinsClusterPt                        = NULL;
Int_t fNBinsPtDCAzDist                          = 0;
Double_t *fBinsPtDCAzDist                       = NULL;
Int_t fExampleBin                               = 0;
Double_t fExampleBinScaleFac                    = 1.0;
Int_t fNBinsPeakPt                              = 12;
Double_t fBinsPeakPt[13]                        = { 0.0, 0.4, 0.6, 0.8, 1.0,
                                                    1.2, 1.4, 1.6, 2.0, 3.0,
                                                    4.0, 5.0, 7.0};
Int_t fBinsPeakPtRebin[12]                      = { 4, 4, 2, 2, 2, 
                                                    2, 2, 2, 2, 4, 
                                                    4, 8};
Double_t fBinsPeakPtHalf[13]                    = { 0.0, 0.2, 0.3, 0.4, 0.5,
                                                    0.6, 0.7, 0.8, 1.0, 1.5,
                                                    2.0, 2.5, 3.5};
//******************** Pt binning for pp, 7 TeV ***************************************************
Double_t fBinsPi07TeVPt[43]                     = { 0.0, 0.3, 0.4, 0.5, 0.6,
                                                    0.7, 0.8, 0.9, 1.0, 1.1,
                                                    1.2, 1.3, 1.4, 1.5, 1.6,
                                                    1.8, 1.9, 2.0, 2.1, 2.2,
                                                    2.3, 2.4, 2.6, 2.8, 3.0,
                                                    3.2, 3.4, 3.6, 3.8, 4.0,
                                                    4.3, 4.6, 5.0, 5.5, 6.0,
                                                    6.5, 7.0, 8.0, 10.0, 12.0,
                                                    16.0, 20.0, 25.0};
Double_t fBinsPi07TeVPtDCA[28]                  = { 0.0, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9,
                                                    1.0, 1.1, 1.2, 1.3, 1.4, 1.6, 1.8, 2.0,
                                                    2.4, 2.8, 3.2, 3.6, 4.0,
                                                    5.0, 6.0, 8.0, 12.0, 16.0,
                                                    20.0, 25.0};
Int_t fBinsPi07TeVPtRebin[42]                   = { 3, 2, 1, 1, 1,
                                                    1, 1, 1, 1, 1,
                                                    1, 1, 1, 1, 1,
                                                    1, 1, 1, 1, 1,
                                                    1, 1, 1, 1, 1,
                                                    1, 1, 1, 1, 1,
                                                    2, 2, 3, 3, 4,
                                                    4, 4, 5, 5, 5,
                                                    5, 1};
Int_t fBinsPi07TeVConvEMCALPtRebin[42]          = { 2, 2, 2, 2, 2,
                                                    2, 8, 5, 4, 4,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 4,
                                                    4, 4, 4, 5, 8,
                                                    1, 1};
Int_t fBinsPi07TeVEMCALPtRebin[42]              = { 1, 1, 1, 1, 1,
                                                    1, 1, 1, 1, 1,
                                                    8, 4, 4, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 4, 8,
                                                    16, 1};
Double_t fBinsEta7TeVPt[18]                     = { 0.0, 0.4, 0.6, 0.8, 1.0, 1.4,
                                                    1.8, 2.2, 2.6, 3.0, 3.5, 4.0,
                                                    5.0, 6.0, 8.0, 10.0, 12.0, 16.0};
Double_t fBinsEta7TeVConvEMCALPt[19]            = { 0.0, 0.4, 0.6, 1.0, 1.4, 1.8,
                                                    2.2, 2.6, 3.0, 3.5, 4.0, 5.0,
                                                    6.0, 8.0, 10.0, 12.0, 16.0, 20, 25.0};
Int_t fBinsEta7TeVPtRebin[17]                   = { 8, 7, 7, 4, 4, 4,
                                                    4, 4, 5, 5, 5, 5,
                                                    5, 5, 6, 8, 8};
Int_t fBinsEta7TeVConvEMCALPtRebin[18]           = { 2, 2, 2, 16, 10, 8,
                                                     8, 8, 8, 8, 8, 10,
                                                     10, 16, 16, 16, 16, 20};
Int_t fBinsEta7TeVEMCALPtRebin[18]               = { 2, 2, 2, 2, 2, 16,
                                                     8, 8, 8, 8, 8, 10,
                                                     10, 16, 16, 16, 16, 20};

Double_t fBinsEtaPrim7TeVPt[8]                  = {0.0, 0.5, 1.0, 2.0, 3.0,
                                                    4.0, 6.0, 10.0}; 
Int_t fBinsEtaPrim7TeVPtRebin[7]                = { 8, 2, 2, 2, 2, 
                                                    2, 2};
Double_t fBinsPi07TeVDirectPhotonPt[24]         = { 0.0, 0.3, 0.6, 0.8,
                                                    1.0, 1.2, 1.4, 1.6,
                                                    1.8, 2.0, 2.2, 2.4,
                                                    2.8, 3.0, 3.5, 4.0,
                                                    4.5, 5.0, 6.0, 7.0,
                                                    9.0, 12., 16., 20.};
Int_t fBinsPi07TeVDirectPhotonPtRebin[23]       = { 3, 2, 1, 1, 1,
                                                    1, 1, 1, 1, 1,
                                                    2, 2, 2, 3, 3,
                                                    4, 4, 4, 5, 5,
                                                    5, 5, 5};

//******************** Pt binning for pp, 8 TeV ***************************************************
Double_t fBinsPi0Combine8TeVPt[47]              = { 0.0, 0.3, 0.4, 0.5, 0.6,
                                                    0.8, 1.0, 1.2, 1.4, 1.6,
                                                    1.8, 2.0, 2.2, 2.4, 2.6,
                                                    2.8, 3.0, 3.2, 3.4, 3.6,
                                                    3.8, 4.0, 4.5, 5.0, 5.5,
                                                    6.0, 6.5, 7.0, 7.5, 8.0,
                                                    8.5, 9.0, 10.0, 11.0, 12.0,
                                                    13.0, 14.0, 15.0, 16.0, 17.0,
                                                    18.0, 20.0, 22.0, 26.0, 30.0,
                                                    35.0, 40.0};

Double_t fBinsPi08TeVPt[34]                     = { 0.0, 0.3, 0.4, 0.5, 0.6, 
                                                    0.8, 1.0, 1.2, 1.4, 1.6, 
                                                    1.8, 2.0, 2.2, 2.4, 2.6,
                                                    2.8, 3.0, 3.2, 3.4, 3.6,
                                                    3.8, 4.0, 4.5, 5.0, 5.5,
                                                    6.0, 7.0, 8.0, 10.0, 12.0,
                                                    16.0, 20.0, 25.0, 30.0};

Double_t fBinsPi08TeVPtConvEMCAL[29]            = { 0.0, 0.6,
                                                    0.8, 1.0, 1.2, 1.4, 1.6,
                                                    1.8, 2.0, 2.2, 2.4, 2.6,
                                                    2.8, 3.0, 3.2, 3.4, 3.6,
                                                    3.8, 4.0, 4.5, 5.0, 5.5,
                                                    6.0, 7.0, 8.0, 10.0, 12.0,
                                                    16.0, 25.0};

Double_t fBinsPi08TeVTrigger1Pt[41]             = { 0.0, 0.3, 0.4, 0.5, 0.6,
                                                    0.8, 1.0, 1.2, 1.4, 1.6,
                                                    1.8, 2.0, 2.2, 2.4, 2.6,
                                                    2.8, 3.0, 3.2, 3.4, 3.6,
                                                    3.8, 4.0, 4.5, 5.0, 5.5,
                                                    6.0, 6.5, 7.0, 7.5, 8.0,
                                                    8.5, 9.0, 10.0, 11.0, 12.0,
                                                    14.0, 16.0, 20.0, 25.0, 30.0,
                                                    40.0};

Double_t fBinsPi08TeVConvEMCalTrigger1Pt[43]    = { 0.0, 0.3, 0.4, 0.5, 0.6,
                                                    0.8, 1.0, 1.2, 1.4, 1.6,
                                                    1.8, 2.0, 2.2, 2.4, 2.6,
                                                    2.8, 3.0, 3.2, 3.4, 3.6,
                                                    3.8, 4.0, 4.5, 5.0, 5.5,
                                                    6.0, 6.5, 7.0, 7.5, 8.0,
                                                    8.5, 9.0, 10.0, 11.0, 12.0,
                                                    13.0, 14.0, 15.0, 16.0, 18.0,
                                                    20.0, 22.0, 26.0};
Double_t fBinsPi08TeVEMCalTrigger1Pt[44]        = { 0.0, 0.3, 0.4, 0.5, 0.6,
                                                    0.8, 1.0, 1.2, 1.4, 1.6,
                                                    1.8, 2.0, 2.2, 2.4, 2.6,
                                                    2.8, 3.0, 3.2, 3.4, 3.6,
                                                    3.8, 4.0, 4.5, 5.0, 5.5,
                                                    6.0, 6.5, 7.0, 7.5, 8.0,
                                                    8.5, 9.0, 10.0, 11.0, 12.0,
                                                    13.0, 14.0, 15.0, 16.0, 18.0, 20.0, 25.0, 30.0,
                                                    40.0};

Double_t fBinsPi08TeVTrigger2Pt[43]             = { 0.0, 0.3, 0.4, 0.5, 0.6,
                                                    0.8, 1.0, 1.2, 1.4, 1.6,
                                                    1.8, 2.0, 2.2, 2.4, 2.6,
                                                    2.8, 3.0, 3.2, 3.4, 3.6,
                                                    3.8, 4.0, 4.5, 5.0, 6.0,
                                                    7.0, 8.0, 9.0, 10.0, 11.0,
                                                    12.0, 13.0, 14.0, 15.0, 16.0,
                                                    17.0, 18.0, 20.0, 22.0, 26.0,
                                                    30.0, 35.0, 40.0};

Double_t fBinsPi08TeVEMCalTrigger2Pt[43]        = { 0.0, 0.3, 0.4, 0.5, 0.6,
                                                    0.8, 1.0, 1.2, 1.4, 1.6,
                                                    1.8, 2.0, 2.2, 2.4, 2.6,
                                                    2.8, 3.0, 3.2, 3.4, 3.6,
                                                    3.8, 4.0, 4.5, 5.0, 5.5,
                                                    6.0, 7.0, 8.0, 10.0, 11.0,
                                                    12.0, 13.0, 14.0, 15.0, 16.0,
                                                    17.0, 18.0, 20.0, 22.0, 26.0,
                                                    30.0, 35.0, 40.0};
Double_t fBinsPi08TeVConvTrigger2Pt[43]             = { 0.0, 0.3, 0.4, 0.5, 0.6,
                                                    0.8, 1.0, 1.2, 1.4, 1.6,
                                                    1.8, 2.0, 2.2, 2.4, 2.6,
                                                    2.8, 3.0, 3.2, 3.4, 3.6,
                                                    3.8, 4.0, 4.5, 5.0, 5.5,
                                                    6.0, 7.0, 8.0, 10.0, 11.0,
                                                    12.0, 13.0, 14.0, 15.0, 16.0,
                                                    17.0, 18.0, 20.0, 26.0,
                                                    30.0, 35.0, 40.0};

Double_t fBinsPi08TeVPtEMCAL[33]                = { 0.0, 0.3, 0.4, 0.5, 0.6,
                                                    0.8, 1.0, 1.2, 1.4, 1.6,
                                                    1.8, 2.0, 2.2, 2.4, 2.6,
                                                    2.8, 3.0, 3.2, 3.4, 3.6,
                                                    3.8, 4.0, 4.5, 5.0, 5.5,
                                                    6.0, 7.0, 8.0, 10.0, 12.0,
                                                    16.0, 20.0, 25.0};

Double_t fBinsPi08TeVPtMerged[54]               = { 0.0, 0.4, 0.6, 0.8, 1.0,
                                                    1.2, 1.4, 1.6, 1.8, 2.0, 
                                                    2.2, 2.4, 2.6, 3.0, 3.5, 
                                                    4.0, 4.5, 5.0, 5.5, 6.0, 
                                                    6.5, 7.0, 7.5, 8.0, 8.5,
                                                    9.0, 9.5, 10.0, 11.0, 12.0, 
                                                    13.0, 14.0, 15.0, 16.0, 17.0, 
                                                    18.0, 19.0, 20.0, 22.0, 24.0, 
                                                    26.0, 28.0, 30.0, 32.0, 34.0, 
                                                    36.0, 38.0, 40.0, 45.0, 50.0, 
                                                    55.0, 60.0, 65.0, 70.0 };

Double_t fBinsPi08TeVPtMergedComb[59]           = { 0.0, 0.3, 0.4, 0.5, 0.6,
                                                    0.8, 1.0, 1.2, 1.4, 1.6,
                                                    1.8, 2.0, 2.2, 2.4, 2.6,
                                                    2.8, 3.0, 3.2, 3.4, 3.6,
                                                    3.8, 4.0, 4.5, 5.0, 5.5,
                                                    6.0, 6.5, 7.0, 7.5, 8.0,
                                                    8.5, 9.0, 10.0, 11.0, 12.0,
                                                    13.0, 14.0, 15.0, 16.0, 17.0,
                                                    18.0, 19.0, 20.0, 22.0, 24.0,
                                                    26.0, 28.0, 30.0, 32.0, 34.0,
                                                    36.0, 38.0, 40.0, 45.0, 50.0,
                                                    55.0, 60.0, 65.0, 70.0};

                                                    
Double_t fBinsPi08TeVPtDCA[23]                  = { 0.0, 0.3, 0.4, 0.6, 0.8,
                                                    1.0, 1.2, 1.4, 1.6, 2.0,
                                                    2.4, 2.8, 3.2, 3.6, 4.0,
                                                    5.0, 6.0, 8.0, 10.0, 12.0, 16.0,
                                                    20.0, 25.0};
Int_t fBinsPi08TeVPtRebin[33]                   = { 2, 4, 2, 1, 1, 
                                                    1, 1, 1, 1, 1, 
                                                    1, 1, 1, 1, 1,
                                                    1, 1, 1, 1, 1,
                                                    1, 1, 1, 2, 2, 
                                                    2, 2, 4, 4, 4,
                                                    5, 5, 5};
Int_t fBinsPi08TeVEMCALPtRebin[32]              = { 2, 2, 2, 2, 2,
                                                    2, 2, 4, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 4,
                                                    4, 4, 4, 4, 8,
                                                    2, 2};
Int_t fBinsPi08TeVConvTrigger1PtRebin[40]       = { 2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 4,
                                                    4, 4, 4, 6, 6,
                                                    6, 8, 2, 2, 2};
Int_t fBinsPi08TeVConvTrigger2PtRebin[42]       = { 2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 4, 4, 4,
                                                    4, 4, 6, 6, 6,
                                                    8, 8, 8, 8, 2,
                                                    2, 2};
Int_t fBinsPi08TeVEMCALTrigger1PtRebin[43]      = { 2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 4, 4, 5,
                                                    4, 4, 4, 4, 4,
                                                    5, 4, 4, 4, 4,
                                                    4, 5, 5,
                                                    8, 8, 2, 2, 2};
Int_t fBinsPi08TeVEMCALTrigger2PtRebin[42]      = { 2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 4, 5,
                                                    5, 4, 5, 10, 20,
                                                    16, 16, 2, 2, 2,
                                                    2, 2};
Int_t fBinsPi08TeVConvEMCALTrigger1PtRebin[42]  = { 2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 5, 5, 5, 5,
                                                    5, 8, 5, 8, 8,
                                                    8, 8, 8, 8, 10,
                                                    8, 10, 8, 8, 16,
                                                    8, 8};
Int_t fBinsPi08TeVConvEMCALTrigger2PtRebin[42]  = { 2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 16, 16, 16,
                                                    16, 10, 16, 20, 8,
                                                    10, 10, 8, 8, 10,
                                                    10, 2};
Int_t fBinsPi08TeVConvEMCALPtRebin[28]          = { 2, 2,
                                                    4, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 4, 4,
                                                    4, 4, 5, 8, 16,
                                                    2};
Int_t fBinsPi08TeVPtMergedRebin[53]             = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                                    1, 1, 2, 2, 2, 2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 4, 4, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 4, 4, 4, 4, 5, 5,
                                                    5, 5, 5};

Double_t fBinsEtaCombine8TeVPt[26]              = { 0.0, 0.4, 0.8, 1.2, 1.6,
                                                    2.0, 2.4, 2.8, 3.2, 3.6,
                                                    4.0, 5.0, 6.0, 7.0, 8.0,
                                                    9.0, 10.0, 12.0, 14.0, 16.0,
                                                    18.0, 20.0, 25.0, 30.0, 35.0,
                                                    40.0};
Double_t fBinsEta8TeVPt[20]                     = { 0.0, 0.4, 0.8, 1.2, 1.6,
                                                    2.0, 2.4, 2.8, 3.2, 3.6, 
                                                    4.0, 5.0, 6.0, 8., 10.,
                                                    12., 14., 16., 18., 20.};
Double_t fBinsEta8TeVConvEMCALPt[20]            = { 0.0, 0.4, 0.8, 1.2, 1.6,
                                                    2.0, 2.4, 2.8, 3.2, 3.6,
                                                    4.0, 5.0, 6.0, 8., 10.,
                                                    12., 14., 16., 18., 20.};
Double_t fBinsEta8TeVTrigger1Pt[24]             = { 0.0, 0.4, 0.8, 1.2, 1.6,
                                                    2.0, 2.4, 2.8, 3.2, 3.6,
                                                    4.0, 5.0, 6.0, 7.0, 8.0,
                                                    9.0, 10.0, 12.0, 14.0, 16.0,
                                                    20.0, 25.0, 30.0, 40.0};
Double_t fBinsEta8TeVTrigger2Pt[24]             = { 0.0, 0.4, 0.8, 1.2, 1.6,
                                                    2.0, 2.4, 2.8, 3.2, 3.6,
                                                    4.0, 5.0, 6.0, 8.0, 10.0,
                                                    12.0, 14.0, 16.0, 18.0, 20.0,
                                                    25.0, 30.0, 35.0, 40.};
Double_t fBinsEta8TeVConvTrigger1Pt[30]             = { 0.0, 0.4, 0.8, 1.2, 1.6,
                                                    2.0, 2.4, 2.8, 3.2, 3.6,
                                                    4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 8.0,
                                                    10.0, 12.0, 14.0, 16.0,
                                                    20.0, 25.0, 30.0, 40.0};
Double_t fBinsEta8TeVConvTrigger2Pt[24]             = { 0.0, 0.4, 0.8, 1.2, 1.6,
                                                    2.0, 2.4, 2.8, 3.2, 3.6,
                                                    4.0, 5.0, 6.0, 8.0, 10.0,
                                                    12.0, 14.0, 16.0, 18.0, 20.0,
                                                    25.0, 30.0, 35.0, 40.};
Int_t fBinsEta8TeVPtRebin[19]                   = { 5, 8, 4, 4, 4,
                                                    4, 4, 5, 5, 5,
                                                    5, 5, 7, 5, 5,
                                                    5, 5, 5, 5};
Int_t fBinsEta8TeVEMCALPtRebin[19]              = { 4, 4, 4, 16, 10,
                                                    16, 8, 8, 10, 8,
                                                    8, 8, 8, 16, 16,
                                                    16, 20, 4, 4};
Int_t fBinsEta8TeVConvEMCALPtRebin[19]          = { 20, 20, 20, 10, 8,
                                                    8, 8, 8, 8, 8,
                                                    8, 8, 8, 16, 20,
                                                    20, 20, 20, 20};
Int_t fBinsEta8TeVConvTrigger1PtRebin[30]       = { 5, 5, 5, 5, 5,
                                                    5, 5, 5, 5, 5,
                                                    5, 5, 5, 6, 6, 6, 6, 6,
                                                    8, 8, 8, 8, 10,
                                                    10, 16, 2};
Int_t fBinsEta8TeVConvTrigger2PtRebin[23]      = { 5, 5, 5, 5, 5,
                                                    5, 5, 5, 5, 5,
                                                    5, 5, 5, 8, 8,
                                                    8, 8, 8, 8, 8,
                                                    10, 20, 5};
Int_t fBinsEta8TeVEMCALTrigger1PtRebin[23]      = { 5, 5, 5, 5, 5,
                                                    5, 5, 5, 5, 5,
                                                    8, 8, 8, 8, 8,
                                                    8, 10, 10, 10, 10,
                                                    10, 20, 2};
Int_t fBinsEta8TeVEMCALTrigger2PtRebin[23]      = { 5, 5, 5, 5, 5,
                                                    5, 5, 5, 5, 5,
                                                    5, 5, 5, 16, 16,
                                                    10, 10, 10, 10, 10,
                                                    10, 20, 5};
Int_t fBinsEta8TeVConvEMCALTrigger1PtRebin[23]  = { 5, 5, 5, 5, 5,
                                                    5, 5, 5, 5, 5,
                                                    10, 10, 10, 16, 10,
                                                    16, 16, 16, 20, 16,
                                                    5, 5, 5};
Int_t fBinsEta8TeVConvEMCALTrigger2PtRebin[23]  = { 5, 5, 5, 5, 5,
                                                    5, 5, 5, 5, 5,
                                                    5, 5, 5, 5, 20,
                                                    25, 20, 20, 25, 16,
                                                    25, 25, 2};
Int_t fBinsPi0EtaBinning8TeVPtRebin[19]         = { 8, 1, 1, 1, 1, 
                                                    1, 1, 2, 2, 2, 
                                                    2, 4, 4, 4, 4,
                                                    4, 4, 4, 4};
Int_t fBinsPi0EtaBinning8TeVConvEMCALPtRebin[19] = {8, 2, 2, 2, 2,
                                                    2, 2, 4, 4, 4,
                                                    4, 4, 4, 8, 8,
                                                    8, 8, 8, 8};

Int_t fNBinsCluster8TeVPt           =  73;
Double_t fBinsCluster8TeVPt[74]     =  {0.0,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9,
                                        1.0,  1.1,  1.2,  1.3,  1.4,  1.5,  1.6,  1.7,  1.8,  1.9,
                                        2.0,  2.2,  2.4,  2.6,  2.8,  3.0,  3.2,  3.4,  3.6,  3.8,
                                        4.0,  4.2,  4.4,  4.6,  4.8,  5.0,  5.2,  5.4,  5.6,  5.8,
                                        6.0,  6.2,  6.4,  6.6,  6.8,  7.0,  7.4,  7.8,  8.2,  8.6,
                                        9.0,  9.5,  10,   10.5, 11,   11.5, 12.,  13.,  14.,  15.,
                                        16.,  17.,  18.,  19.,  20.,  22.,  24.,  26.,  28.,  30.,
                                        35,   40,   45,   50};
Int_t fNBinsCluster8TeVMergedPt       =  83;
Double_t fBinsCluster8TeVMergedPt[84] ={0.0,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9,
                                        1.0,  1.1,  1.2,  1.3,  1.4,  1.5,  1.6,  1.7,  1.8,  1.9,
                                        2.0,  2.2,  2.4,  2.6,  2.8,  3.0,  3.2,  3.4,  3.6,  3.8,
                                        4.0,  4.2,  4.4,  4.6,  4.8,  5.0,  5.2,  5.4,  5.6,  5.8,
                                        6.0,  6.2,  6.4,  6.6,  6.8,  7.0,  7.4,  7.8,  8.2,  8.6,
                                        9.0,  9.5,  10,   10.5, 11,   11.5, 12.,  13.,  14.,  15.,
                                        16.,  17.,  18.,  19.,  20.,  22.,  24.,  26.,  28.,  30.,
                                        35,   40,   45,   50,   55,   60,   65,   70,   75,   80,
                                        85,   90,   95,   100 };
//******************** Pt binning for pp, 0.9 TeV ***************************************************
Double_t fBinsPi0900GeVPt[12]                   = { 0.0, 0.4, 0.6, 0.8, 1.0,
                                                    1.2, 1.4, 1.6, 2.0, 2.5,
                                                    3.5, 4.5};
Int_t fBinsPi0900GeVPtRebin[11]                 = { 4, 2, 2, 2, 2, 
                                                    2, 2, 2, 2, 4, 
                                                    4};
Double_t fBinsEta900GeVPt[4]                    = { 0., 0.9, 1.8, 3.0};
Int_t fBinsEta900GeVPtRebin[3]                  = { 8, 5, 5};
Int_t fBinsPi0EtaBinning900GeVPtRebin[3]        = { 8, 4, 4};
Double_t fBinsPi0900GeVDirectPhotonPt[8]        = { 0.0, 0.6, 0.8, 1.0, 1.3, 
                                                    2.0, 3.0, 4.5};
Int_t fBinsPi0900GeVDirectPhotonPtRebin[7]      = { 4, 2, 2, 2, 2, 
                                                    2, 4};
                                                
//******************** Pt binning for pp, 13 TeV ***************************************************
Double_t fBinsPi013TeVPt[18]                    = { 0.0, 0.4, 0.6, 0.8, 1.0,
                                                    1.2, 1.4, 1.6, 1.8, 2.0,
                                                    2.2, 2.5, 2.8, 3.2,
                                                    3.8, 5., 7., 10.};                             //Pi0 single period binning
//Double_t fBinsPi013TeVPt[21]                  = { 0.0, 0.4, 0.6, 0.8, 1.0,
//                                                  1.2, 1.4, 1.6, 1.8, 2.0,
//                                                  2.2, 2.4, 2.6, 2.9, 3.3,
//                                                  3.9, 5.1, 6.5, 8.0, 11.0,
//                                                  16.0};                                  //Pi0 merged period binning (3 periods)
Int_t fBinsPi013TeVPtRebin[24]                  = { 4, 4, 2, 2, 2,                          // Rebinning Pi0
                                                    2, 2, 2, 2, 2, 
                                                    2, 2, 2, 2, 2, 
                                                    2, 4, 4, 4, 8,
                                                    8, 8, 8, 8};
Double_t fBinsPi013TeVPtDCA[9]                  = { 0.0, 0.4, 0.7, 1.0,              	    //Pi0 single period DCA binning
                                                    1.3, 1.7, 2.5, 4.0,
						    8.0};
//Double_t fBinsPi013TeVPtDCA[21]               = { 0.0, 0.4, 0.6, 0.8, 1.0,
//                                                  1.2, 1.4, 1.6, 1.8, 2.0,
//                                                  2.2, 2.4, 2.6, 2.9, 3.3,
//                                                  3.9, 5.1, 6.5, 8.0, 11.0,
//                                                  16.0};                                  //Pi0 merged period DCA binning (3 periods)

Double_t fBinsEta13TeVPt[8]                     = { 0., 0.4, 1.1, 1.6, 2.0, 3.0,            // Eta binning for LHC15f
						    4.0, 6.0};
//Double_t fBinsEta13TeVPt[14]                  = { 0.0, 0.4, 1.0, 1.5, 2.0,                // Eta binning for LHC15f+LHC15h+LHC15i
//                                                  2.5, 3.0, 3.5, 4.0, 5.0,
//                                                  6.0, 7.0, 9.0, 12.0};
Int_t fBinsEta13TeVPtRebin[13]                  = { 8, 8, 5, 5, 5,                          // Rebinning Eta
                                                    8, 8, 8, 8, 8,
                                                    10, 10, 10};
Double_t fBinsEta13TeVPtDCA[6]                  = { 0., 0.4, 1.1, 1.6,                      // Eta DCA binning for LHC15f
                                                    2.2, 4.0};
//Double_t fBinsEta13TeVPtDCA[9]                = { 0.0, 0.4, 1.0, 1.5, 2.0,                // Eta DCA binning forLHC15f+LHC15h+LHC15i
//                                                  3.0, 5.0, 7.0, 12.0};

Int_t fBinsPi0EtaBinning13TeVPtRebin[13]        = { 8, 2, 2, 2, 2,                          // rebinning Pi0EtaBinning
                                                    2, 2, 4, 4, 4,
                                                    4, 4, 4 };

Double_t fBinsPi013TeVDirectPhotonPt[25]        = { 0.0, 0.4, 0.6, 0.8, 1.0,
                                                    1.2, 1.4, 1.6, 1.8, 2.0,
                                                    2.2, 2.4, 2.6, 2.8, 3.0,
                                                    3.4, 3.8, 4.2, 4.8, 5.8,
                                                    7.0, 8.5, 10, 12.0, 16.0};

Int_t fBinsPi013TeVDirectPhotonPtRebin[29]      = { 4, 4, 4, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 4, 4, 4, 8,
                                                    8, 8, 8, 8};

Double_t fBinsPi013TeVDirectPhotonPtDCAzDist[16]= { 0.0, 0.4, 0.6, 0.8, 1.0,
                                                    1.2, 1.4, 1.6, 1.8, 2.0,
                                                    2.5, 4.0, 6.0, 9.0, 12.0,
                                                    16.0};
//******************** Pt binning for pp, 13 TeV low B ( 0.2T ) ***************************************************
Double_t fBinsPi013TeVLowBPt[18]                    = { 0.0, 0.1, 0.4, 0.6, 0.7,
							0.8, 1.0, 1.2, 1.4, 1.6,
							1.8, 2.0, 2.2, 2.5, 2.9,
                                                        3.5, 5.0, 10.0};
Int_t fBinsPi013TeVLowBPtRebin[17]                  = { 4, 4, 4, 4, 2,
							2, 2, 2, 2, 2,
							2, 2, 4, 4, 8,
							8, 8};
Double_t fBinsPi013TeVLowBPtDCA[10]                 = { 0.0, 0.1, 0.4, 0.7, 1.0,
						        1.3, 1.7, 2.5, 4.0, 8.0};

Double_t fBinsEta13TeVLowBPt[5]                     = { 0., 0.4, 2., 3., 6.};
Int_t fBinsEta13TeVLowBPtRebin[6]                   = { 15, 15, 10, 10, 10, 10};
Double_t fBinsEta13TeVLowBPtDCA[5]                  = { 0., 0.4, 2., 3., 6.};

Int_t fBinsPi0EtaBinning13TeVLowBPtRebin[6]         = { 4, 4, 2, 4, 4, 4};

Double_t fBinsPi013TeVLowBDirectPhotonPt[25]        = { 0.0, 0.4, 0.6, 0.8, 1.0,
							1.2, 1.4, 1.6, 1.8, 2.0,
							2.2, 2.4, 2.6, 2.8, 3.0,
							3.4, 3.8, 4.2, 4.8, 5.8,
							7.0, 8.5, 10, 12.0, 16.0};

Int_t fBinsPi013TeVLowBDirectPhotonPtRebin[29]      = { 4, 4, 4, 2, 2,
							2, 2, 2, 2, 2,
							2, 2, 2, 2, 2,
							2, 2, 2, 2, 2,
							2, 4, 4, 4, 8,
							8, 8, 8, 8};

Double_t fBinsPi013TeVLowBDirectPhotonPtDCAzDist[16] = { 0.0, 0.4, 0.6, 0.8, 1.0,
                                                         1.2, 1.4, 1.6, 1.8, 2.0,
                                                         2.5, 4.0, 6.0, 9.0, 12.0,
                                                         16.0};

//******************** Pt binning for pp, 2.76 TeV ***************************************************
Double_t fBinsPi02760GeVPt[25]                  = { 0.0, 0.4, 0.6, 0.8, 1.0,
                                                    1.2, 1.4, 1.6, 1.8, 2.0,
                                                    2.2, 2.4, 2.6, 3.0, 3.5,
                                                    4.0, 5.0, 6.0, 8.0, 10.0,
                                                    12.0, 15.0, 20., 25., 30.};

Double_t fBinsPi02760GeVPtTrig13g[30]           = { 0.0, 0.4, 0.6, 0.8, 1.0,
                                                    1.2, 1.4, 1.6, 1.8, 2.0, 
                                                    2.2, 2.4, 2.6, 3.0, 3.5, 
                                                    4.0, 5.0, 6.0, 7.0, 8.0,
                                                    9.0, 10.0, 11.0, 12.0, 14.0, 
                                                    16.0, 20., 24., 28., 30.};
Double_t fBinsPi02760GeVPtTrig13gConvEMCAL[29]  = { 0.0, 0.4, 0.6, 0.8, 1.0,
                                                    1.2, 1.4, 1.6, 1.8, 2.0, 
                                                    2.2, 2.4, 2.6, 3.0, 3.5, 
                                                    4.0, 5.0, 6.0, 7.0, 8.0,
                                                    9.0, 10.0, 12.0, 14.0, 16.0,
                                                    20., 24., 28., 30.};

Double_t fBinsPi02760GeVPtTrig11a[26]           = { 0.0, 0.4, 0.6, 0.8, 1.0,
                                                    1.2, 1.4, 1.6, 1.8, 2.0, 
                                                    2.2, 2.4, 2.6, 3.0, 3.5, 
                                                    4.0, 5.0, 6.0, 7.0, 8.0,
                                                    9.0, 10.0, 12.0, 16.0, 20.0,
                                                    25};
Double_t fBinsPi02760GeVPtTrigFullPCMEMC[25]    = { 0.0, 0.4, 0.6, 0.8, 1.0,
                                                    1.2, 1.4, 1.6, 1.8, 2.0, 
                                                    2.2, 2.4, 2.6, 3.0, 3.5, 
                                                    4.0, 5.0, 6.0, 7.0, 8.0,
                                                    9.0, 10.0, 12.0, 14.0, 16.0 };
Double_t fBinsPi02760GeVPtMerged[34]            = { 0.0, 0.4, 0.6, 0.8, 1.0,
                                                    1.2, 1.4, 1.6, 1.8, 2.0, 
                                                    2.2, 2.4, 2.6, 3.0, 3.5, 
                                                    4.0, 5.0, 6.0, 7.0, 8.0,
                                                    9.0, 10.0, 11.0, 12.0, 14.0, 
                                                    16.0, 18., 22., 26., 30.,
                                                    35.0, 40., 50., 60.};
                                                
Double_t fBinsPi02760GeVPtDCA[15]               = { 0.0, 0.4, 0.6, 0.8, 1.0, 
                                                    1.2, 1.4, 1.6, 2.0, 2.4, 
                                                    3.0, 4.0, 6.0, 8.0, 10.0};
Int_t fBinsPi02760GeVPtRebin[24]                = { 4, 4, 2, 2, 2, 
                                                    2, 2, 2, 2, 2, 
                                                    2, 2, 2, 2, 2, 
                                                    2, 4, 4, 4, 8,
                                                    8, 8, 8, 8};
Int_t fBinsPi02760GeVConvEMCALPtRebin[24]       = { 4, 4, 2, 2, 2, 
                                                    2, 2, 2, 2, 2, 
                                                    2, 2, 2, 2, 2, 
                                                    2, 2, 4, 4, 4,
                                                    4, 4, 4, 4};
Int_t fBinsPi02760GeVConvEMCALPtTrig13gRebin[28]= { 4, 4, 2, 2, 2, 
                                                    2, 2, 2, 2, 2, 
                                                    2, 2, 2, 2, 2, 
                                                    2, 2, 4, 4, 4,
                                                    4, 4, 4, 8, 8,
                                                    8, 8, 8};
Int_t fBinsPi02760GeVEMCALPtTrig13gRebin[29]    = { 4, 4, 2, 2, 2, 
                                                    2, 2, 2, 2, 2, 
                                                    2, 2, 2, 2, 2, 
                                                    2, 2, 4, 4, 4,
                                                    4, 4, 4, 4, 8,
                                                    12, 12, 12, 12};

Int_t fBinsPi02760GeVConvEMCALPtTrig11aRebin[25]= {4, 4, 2, 2, 2, 
                                                    2, 2, 2, 2, 2, 
                                                    2, 2, 2, 2, 2, 
                                                    2, 2, 4, 4, 5,
                                                    5, 5, 10, 10, 10};
Int_t fBinsPi02760GeVPtMergedRebin[32]          = { 4, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 4, 
                                                    4, 4, 4, 4, 4, 
                                                    4, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 4, 
                                                    4, 4, 4, 4, 4,
                                                    4, 4 };

Double_t fBinsPi02760GeVFullHaitoMerged[34]     =  {    0.0,    0.4,    0.6,    0.8,    1.0, 
                                                        1.2,    1.4,    1.6,    1.8,    2.0, 
                                                        2.2,    2.4,    2.6,    3.0,    3.5, 
                                                        4.0,    5.0,    6.0,    7.0,    8.0, 
                                                        9.0,    10.0,   11.0,   12.0,   13.0,
                                                        14.0,   16.0,   18.,    22.0,   26.0,
                                                        30.0,   35.0,   40.0,   50.0    };
                                                    
                                                    
                                                    
Double_t fBinsEta2760GeVPtAsPbPb[10]            = { 0., 0.5, 1.0, 1.5, 2.0, 
                                                    2.5, 4.0, 6.0, 8.0,
                                                    10.};                                                
Double_t fBinsEta2760GeVPt[14]                  = { 0., 0.5, 1.0, 1.5, 2.0,
                                                    3.0, 4.0, 6.0, 8.0, 10.0,
                                                    12.0, 14.0, 20.0, 30.0};
Double_t fBinsEta2760GeVPtTrig11a[14]           = { 0., 0.5, 1.0, 1.5, 2.0,
                                                    3.0, 4.0, 6.0, 8.0, 10.0,
                                                    12.0, 16.0, 20.0, 30.0};

Double_t fBinsEta2760GeVPtDCA[16]               = { 0., 0.4, 0.6, 0.8, 1.0,
                                                    1.125, 1.5, 1.75, 2.0, 2.5,
                                                    3.0, 4.0, 6.0, 10.0, 15.0, 
                                                    20.0 };
Int_t fBinsEta2760GeVPtRebinAsPbPb[9]           = { 8, 8, 5, 5, 5, 
                                                    5, 8, 10, 10};
Int_t fBinsEta2760GeVPtRebin[13]                = { 10, 10, 10, 10, 10,
                                                    10, 10, 16, 16, 16,
                                                    16, 16, 16};
Int_t fBinsEta2760GeVConvEMCALPtRebin[13]       = { 15, 15, 12, 12, 10, 
                                                    10, 10, 10, 10, 10,
                                                    10, 10, 10 };
Int_t fBinsEta2760GeVConvEMCALPtEG2Rebin[13]    = { 15, 15, 12, 12, 10, 
                                                    10, 10, 10, 12, 20,
                                                    15, 15, 15 };

Int_t fBinsEta2760GeVConvEMCALPtTrigINT7Rebin[13] = {8, 10, 10, 10, 10, 
                                                    10, 10, 12, 12, 12,
                                                    12, 12, 12 };

Int_t fBinsEta2760GeVConvEMCALPtTrig11aRebin[13] = {8, 8, 8, 8, 8, 
                                                    8, 8, 8, 10, 16,
                                                    16, 16, 16 };

Int_t fBinsPi0EtaBinning2760GeVPtRebin[13]      = { 8, 2, 2, 2, 2, 
                                                    2, 2, 4, 4, 4,
                                                    4, 4, 4 };
Int_t fBinsPi0EtaBinning2760GeVConvEMCALPtRebin[13] = {8, 2, 2, 2, 2, 
                                                    2, 2, 2, 2, 4,
                                                    4, 5, 5 };
Int_t fBinsPi0EtaBinning2760GeVConvEMCALPtTrig11aRebin[13] = {4, 2, 2, 2, 2, 
                                                    2, 2, 2, 2, 4,
                                                    4, 5, 5 };

Double_t fBinsPi02760GeVDirectPhotonPt[16]      = { 0.0, 0.3, 0.6, 0.8, 1.0, 
                                                    1.2, 1.5, 1.8, 2.3, 2.8, 
                                                    3.3, 3.9, 4.5, 5.5, 7.0, 
                                                    10.0};
Int_t fBinsPi02760GeVDirectPhotonPtRebin[15]    = { 4, 2, 2, 2, 2, 
                                                    2, 2, 2, 2, 2, 
                                                    2, 2, 4, 4, 4};
Int_t fNBinsCluster2760GeVPt        =  64;
Double_t fBinsCluster2760GeVPt[65]  =  {0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9,
                                        1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9,
                                        2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8,
                                        4.0, 4.2, 4.4, 4.6, 4.8, 5.0, 5.2, 5.4, 5.6, 5.8,
                                        6.0, 6.2, 6.4, 6.6, 6.8, 7.0, 7.4, 7.8, 8.2, 8.6,
                                        9.0, 9.5, 10,  11,  12,  14,  16,  18,  20,  25,
                                        30 , 35, 40, 45, 50 };

// ***************** Pt binning for PbPb, 2.76 TeV *************************************
Double_t fBinsPi0HIPt[25]                       = { 0.0, 0.4, 0.6, 0.8, 1.0,
                                                    1.2, 1.4, 1.6, 1.8, 2.0,
                                                    2.2, 2.4, 2.6, 3.0, 3.5,
                                                    4.0, 5.0, 6.0, 8.0, 10.0, 
                                                    12.0, 14.0,16.0, 20.,25.};
Double_t fBinsPi0HIPtLHC11h[24]                 = { 0.0, 0.4, 0.6, 0.8, 1.0, //same as the above but for the last bins, similar to the EMCal bins {4.0, 6.0, 8.0, 10.0, 12.0, 14.0, 20.0, 30.0}; 
                                                    1.2, 1.4, 1.6, 1.8, 2.0,
                                                    2.2, 2.4, 2.6, 3.0, 3.5,
                                                    4.0, 5.0, 6.0, 8.0, 10.0, 
                                                    12.0, 14.0, 20.,30.};
Double_t fBinsPi0HIPtNew[18]                    = { 0.0, 0.5, 0.8, 1.0, 1.2,
                                                    1.4, 1.6, 1.8, 2.0, 2.2, 
                                                    2.4, 2.6, 3.0, 4.0, 6.0, 
                                                    8.0, 10.0, 12.0};
Double_t fBinsPi0HIPeripheralPt[16]             = { 0.0, 0.5, 0.8, 1.0, 1.2,
                                                    1.4, 1.6, 1.8, 2.0, 2.5,
                                                    3.0, 4.0, 6.0, 8.0, 10.0,
                                                    12.0 };
Double_t fBinsPi0HIPtDCALHC11h[16]              = { 0.0, 0.4, 0.6, 0.8, 1.0,
                                                    1.2, 1.4, 1.6, 1.8, 2.0,
                                                    2.2, 2.4, 3.0, 4.0, 6.0,
                                                    12.};
Double_t fBinsPi0HIPtDCA[16]                    = { 0.0, 0.4, 0.6, 0.8, 1.0,
                                                    1.2, 1.4, 1.6, 1.8, 2.0,
                                                    2.25, 2.5,3.0, 4.0, 6.0,
                                                    12.};
Double_t fBinsPi0HIPtDCAPer[12]                 = { 0.0, 0.4, 0.6, 0.8, 1.0,
                                                    1.2, 1.4, 2.0, 2.5, 3., 
                                                    6., 10.};  
Double_t fBinsEtaHIPtDCA[14]                    = { 0.0, 0.4, 0.6, 0.8, 1.0,
                                                    1.2, 1.5, 2.0, 2.5, 3.0,
                                                    4.0, 6.0, 10., 12.};
Double_t fBinsEtaHIPtDCALHC11h[14]              = { 0.0, 0.4, 0.6, 0.8, 1.0,
                                                    1.2, 1.5, 2.0, 2.5, 3.0,
                                                    4.0, 6.0, 10., 12.};
Int_t fBinsPi0HIPtRebin[24]                     = { 10, 8, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 4, 4, 4, 4,
                                                    4, 8, 8, 8};
Int_t fBinsPi0HIPtLHC11hRebin[23]               = { 10, 4, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 4, 4, 4, 4,
                                                    4, 8, 8};
Int_t fBinsPi0HIPtRebinNew[17]                  = {10, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 5,
                                                    5, 8};
Int_t fBinsPi0HIPeripheralPtRebin[15]           = {10, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 4,
                                                    4, 4, 8, 8, 8};
Double_t fBinsEtaHIPt[5]                        = { 0.0, 1.5, 2.0, 4.0, 7.0};
Double_t fBinsEtaHIPtLHC11h[17]                 = { 0.0, 0.6, 1.0, 1.4, 1.8,
                                                    2.2, 2.6, 3.0 ,3.5, 4., 5.,
                                                    6.0, 8.0, 10, 12., 15.,
                                                    19.};
Double_t fBinsEtaHIPtLHC11hLessBins[13]         = { 0.0, 0.5, 1.0, 1.5, 2.0, 3.0, 
                                                    4., 6.0, 8.0, 10., 12., 
                                                    15., 19.};
Int_t fBinsEtaHIPtRebin[4]                      = { 10, 8, 5, 5};
Int_t fBinsEtaHIPtRebinLHC11h[16]               = { 10, 8, 8, 4, 4,
                                                    4, 5, 5, 8, 8, 8,
                                                    8, 10, 10, 10, 10};
Int_t fBinsEtaHIPtRebinLHC11hFinerBinning[15]   = { 10, 8, 5, 5, 5,
                                                    5, 5, 5, 5, 5,
                                                    8, 8, 8, 8, 8};
Int_t fBinsEtaHIPtRebinLHC11hLessBins[12]       = { 10, 8, 5, 5, 5,
                                                    5, 5, 8, 10, 10,
                                                    10, 10};

Int_t fBinsPi0EtaBinningHIPtRebin[4]            = { 10, 2, 2, 2};

Double_t fBinsPi0HIDirectPhotonPt[20]           = { 0.0, 0.4, 0.8, 1.0, 1.2, 
                                                    1.4, 1.6, 1.8, 2.0, 2.3, 
                                                    2.7, 3.1, 3.5, 4.0, 4.5,
                                                    5.5, 6.5, 8.0, 11.0, 14.0};
Int_t fBinsPi0HIDirectPhotonPtRebin[19]         = { 4, 4, 2, 2, 2, 
                                                    2, 2, 2, 2, 2, 
                                                    2, 2, 2, 2, 2, 
                                                    2, 4, 4, 4};
// ***************** Pt binning for PbPb, 5.02 TeV *************************************
Double_t fBinsPi0HI5020GeVPt[16]                 = { 0.0, 1.0, 1.4,
						     1.6, 1.8, 2.0, 2.2,
						     2.4, 2.6, 3.0, 3.5,
						     4.0, 5.0, 7.0, 9.0, 12.0};
Double_t fBinsPi0HI5020GeVEMCALPt[25]            = { 0.0, 0.4, 0.6, 0.8, 1.0,
                                                    1.2, 1.4, 1.6, 1.8, 2.0,
                                                    2.2, 2.4, 2.6, 3.0, 3.5,
                                                    4.0, 5.0, 6.0, 8.0, 10.0, 
                                                    12.0, 14.0,16.0, 20.,25.};
Int_t fBinsPi0HI5020GeVEMCALPtRebin[24]          = { 10, 8, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 4, 4, 4, 4,
                                                    4, 8, 8, 8};

Double_t fBinsPi0HI5020GeVPtDCA[14]               = { 0.0, 1.0, 1.4,
						      1.6, 1.8, 2.0, 2.2,
						      2.4, 2.6, 3.0, 3.5,
						      4.0, 5.0, 7.0};

Int_t fBinsPi0HI5020GeVPtRebin[15]                = { 10, 4, 2, 2,
						      2, 2, 2, 2, 2,
						      2, 4, 4, 4, 4, 4};

Double_t fBinsEtaHI5020GeVPt[4]                  = { 0.0, 1.0, 3.0, 6.0};

Double_t fBinsEtaHI5020GeVPtDCA[4]               = { 0.0, 1.0, 3.0, 6.0};

Int_t fBinsEtaHI5020GeVPtRebin[3]               = { 10, 8, 8};

Int_t fBinsPi0EtaBinningHI5020GeVPtRebin[3]     = { 10, 2, 2};

Double_t fBinsPi0HI5020GeVDirectPhotonPt[20]    = { 0.0, 0.4, 0.8, 1.0, 1.2,
                                                    1.4, 1.6, 1.8, 2.0, 2.3,
                                                    2.7, 3.1, 3.5, 4.0, 4.5,
                                                    5.5, 6.5, 8.0, 11.0, 14.0};
Int_t fBinsPi0HI5020GeVDirectPhotonPtRebin[19]  = { 4, 4, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 4, 4, 4};

// ***************** Pt binning for pPb, 5.023 TeV *************************************
Double_t fBinsPi0pPbPt[38]                      = { 0.0, 0.3, 0.4, 0.5, 0.6,
                                                    0.7, 0.8, 1.0, 1.2, 1.4,
                                                    1.6, 1.8, 2.0, 2.2, 2.4,
                                                    2.6, 2.8, 3.0, 3.2, 3.4,
                                                    3.6, 3.8, 4.0, 4.5, 5.0,
                                                    5.5, 6.0, 7.0, 8.0, 10.0,
                                                    12.0, 14.0, 16.0, 18.0, 20.0,
                                                    22.0, 26.0, 30.0};
Double_t fBinsPi0pPbPtEMCTrig[43]                = { 0.0, 0.3, 0.4, 0.5, 0.6,
                                                    0.7, 0.8, 1.0, 1.2, 1.4,
                                                    1.6, 1.8, 2.0, 2.2, 2.4,
                                                    2.6, 2.8, 3.0, 3.2, 3.4,
                                                    3.6, 3.8, 4.0, 4.5, 5.0,
                                                    5.5, 6.0, 7.0, 8.0, 9.0,
                                                    10.0, 11.0, 12.0, 13.0, 14.0,
                                                    15.0, 16.0, 17.0, 18.0, 20.0,
                                                    22.0, 26.0, 30.0};

Double_t fBinsPi0pPbEMCALPt[35]                  = {0.0, 0.3, 0.4, 0.5, 0.6,
                                                    0.7, 0.8, 1.0, 1.2, 1.4,
                                                    1.6, 1.8, 2.0, 2.2, 2.4,
                                                    2.6, 2.8, 3.0, 3.2, 3.4,
                                                    3.6, 3.8, 4.0, 4.5, 5.0,
                                                    5.5, 6.0, 7.0, 8.0, 10.0,
                                                    12.0, 16.0, 20.0, 24.0,
                                                    30.0};

Double_t fBinsPi0pPbPtDCA[13]                   = { 0.0, 0.4, 0.5, 0.6, 0.7,
                                                    0.8, 1.0, 1.4, 1.8, 2.4,
                                                    4.0, 6.0, 14.0};
Double_t fBinsPi0pPbPt_Cent[25]                 = { 0.0, 0.4, 0.5, 0.6, 0.7,
                                                    0.8, 1.0, 1.2, 1.4, 1.6,
                                                    1.8, 2.0, 2.2, 2.4, 2.6,
                                                    2.8, 3.0, 3.5, 4.0, 5.0,
                                                    6.0, 8.0, 10.0, 12.0, 14.0};
Int_t fBinsPi0pPbPtRebin[37]                    = { 10, 8, 4, 2, 2,
                                                    1, 1, 1, 1, 1,
                                                    1, 1, 1, 1, 1,
                                                    1, 1, 1, 1, 1,
                                                    1, 1, 1, 2, 2,
                                                    4, 5, 8, 8, 10,
                                                    10,10, 10, 10,10,
                                                    10,10};
Int_t fBinsPi0pPbConvEMCALPtRebin[34]           = { 10, 8, 8, 8, 8,
                                                    4, 2, 1, 1, 1,
                                                    1, 1, 1, 1, 1,
                                                    1, 1, 1, 1, 1,
                                                    1, 1, 1, 1, 2,
                                                    2, 4, 4, 5, 5, 
                                                    8, 8, 8, 10};
Int_t fBinsPi0pPbConvEMCALTrigPtRebin[42]       = { 10, 8, 8, 8, 8,
                                                    4, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 4,
                                                    8, 8, 8, 8, 8,
                                                    8, 10};
Int_t fBinsPi0pPbConvEMCALTrigEG1PtRebin[42]    = { 10, 8, 8, 8, 8,
                                                    4, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 8,
                                                    8, 10};

Int_t fBinsPi0pPbConvPHOSPtRebin[37]            = { 5, 4, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 4, 4,
                                                    4, 4, 4, 4, 4,
                                                    5, 5, 5, 5, 5,
                                                    5, 5, 5, 5, 5,
                                                    5, 10};

Int_t fBinsPi0pPbEMCALPtRebin[35]               = { 5, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 5,
                                                    10, 10, 10, 10,
                                                    10};
Int_t fBinsPi0pPbPHOSPtRebin[37]                = { 5, 4, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    5, 5, 5, 5, 5,
                                                    5, 5};

Int_t fBinsPi0pPbPtRebin_Cent[24]               = { 10, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 4, 
                                                    4, 4, 4, 4, 4, 
                                                    4, 4, 4, 4, 4, 
                                                    4, 5, 10, 10}; 

Double_t fBinsEtapPbPt[23]                      = { 0., 0.3, 0.5, 0.7, 0.9, 
                                                    1.1, 1.4, 1.8, 2.2, 2.6,
                                                    3.0, 3.5, 4.,  5.,  6.,
                                                    8.,  10,  12., 14., 16., 
                                                    20., 25., 30.};
Double_t fBinsEtaEMCALpPbPt[22]                 = { 0., 0.3, 0.5, 0.7, 0.9, 
                                                    1.1, 1.4, 1.8, 2.2, 2.6,
                                                    3.0, 3.5, 4.,  5.,  6.,
                                                    8.,  10,  12., 16., 
                                                    20., 25., 30.};
Double_t fBinsEtapPbPtEMCTrig[27]               = { 0., 0.3, 0.5, 0.7, 0.9, 
                                                    1.1, 1.4, 1.8, 2.2, 2.6,
                                                    3.0, 3.5, 4.,  5.,  6.,
                                                    7.,  8., 9., 10, 11.,
                                                    12., 13., 14., 18., 20.,
                                                    24., 30.};

Double_t fBinsEtapPbPt_Cent[15]                 = { 0.,  0.4,  0.6,  0.8,  1.0,
                                                    1.2, 1.4,  1.6,  2.0,  2.5,
                                                    3.0, 4.,   6.,   8.,   10};
                                        
Double_t fBinsEtapPbPtDCA[6]                    = { 0., 0.5, 1.0, 2.0, 4.,
                                                    8.};
Int_t fBinsEtapPbPtRebin[22]                    = { 10, 8,  8,  8,  5,
                                                    5,   5,  5,  4,  4,
                                                    4,   5,  8,  8,  8,
                                                    8,   10, 10, 10, 10,
                                                    10,  10};
Int_t fBinsEtapPbConvEMCALPtRebin[21]           = { 10, 10,  10,  10,  8,
                                                    8,   5,  5,  5,  5,
                                                    5,   5,  8,  8,  8,
                                                    12,  12, 20, 20, 20,
                                                    20};
Int_t fBinsEtapPbConvEMCALTrigPtRebin[26]       = { 10, 10,  10,  10,  8,
                                                    8,   8,  8,  8,  8,
                                                    8,   8,  8,  8,  8,
                                                    8,   8,  8,  8,  8,
                                                    8,   8,  8, 10, 12,
                                                    20};
Int_t fBinsEtapPbConvEMCALTrigEG2PtRebin[26]       = { 10, 10,  10,  10,  8,
                                                    8,   8,  8,  8,  8,
                                                    8,   8,  8,  8,  8,
                                                    10,   10,  10,  10,  10,
                                                    10,   10,  10, 12, 20,
                                                    20};

Int_t fBinsEtapPbConvEMCALTrigEMC7PtRebin[26]       = { 10, 10,  10,  10,  8,
                                                    8,   8,  8,  8,  8,
                                                    8,   8,  8,  8,  10,
                                                    10,   10,  10,  10,  10,
                                                    10,   10,  10, 10, 12,
                                                    20};

Int_t fBinsEtapPbConvPHOSPtRebin[22]            = { 10, 8,  8,  8,  8,
                                                    8,   8,  8,  8,  8,
                                                    8,   8,  8,  8,  8,
                                                    8,   10, 10, 10, 10,
                                                    10,  10};
Int_t fBinsEtapPbEMCALPtRebin[21] 		= {10, 8,  8,  8,  5,
                                                5,   5,  5,  4,  4,
                                                4,   5,  5,  5,  5,
                                                10,   12,  16,  16,  16,
                                                16};
Int_t fBinsEtapPbPHOSPtRebin[22]                = { 10, 8,  8,  8,  5,
                                                    5,   5,  5,  4,  4,
                                                    4,   5,  8,  8,  8,
                                                    8,   10, 10, 10, 10,
                                                    10,  10};
Int_t fBinsEtapPbPtRebin_Cent[14]               = { 10, 10, 8, 8, 8, 
                                                    5,  5,  4,  4, 4,
                                                    4,  5,  8,  
                                                    10};   
Int_t fBinsPi0EtaBinningpPbPtRebin[22]          = { 8, 2, 1, 1, 1,
                                                    1, 1, 1, 1, 1,
                                                    1, 1, 2, 2, 2,
                                                    4, 4, 4, 4, 4,
                                                    4, 4};
Int_t fBinsPi0EtaBinningpPbConvEMCALPtRebin[22] = { 8, 2, 1, 1, 1,
                                                    1, 1, 1, 1, 1,
                                                    1, 1, 2, 2, 2,
                                                    4, 4, 4, 4, 4,
                                                    4, 4};
Int_t fBinsPi0EtaBinningpPbConvPHOSPtRebin[22]  = { 8, 2, 1, 1, 1,
                                                    1, 1, 1, 1, 1,
                                                    1, 1, 2, 2, 2,
                                                    4, 4, 4, 4, 4,
                                                    4, 4};
Int_t fBinsPi0EtaBinningpPbEMCALPtRebin[22]     = { 8, 2, 1, 1, 1,
                                                    1, 1, 1, 1, 1,
                                                    1, 1, 1, 1, 1,
                                                    1, 1, 1, 2, 2, 
                                                    2, 2};
Int_t fBinsPi0EtaBinningpPbPHOSPtRebin[22]      = { 8, 2, 1, 1, 1,
                                                    1, 1, 1, 1, 1,
                                                    1, 1, 1, 1, 1,
                                                    2, 2, 2, 4, 4,
                                                    4, 4};

Double_t fBinsEtapPbPt3Body[15]                 = { 0., 0.4, 0.6, 0.8, 1.0,
                                                    1.2, 1.4, 1.6, 2.0, 2.5,
                                                    3.0, 4.0, 6.0, 8.0, 10};
Int_t fBinsEtapPbPt3BodyRebin[14]               = { 5, 5, 5, 5, 5, 
                                                    5, 5, 5, 5, 5,
                                                    5, 5, 5, 5};
Double_t fBinsPi0pPbDirectPhotonPt[20]          = { 0.0, 0.4, 0.8, 1.0, 1.2, 
                                                    1.4, 1.6, 1.8, 2.0, 2.3, 
                                                    2.7, 3.1, 3.5, 4.0, 4.5,
                                                    5.5, 6.5, 8.0, 11.0, 14.0};
Int_t fBinsPi0pPbDirectPhotonPtRebin[19]        = { 4, 4, 2, 2, 2, 
                                                    2, 2, 2, 2, 2, 
                                                    2, 2, 2, 2, 2, 
                                                    2, 4, 4, 4};

                                                    
                                                    
//*************************************************************************************************
//******************** Initialize Single bin for invariant mass plot ******************************
//*************************************************************************************************                                                    
Int_t ReturnSingleInvariantMassBinPlotting (TString meson, TString energy, Int_t mode, Int_t trigger, Double_t &scaleFac, Int_t triggerSet = -1){

    if (triggerSet != -1){
        if (energy.CompareTo("2.76TeV") == 0){
            if (triggerSet == 1)
                trigger     = 52;
            if (triggerSet == 2)    
                trigger     = 85;
            if (triggerSet == 3)
                trigger     = 83;
            if (triggerSet == 4)
                trigger     = 51;
            if (triggerSet == 5)    
                trigger     = 01;
        } else if (energy.CompareTo("8TeV") == 0){
            if (triggerSet == 1)
                trigger     = 52;
            if (triggerSet == 2)
                trigger     = 81;
            if (triggerSet == 3)
                trigger     = 53;
            if (triggerSet == 4)
                trigger     = 82;
        }    
    }         

    if (meson.CompareTo("Pi0") == 0){
        if (energy.CompareTo("900GeV") == 0) {
            return 5;
        } else if (energy.CompareTo("2.76TeV") == 0) {
            if (mode == 0){             // PCM-PCM
                return 7;
            } else if (mode == 2) {     // PCM-EMC
                switch (trigger){
                    case 0:             // INT1 13g
                    case 1:             // INT1 13g
                        return 7;
                        break;
                    case 3:             // INT1 11a
                        return 5;
                        break;
                    case 10:            // INT7 13g
                    case 11:            // INT8 13g
                        return 7;
                        break;
                    case 51:            // EMC1
                        return 21;
                        break;
                    case 52:            // EMC7
                        return 14;
                        break;
                    case 85:            // EG2
                        return 16;
                        break;
                    case 83:            // EG1
                        return 21;
                        break;
                    default:
                        return 7;
                        break;
                }    
            } else if ( mode == 4 ){    // EMC-EMC
                switch (trigger){
                    case 0:             // INT1 13g
                    case 1:             // INT1 13g
                    case 3:             // INT1 11a
                    case 10:            // INT7 13g
                    case 11:            // INT8 13g
                        return 9;
                        break;
                    case 51:            // EMC1
                        return 23;
                        break;
                    case 52:            // EMC7
                        return 15;
                        break;
                    case 85:            // EG2
                        return 18;
                        break;
                    case 83:            // EG1
                        return 24;
                        break;
                    default:
                        return 7;
                        break;
                }    
            } else if ( mode == 10 ){ 
                switch (trigger){
                    case 0:             // INT1 13g
                    case 1:             // INT1 13g
                    case 3:             // INT1 11a
                    case 10:            // INT7 13g
                    case 11:            // INT8 13g
                        return 22;
                        break;
                    case 51:            // EMC1
                        return 26;
                        break;
                    case 52:            // EMC7
                        return 22;
                        break;
                    case 85:            // EG2
                        return 26;
                        break;
                    case 83:            // EG1
                        return 26;
                        break;
                    default:
                        return 20;
                        break;
                }
                
            } else {
                return 7;
            }               
        } else if (energy.CompareTo("5TeV") == 0) {    
            return 10;
        } else if (energy.CompareTo("7TeV") == 0) {
            return 16;
        } else if (energy.CompareTo("8TeV") == 0) {    
            if (mode == 0){             // PCM- PCM
                switch (trigger){
                    case 0:
                    case 1:
                    case 10:
                    case 11:
                        return 3;       // INT triggers
                        break;
                    case 52:
                        return 33;
                    case 53:
                        return 33;      // EMC triggers
                        break;
                    case 81:
                    case 82:    
                        return 40;      // EGA triggers
                        break;
                    default:
                        return 3;
                        break;
                }   
            } else if (mode == 2){      // PCM-EMC
                switch (trigger){
                    case 0:
                    case 1:
                    case 10:
                    case 11:
                        return 3;       // INT triggers
                        break;
                    case 52:
                    case 53:
                        return 31;      // EMC triggers
                        break;
                    case 81:
                    case 82:
                        return 40;      // EGA triggers
                        break;
                    default:
                        return 3;
                        break;
                }     
            } else if (mode == 4){      // EMC-EMC
                switch (trigger){
                    case 0:
                    case 1:
                    case 10:
                    case 11:
                        return 8;      // INT triggers
                        break;
                    case 52:
                    case 53:
                        return 31;      // EMC triggers
                        break;
                    case 81:
                    case 82:
                        return 35;      // EGA triggers
                        break;
                    default:
                        return 13;
                        break;
                }   
            } else if (mode == 10){      // EMC-EMC
                switch (trigger){
                    case 0:
                    case 1:
                    case 10:
                    case 11:
                        return 38;      // INT triggers
                        break;
                    case 52:
                    case 53:
                        return 45;      // EMC triggers
                        break;
                    case 81:
                    case 82:
                        return 50;      // EGA triggers
                        break;
                    default:
                        return 38;
                        break;
                }   
            } else {                    // other modes
                return 3;
            }
        } else if (energy.CompareTo("13TeV") == 0) {
            return 2;
        } else if (energy.CompareTo("13TeVLowB") == 0) {
            return 2;
        } else if( energy.CompareTo("pPb_5.023TeV") == 0) { 
            if (mode == 0){
                return 7;
            } else if (mode == 2){
                switch (trigger){
                    case 0:
                    case 1:
                    case 10:
                    case 11:
                        return 7;      // INT triggers
                        break;
                    case 51:
                    case 52:
                    case 53:
                        return 20;      // EMC triggers
                        break;
                    case 85:
                        return 26;
                        break;
                    case 81:
                    case 82:
                    case 83:
                        return 32;      // EGA triggers
                        break;
                    default:
                        return 7;
                        break;
                }
            } else if (mode == 4){    
                return 25; 
            } else if (mode == 5){        
                return 25;
            } else {
                return 7;
            }
        } else if( energy.CompareTo("PbPb_2.76TeV") == 0) {     
            return 4;
        } else if( energy.CompareTo("PbPb_5.02TeV") == 0) {
            if (mode == 4){
              return 10;
            }else{
              return 5;
            }
	}
    } else if (meson.Contains("Eta")) {
        if (energy.CompareTo("900GeV") == 0) {
            return 2;
        } else if (energy.CompareTo("2.76TeV") == 0) {
            if (mode == 0){             // PCM-PCM
                return 4;
            } else if (mode == 2) {     // PCM-EMC
                switch (trigger){
                    case 0:             // INT1 13g
                    case 1:             // INT1 13g
                    case 10:            // INT7 13g
                    case 11:            // INT8 13g
                        return 4;
                        break;
                    case 3:             // INT1 11a
                        return 4;
                        break;
                    case 51:            // EMC1
                        return 8;
                        break;
                    case 52:            // EMC7
                        return 5;
                        break;
                    case 85:            // EG2
                        return 7;
                        break;
                    case 83:            // EG1
                        return 9;
                        break;
                    default:
                        return 7;
                        break;
                }    
            } else if ( mode == 4 ){    // EMC-EMC
                switch (trigger){
                    case 3:             // INT1 11a
                        return 6;
                        break;
                    case 0:             // INT1 13g
                    case 1:             // INT1 13g
                    case 10:            // INT7 13g
                    case 11:            // INT8 13g
                        return 7;
                        break;
                    case 52:            // EMC7
                        return 5;
                        break;
                    case 51:            // EMC1
                        return 8;
                        break;
                    case 85:            // EG2
                        return 7;
                        break;
                    case 83:            // EG1
                        return 10;
                        break;
                    default:
                        return 4;
                        break;
                }    
            } else {
                return 4;
            }               
        } else if (energy.CompareTo("5TeV") == 0) {    
            return 5;
        } else if (energy.CompareTo("7TeV") == 0) {
            return 6;
        } else if (energy.CompareTo("8TeV") == 0) {   
            if (mode == 0){             // PCM- PCM
                switch (trigger){
                    case 0:
                    case 1:
                    case 10:
                    case 11:
                        return 6;       // INT triggers
                        break;
                    case 52:
                        return 14;
                    case 53:
                        return 11;      // EMC triggers
                        break;
                    case 81:
                    case 82:    
                        return 13;      // EGA triggers
                        break;
                    default:
                        return 6;
                        break;
                }   
            } else if (mode == 2){      // PCM-EMC
                switch (trigger){
                    case 0:
                    case 1:
                    case 10:
                    case 11:
                        return 7;       // INT triggers
                        break;
                    case 52:
                    case 53:
                        return 14;      // EMC triggers
                        break;
                    case 81:
                    case 82:
                        return 20;      // EGA triggers
                        break;
                    default:
                        return 6;
                        break;
                }   
                
            } else if (mode == 4){      // EMC-EMC
                switch (trigger){
                    case 0:
                    case 1:
                    case 10:
                    case 11:
                        return 7;      // INT triggers
                        break;
                    case 52:
                    case 53:
                        return 14;      // EMC triggers
                        break;
                    case 81:
                    case 82:
                        if(meson.CompareTo("Pi0EtaBinning") == 0) return 18;
                        return 20;      // EGA triggers
                        break;
                    default:
                        return 9;
                        break;
                }   
            } else {                    // other modes
                return 6;
            }
        } else if (energy.CompareTo("13TeV") == 0) {
            return 2;
        } else if (energy.CompareTo("13TeVLowB") == 0) {
            return 2;
        } else if( energy.CompareTo("pPb_5.023TeV") == 0) { 
            if (mode == 0){
                return 6;
            } else if (mode == 2){
                switch (trigger){
                    case 0:
                    case 1:
                    case 10:
                    case 11:
                        if (meson.CompareTo("Eta") == 0) scaleFac = 4.0;
                        return 7;      // INT triggers
                        break;
                    case 51:
                    case 52:
                    case 53:
                        return 12;      // EMC triggers
                        break;
                    case 85:
                        return 17;
                        break;
                    case 81:
                    case 82:
                    case 83:
                        return 20;      // EGA triggers
                        break;
                    default:
                        return 6;
                        break;
                }
            } else if (mode == 3){
                return 11;
            } else if (mode == 4){    
                return 10; 
            } else if (mode == 5){        
                return 10;
            } else {
                return 6;
            }
        } else if( energy.CompareTo("PbPb_2.76TeV") == 0) {     
            return 4;
        } else if( energy.CompareTo("PbPb_5.02TeV") == 0) {
	    return 1;
        }
    } else if (meson.CompareTo("EtaPrim") == 0){
        return 3;
   
    } else {
        cout << "single bin for meson not defined" << endl;
        return 1;
    }    
    cout << "meson not defined" << endl;
    return 0;    
}    
                                                    
//*************************************************************************************************
//******************** Initialize binning for analysis stream  ************************************
//*************************************************************************************************
void InitializeBinning(TString setPi0, Int_t numberOfBins, TString energy, TString directPhoton, Int_t modi, TString eventCutSelection, TString clusterCutSelection, Int_t triggerSet = -1){
    //*************************************************************************************************
    //************************************ Binning for Cluster ****************************************
    //*************************************************************************************************

    fBinsClusterPt          = new Double_t[100];
    if( energy.CompareTo("2.76TeV") == 0 || energy.CompareTo("PbPb_2.76TeV") == 0 || energy.CompareTo("PbPb_5.02TeV") == 0 || energy.CompareTo("pPb_5.023TeV") == 0){
      fNBinsClusterPt       = fNBinsCluster2760GeVPt;
      for(Int_t iPt=0;iPt<=fNBinsClusterPt;iPt++){
        fBinsClusterPt[iPt] = fBinsCluster2760GeVPt[iPt];
      }
    } else if( energy.CompareTo("7TeV") == 0){
      fNBinsClusterPt       = fNBinsCluster8TeVPt;
      for(Int_t iPt=0;iPt<=fNBinsClusterPt;iPt++){
        fBinsClusterPt[iPt] = fBinsCluster8TeVPt[iPt];
      }
    } else if( energy.CompareTo("8TeV") == 0){
      if(modi == 10){
        fNBinsClusterPt       = fNBinsCluster8TeVMergedPt;
        for(Int_t iPt=0;iPt<=fNBinsClusterPt;iPt++){
          fBinsClusterPt[iPt] = fBinsCluster8TeVMergedPt[iPt];
        }
      }else{
        fNBinsClusterPt       = fNBinsCluster8TeVPt;
        for(Int_t iPt=0;iPt<=fNBinsClusterPt;iPt++){
          fBinsClusterPt[iPt] = fBinsCluster8TeVPt[iPt];
        }
      }
    } else {
      fNBinsClusterPt       = 0;
      fBinsClusterPt        = NULL;
    }

    // set trigger string
    TString trigger         = eventCutSelection(GetEventSelectSpecialTriggerCutPosition(),2);
    Int_t specialTrigg      = 0;
    
    // Initialize bin for single invariant mass plot
    fExampleBin             = ReturnSingleInvariantMassBinPlotting (setPi0, energy, modi, trigger.Atoi(), fExampleBinScaleFac, triggerSet);
    
    //*************************************************************************************************
    //************************************ Binning for Pi0 ********************************************
    //*************************************************************************************************
    if (setPi0.CompareTo("Pi0") == 0){
        fNBinsPt                = numberOfBins;
        fBinsPt                 = new Double_t[70];
        fNRebin                 = new Int_t[69];
        //*********************************************************************************************
        //********************************** Pi0 for pp 0.9TeV*****************************************
        //*********************************************************************************************
        if (energy.CompareTo("900GeV") == 0) {
            if (directPhoton.CompareTo("directPhoton") == 0){
                fStartPtBin     = 1;
                fColumn         = 5;
                fRow            = 5;
                
                if (fNBinsPt > 21) {
                    cout << "You have chosen Direct Photon Plots and more than 21 bins, this is not possible, it will be reduced to 21 bins." << endl;
                    fNBinsPt    = 21;
                }
                for (Int_t i = 0; i < fNBinsPt+1; i++) {
                    fBinsPt[i]  = fBinsPi0900GeVDirectPhotonPt[i];
                    if (i < fNBinsPt+1) 
                        fNRebin[i] = fBinsPi0900GeVDirectPhotonPtRebin[i];
                }
            } else {
                fStartPtBin     = 1;
                fColumn         = 4;
                fRow            = 3;

                if (fNBinsPt > 11) {
                    cout << "You have chosen to have more than 11 bins, this is not possible, it will be reduced to 11" << endl;
                    fNBinsPt    = 11;
                }
                for (Int_t i = 0; i < fNBinsPt+1; i++) {
                    fBinsPt[i]  = fBinsPi0900GeVPt[i];
                    if (i < fNBinsPt+1) 
                        fNRebin[i] = fBinsPi0900GeVPtRebin[i];
                }
            }
        //*********************************************************************************************
        //********************************** Pi0 for pp 2.76TeV****************************************
        //*********************************************************************************************
        } else if (energy.CompareTo("2.76TeV") == 0) {
            if (directPhoton.CompareTo("directPhoton") == 0){
                fStartPtBin     = 1;
                fColumn         = 5;
                fRow            = 5;
                
                if (fNBinsPt > 21) {
                    cout << "You have chosen Direct Photon Plots and more than 21 bins, this is not possible, it will be reduced to 21 bins." << endl;
                    fNBinsPt    = 21;
                }
                for (Int_t i = 0; i < fNBinsPt+1; i++) {
                    fBinsPt[i]  = fBinsPi02760GeVDirectPhotonPt[i];
                    if (i < fNBinsPt+1) 
                        fNRebin[i] = fBinsPi02760GeVDirectPhotonPtRebin[i];
                }
            } else {
                if (triggerSet == -1){
                    if (trigger.CompareTo("52") == 0){
                        specialTrigg = 1;    // L0
                    } else if ( trigger.CompareTo("85") == 0 ){
                        specialTrigg = 2; //L1 G2 (lower threshold) 
                    } else if ( trigger.CompareTo("83") == 0    ){
                        specialTrigg = 3; //L1 G1 (higher threshold)
                    } else if ( trigger.CompareTo("51") == 0    ){
                        specialTrigg = 4; //L0 LHC11a
                    } else if ( trigger.CompareTo("01") == 0  || trigger.CompareTo("00") == 0   ){
                        specialTrigg = 5; //INT7 LHC13g    
                    }
                } else {
                    specialTrigg        = triggerSet;
                }    
                fStartPtBin     = 1;
                if (modi == 2 && specialTrigg == 0) 
                    fStartPtBin = 3;
                else if (modi == 2 && specialTrigg == 1) 
                    fStartPtBin = 10;
                else if (modi == 4 && specialTrigg == 1) 
                    fStartPtBin = 13;
                else if (modi == 2 && specialTrigg == 2) 
                    fStartPtBin = 15;
                else if (modi == 4 && specialTrigg == 2) 
                    fStartPtBin = 16;
                else if (modi == 2 && specialTrigg == 3) 
                    fStartPtBin = 16;
                else if (modi == 4 && specialTrigg == 3) 
                    fStartPtBin = 18;
                else if (modi == 2 && specialTrigg == 4) 
                    fStartPtBin = 12;
                else if (modi == 4 && specialTrigg == 4) 
                    fStartPtBin = 15;
                else if (modi == 10 && ( ReturnClusterNLM(clusterCutSelection) == 2 || ReturnClusterNLM(clusterCutSelection) == 0)) 
                    fStartPtBin = 17;
                else if (modi == 10 && ReturnClusterNLM(clusterCutSelection) == 1 && (specialTrigg == 0 || specialTrigg == 5))  
                    fStartPtBin = 21;
                else if (modi == 10 && ReturnClusterNLM(clusterCutSelection) == 1) 
                    fStartPtBin = 21; // 20 with V1 clusterizer
                else if (modi == 4 ) 
                    fStartPtBin = 6;
                
                fColumn         = 6;
                fRow            = 4;
                if (fNBinsPt - fStartPtBin < 19) 
                    fColumn     = 5;
                if (fNBinsPt - fStartPtBin < 15){
                    fColumn     = 5;
                    fRow        = 3;
                }
                if (fNBinsPt - fStartPtBin < 12){
                    fColumn     = 4;
                    fRow        = 3;
                }
                if (fNBinsPt - fStartPtBin < 9){
                    fColumn     = 3;
                    fRow        = 3;
                }
                if (fNBinsPt > 19 && ( modi == 0 || modi == 1) && specialTrigg < 1) {
                    cout << "You have chosen to have more than 19 bins, this is not possible, it will be reduced to 19" << endl;
                    fNBinsPt    = 19;
                } else if (fNBinsPt > 24 &&  modi == 0  && specialTrigg > 0) {
                    cout << "You have chosen to have more than 19 bins, this is not possible, it will be reduced to 19" << endl;
                    fNBinsPt    = 24;    
                } else if (fNBinsPt > 24 && (modi == 2 || modi == 3) && specialTrigg == 0){
                    cout << "You have chosen to have more than 24 bins, this is not possible, it will be reduced to 24" << endl;
                    fNBinsPt    = 24;
                } else if (fNBinsPt > 29 && ( (modi == 2 && (specialTrigg == 1 || specialTrigg == 2 || specialTrigg == 3)) || modi ==4)){
                    cout << "You have chosen to have more than 29 bins, this is not possible, it will be reduced to 29" << endl;
                    fNBinsPt    = 29;
                } else if (fNBinsPt > 28 &&  modi == 2 && specialTrigg == 3){
                    cout << "You have chosen to have more than 28 bins, this is not possible, it will be reduced to 28" << endl;
                    fNBinsPt    = 28;                    
                } else if (fNBinsPt > 25 && (modi == 2  && (specialTrigg == 4 || specialTrigg == 1 || specialTrigg == 2 )) || (modi == 3 && specialTrigg == 4)){
                    cout << "You have chosen to have more than 25 bins, this is not possible, it will be reduced to 25" << endl;
                    fNBinsPt    = 25;
                } else if (fNBinsPt > 32 && (modi == 10)){
                    cout << "You have chosen to have more than 32 bins, this is not possible, it will be reduced to 32" << endl;
                    fNBinsPt    = 32;                    
                }
                    
                for (Int_t i = 0; i < fNBinsPt+1; i++) {
                    fBinsPt[i]          = fBinsPi02760GeVPt[i];
                    if ((modi == 2) && specialTrigg == 0 ){
                        if (i < fNBinsPt+1) 
                            fNRebin[i]  = fBinsPi02760GeVConvEMCALPtRebin[i];
                    } else if ( modi == 4 && (specialTrigg == 1 || specialTrigg == 2 || specialTrigg == 3 || specialTrigg == 4 ) ) {
                        if (i < fNBinsPt+1) 
                            fNRebin[i]  = fBinsPi02760GeVEMCALPtTrig13gRebin[i];
                        fBinsPt[i]      = fBinsPi02760GeVPtTrig13g[i];
                    } else if ( modi == 2 && specialTrigg == 3 ) {
                        if (i < fNBinsPt+1) 
                            fNRebin[i]  = fBinsPi02760GeVConvEMCALPtTrig13gRebin[i];
                        fBinsPt[i]      = fBinsPi02760GeVPtTrig13gConvEMCAL[i];
                    } else if ( modi == 2 && (specialTrigg == 4 || specialTrigg == 1 || specialTrigg == 2 ) ){        
                        if (i < fNBinsPt+1) 
                            fNRebin[i]  = fBinsPi02760GeVConvEMCALPtTrig11aRebin[i];
                        fBinsPt[i]      = fBinsPi02760GeVPtTrig11a[i];
                    } else if ( modi == 0 && (specialTrigg == 3 || specialTrigg == 1 || specialTrigg == 2 ) ){        
                        if (i < fNBinsPt+1) 
                            fNRebin[i]  = fBinsPi02760GeVConvEMCALPtTrig11aRebin[i];
                        fBinsPt[i]      = fBinsPi02760GeVPtTrig11a[i];
                        
                    } else if ( modi == 10 ) {    
                        if (i < fNBinsPt+1) 
                            fNRebin[i]  = fBinsPi02760GeVPtMergedRebin[i];
                        fBinsPt[i]      = fBinsPi02760GeVPtMerged[i];
                    } else {
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsPi02760GeVPtRebin[i];
                    }
                }
                Int_t nBinsPlot     = fColumn*fRow -1;
                if (fNBinsPt-fStartPtBin > nBinsPlot) fColumn++;
                nBinsPlot           = fColumn*fRow -1;
                if (fNBinsPt-fStartPtBin > nBinsPlot) fRow++;
            }
        //*********************************************************************************************
        //********************************** Pi0 for pp 7TeV*******************************************
        //*********************************************************************************************
        } else if (energy.CompareTo("7TeV") == 0) {
            if (directPhoton.CompareTo("directPhoton") == 0){
                fStartPtBin     = 1;
                if (modi == 4) 
                    fStartPtBin = 10;
                else if(modi == 2) 
                    fStartPtBin = 6;
                fColumn         = 5;
                fRow            = 5;                                
                if (fNBinsPt > 23) {
                    cout << "You have chosen Direct Photon Plots and more than 23 bins, this is not possible, it will be reduced to 23 bins." << endl;
                    fNBinsPt    = 23;
                }
                for (Int_t i = 0; i < fNBinsPt+1; i++) {
                    fBinsPt[i]         = fBinsPi07TeVDirectPhotonPt[i];
                    if (i < fNBinsPt+1) fNRebin[i] = fBinsPi07TeVDirectPhotonPtRebin[i];
                }
            } else {
                fStartPtBin     = 1;
                if (modi == 4) 
                    fStartPtBin = 10;
                else if(modi == 2) 
                    fStartPtBin = 6;
                fColumn         = 7;
                fRow            = 6;
                if(modi == 2) fColumn = 6;

                if (fNBinsPt > 42) {
                    cout << "You have chosen to have more than 42 bins, this is not possible, it will be reduced to 42" << endl;
                    fNBinsPt    = 42;
                }
                for (Int_t i = 0; i < fNBinsPt+1; i++) {
                    fBinsPt[i]         = fBinsPi07TeVPt[i];

                    if (modi == 2){
                        if (i < fNBinsPt)
                            fNRebin[i]  = fBinsPi07TeVConvEMCALPtRebin[i];
                    } else if (modi == 4){
                       if (i < fNBinsPt) 
                           fNRebin[i]   = fBinsPi07TeVEMCALPtRebin[i];
                    } else {
                        if (i < fNBinsPt) 
                            fNRebin[i]  = fBinsPi07TeVPtRebin[i];
                    }
                }
            }
        //*********************************************************************************************
        //********************************** Pi0 for pp 8TeV*******************************************
        //*********************************************************************************************
        } else if (energy.CompareTo("8TeV") == 0) {
            if (triggerSet == -1){
                if (trigger.CompareTo("52") == 0){
                    specialTrigg = 1; // L0 EMC7
                } else if ( trigger.CompareTo("81") == 0 ){
                    specialTrigg = 2; //L1 INT7 EGA
                } else if ( trigger.CompareTo("53") == 0 ){
                    specialTrigg = 3; // L0 EMC8
                } else if ( trigger.CompareTo("82") == 0 ) {
                    specialTrigg = 4; // L1 INT8 EGA
                }
            } else {
                specialTrigg        = triggerSet;
            }

            fStartPtBin = 1;
            if (modi == 4 ) fStartPtBin = 7;
            if (modi == 2 ) fStartPtBin = 2;


            if (modi == 0 && specialTrigg == 1) fStartPtBin = 21;
            if (modi == 0 && specialTrigg == 2) fStartPtBin = 27;
            if (modi == 2 && specialTrigg == 1) fStartPtBin = 21;
            if (modi == 2 && specialTrigg == 2) fStartPtBin = 28;
            if (modi == 4 && specialTrigg == 1) fStartPtBin = 22;
            if (modi == 4 && specialTrigg == 2) fStartPtBin = 33;
            if (modi == 10 && specialTrigg == 0) fStartPtBin = 28;
            if (modi == 10 && specialTrigg == 1) fStartPtBin = 28;
            if (modi == 10 && specialTrigg == 2) fStartPtBin = 28;

            fColumn             = 6;
            fRow                = 5;

            if ((fNBinsPt - fStartPtBin) > 29){
                fColumn     = 6;
                fRow        = 6;
            } else if ((fNBinsPt - fStartPtBin) < 12){
                fColumn     = 4;
                fRow        = 3;
            } else if ((fNBinsPt - fStartPtBin) < 16){
                fColumn     = 4;
                fRow        = 4;
            } else if ((fNBinsPt - fStartPtBin) < 20){
                fColumn     = 5;
                fRow        = 4;
            } else if ((fNBinsPt - fStartPtBin) < 25){
                fColumn     = 5;
                fRow        = 5;
            }

            if (fNBinsPt > 33 && modi != 2 && modi != 3 && modi != 4 && modi != 10) {
                if ( specialTrigg == 1 && fNBinsPt > 42){
                    cout << "You have chosen to have more than 42 bins, this is not possible, it will be reduced to 42" << endl;
                    fNBinsPt        = 42;
                } else if ( specialTrigg == 2 && fNBinsPt > 41){
                    cout << "You have chosen to have more than 41 bins, this is not possible, it will be reduced to 41" << endl;
                    fNBinsPt        = 41;
                } else if (specialTrigg!=1 && specialTrigg!=2){
                    cout << "You have chosen to have more than 33 bins, this is not possible, it will be reduced to 32" << endl;
                    fNBinsPt        = 33;
                }
            } else if (fNBinsPt > 32 && (modi ==4)){
              if( specialTrigg == 2 && fNBinsPt > 42){
                cout << "You have chosen to have more than 42 bins, this is not possible, it will be reduced to 42" << endl;
                fNBinsPt        = 42;
              } else if ( specialTrigg == 1 && fNBinsPt > 42){
                cout << "You have chosen to have more than 42 bins, this is not possible, it will be reduced to 42" << endl;
                fNBinsPt = 42;
              } else if (specialTrigg!=1 && specialTrigg!=2){
                cout << "You have chosen to have more than 32 bins, this is not possible, it will be reduced to 32" << endl;
                fNBinsPt        = 32;
              }
            } else if (fNBinsPt > 28 && (modi == 2 || modi == 3)){
                if( specialTrigg == 2 && fNBinsPt > 42){
                  cout << "You have chosen to have more than 42 bins, this is not possible, it will be reduced to 42" << endl;
                  fNBinsPt        = 42;
                } else if ( specialTrigg == 1 && fNBinsPt > 42){
                  cout << "You have chosen to have more than 42 bins, this is not possible, it will be reduced to 42" << endl;
                  fNBinsPt = 42;
                } else if(specialTrigg!=1 && specialTrigg!=2) {
                  cout << "You have chosen to have more than 28 bins, this is not possible, it will be reduced to 28" << endl;
                  fNBinsPt        = 28;
                }
            } else if (fNBinsPt > 53 && (modi == 10)){
                cout << "You have chosen to have more than 53 bins, this is not possible, it will be reduced to 53" << endl;
                fNBinsPt        = 53;
            }    

            for (Int_t i = 0; i < fNBinsPt+1; i++) {
                if (modi == 4 ){
                    if( specialTrigg == 1 ){
                        fBinsPt[i]                 = fBinsPi08TeVEMCalTrigger1Pt[i];
                    } else if ( specialTrigg == 2 ){
                        fBinsPt[i]                 = fBinsPi08TeVEMCalTrigger2Pt[i];
                    } else
                        fBinsPt[i]                 = fBinsPi08TeVPtEMCAL[i];
                } else if (modi == 2){
                    if( specialTrigg == 1 ){
                        fBinsPt[i]                 = fBinsPi08TeVConvEMCalTrigger1Pt[i];
                    } else if ( specialTrigg == 2 ){
                        fBinsPt[i]                 = fBinsPi08TeVTrigger2Pt[i];
                    } else
                        fBinsPt[i]                 = fBinsPi08TeVPtConvEMCAL[i];
                } else if (modi == 10){
                    fBinsPt[i]                     = fBinsPi08TeVPtMerged[i];
                } else {
                    if( specialTrigg == 1 ){
                        fBinsPt[i]                 = fBinsPi08TeVTrigger1Pt[i];
                    } else if ( specialTrigg == 2 ){
                        fBinsPt[i]                 = fBinsPi08TeVConvTrigger2Pt[i];
                    } else
                        fBinsPt[i]                 = fBinsPi08TeVPt[i];
                }

                if (modi == 2){
                    if( specialTrigg == 1 ){
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsPi08TeVConvEMCALTrigger1PtRebin[i];
                    } else if( specialTrigg == 2 ){
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsPi08TeVConvEMCALTrigger2PtRebin[i];
                    } else{
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsPi08TeVConvEMCALPtRebin[i];
                    }
                } else if(modi == 4) {
                    if( specialTrigg == 1 ){
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsPi08TeVEMCALTrigger1PtRebin[i];
                    } else if( specialTrigg == 2 ){
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsPi08TeVEMCALTrigger2PtRebin[i];
                    } else{
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsPi08TeVEMCALPtRebin[i];
                    }
                } else if(modi == 10) {
                    if (i < fNBinsPt+1) fNRebin[i]     = fBinsPi08TeVPtMergedRebin[i];
                } else {
                    if( specialTrigg == 1 ){
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsPi08TeVConvTrigger1PtRebin[i];
                    } else if( specialTrigg == 2 ){
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsPi08TeVConvTrigger2PtRebin[i];
                    } else{
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsPi08TeVPtRebin[i];
                    }
                }
            }

            Int_t nBinsPlot = fColumn*fRow -1;
            if ((fNBinsPt-fStartPtBin) > nBinsPlot) fColumn++;
            nBinsPlot           = fColumn*fRow -1;
            if ((fNBinsPt-fStartPtBin) > nBinsPlot) fRow++;
        //*********************************************************************************************
        //********************************** Pi0 for pp 13TeV******************************************
        //*********************************************************************************************
        } else if (energy.CompareTo("13TeV") == 0) {
            if (directPhoton.CompareTo("directPhoton") == 0){
                fStartPtBin     = 1;
                fColumn         = 5;
                fRow            = 5;
                if (fNBinsPt > 24) {
                    cout << "You have chosen Direct Photon Plots and more than 24 bins, this is not possible, it will be reduced to 24 bins." << endl;
                    fNBinsPt    = 24;
                }
                for (Int_t i = 0; i < fNBinsPt+1; i++) {
                    fBinsPt[i]         = fBinsPi013TeVDirectPhotonPt[i];
                    if (i < fNBinsPt+1) fNRebin[i] = fBinsPi013TeVDirectPhotonPtRebin[i];
                }
                fNBinsPtDCAzDist    = 15;
                fBinsPtDCAzDist     = new Double_t[fNBinsPtDCAzDist+1];
                for (Int_t i = 0; i < fNBinsPtDCAzDist+1; i++) {
                    fBinsPtDCAzDist[i] = fBinsPi013TeVDirectPhotonPtDCAzDist[i];
                }
            } else {
                fStartPtBin         = 1;
                fColumn             = 5;
                fRow                = 4;
                if (fNBinsPt < 17)
                    fColumn         = 4;
                if (fNBinsPt > 20) {
                    cout << "You have chosen to have more than 20 bins, this is not possible, it will be reduced to 20" << endl;
                    fNBinsPt        = 20;
                }
                for (Int_t i = 0; i < fNBinsPt+1; i++) {
                    fBinsPt[i]      = fBinsPi013TeVPt[i];
                    if (i < fNBinsPt+1)
                        fNRebin[i]  = fBinsPi013TeVPtRebin[i];
                }
                Int_t nBinsPlot     = fColumn*fRow -1;
                if (fNBinsPt-fStartPtBin > nBinsPlot) fColumn++;
                nBinsPlot           = fColumn*fRow -1;
                if (fNBinsPt-fStartPtBin > nBinsPlot) fRow++;
            }
        //****** Pi0 for 13TeV low B field *************
        } else if (energy.CompareTo("13TeVLowB") == 0) {
            if (directPhoton.CompareTo("directPhoton") == 0){
                fStartPtBin     = 1;
                fColumn         = 5;
                fRow            = 5;
                if (fNBinsPt > 24) {
                    cout << "You have chosen Direct Photon Plots and more than 24 bins, this is not possible, it will be reduced to 24 bins." << endl;
                    fNBinsPt    = 24;
                }
                for (Int_t i = 0; i < fNBinsPt+1; i++) {
                    fBinsPt[i]         = fBinsPi013TeVLowBDirectPhotonPt[i];
                    if (i < fNBinsPt+1) fNRebin[i] = fBinsPi013TeVLowBDirectPhotonPtRebin[i];
                }
                fNBinsPtDCAzDist    = 15;
                fBinsPtDCAzDist     = new Double_t[fNBinsPtDCAzDist+1];
                for (Int_t i = 0; i < fNBinsPtDCAzDist+1; i++) {
                    fBinsPtDCAzDist[i] = fBinsPi013TeVLowBDirectPhotonPtDCAzDist[i];
                }
            } else {
                fStartPtBin         = 1;
                fColumn             = 5;
                fRow                = 4;
                if (fNBinsPt < 17)
                    fColumn         = 4;
                if (fNBinsPt > 17) {
                    cout << "You have chosen to have more than 17 bins, this is not possible, it will be reduced to 17" << endl;
                    fNBinsPt        = 17;
                }
                for (Int_t i = 0; i < fNBinsPt+1; i++) {
                    fBinsPt[i]      = fBinsPi013TeVLowBPt[i];
                    if (i < fNBinsPt+1)
                        fNRebin[i]  = fBinsPi013TeVLowBPtRebin[i];
                }
                Int_t nBinsPlot     = fColumn*fRow -1;
                if (fNBinsPt-fStartPtBin > nBinsPlot) fColumn++;
                nBinsPlot           = fColumn*fRow -1;
                if (fNBinsPt-fStartPtBin > nBinsPlot) fRow++;
            }
        //*********************************************************************************************
        //********************************** Pi0 for pPb 5.023TeV**************************************
        //*********************************************************************************************
        } else if( energy.CompareTo("pPb_5.023TeV") == 0) { 
            if (directPhoton.CompareTo("directPhoton") == 0){
                fStartPtBin     = 1;
                fColumn         = 5;
                fRow            = 5;
                
                if (fNBinsPt > 21) {
                    cout << "You have chosen Direct Photon Plots and more than 21 bins, this is not possible, it will be reduced to 21 bins." << endl;
                    fNBinsPt    = 21;
                }
                for (Int_t i = 0; i < fNBinsPt+1; i++) {
                    fBinsPt[i]  = fBinsPi0pPbDirectPhotonPt[i];
                    if (i < fNBinsPt+1) 
                        fNRebin[i] = fBinsPi0pPbDirectPhotonPtRebin[i];
                }
            } else {
                if (triggerSet == -1){
                    if (trigger.CompareTo("52") == 0){
                        specialTrigg = 1;    // L0
                    } else if ( trigger.CompareTo("85") == 0 ){
                        specialTrigg = 2; //L1 G2 (lower threshold) 
                    } else if ( trigger.CompareTo("83") == 0    ){
                        specialTrigg = 3; //L1 G2 (lower threshold) 
                    }
                } else {
                    specialTrigg        = triggerSet;
                }    


                fStartPtBin     = 1;
                fColumn         = 7;
                fRow            = 5;

                if (modi == 2 && specialTrigg == 1){ 
                    fStartPtBin     = 14;
                    fColumn         = 6;
                    fRow            = 4;
                } else if (modi == 2 && specialTrigg == 2){ 
                    fStartPtBin     = 24;
                    fColumn         = 5;
                    fRow            = 4;
                } else if (modi == 2 && specialTrigg == 3){ 
                    fStartPtBin     = 29;
                    fColumn         = 5;
                    fRow            = 3;
                } else if (modi == 2){ 
                    fStartPtBin     = 6;
                    fColumn         = 6;
                } else if (modi == 4) {
                    fStartPtBin     = 5;
                } else if (modi == 5) {
                    fStartPtBin     = 8;
                }
                    
                TString MinBias = eventCutSelection(GetEventCentralityMinCutPosition(),2);
                if (specialTrigg == 0 && ( modi == 2 || modi == 4 ) && fNBinsPt > 34 ){
                    cout << "You have chosen to have more than 34 bins, this is not possible, it will be reduced to 34 for calo analysis" << endl;
                    fNBinsPt    = 34;                                        
                } else if (fNBinsPt > 37 && specialTrigg == 0){
                    cout << "You have chosen to have more than 37 bins, this is not possible, it will be reduced to 37 for calo analysis" << endl;
                    fNBinsPt    = 37;                                        
                } else if (fNBinsPt > 42 ){
                    cout << "You have chosen to have more than 42 bins, this is not possible, it will be reduced to 42 for calo analysis" << endl;
                    fNBinsPt    = 42;                                                            
                }    
                
                Int_t nBinsPlot = fColumn*fRow -1;
                if (fNBinsPt-fStartPtBin > nBinsPlot) fColumn++;
                nBinsPlot       = fColumn*fRow -1;
                if (fNBinsPt-fStartPtBin > nBinsPlot) fRow++;

                for (Int_t i = 0; i < fNBinsPt+1; i++) {    
                    if (specialTrigg == 1 && modi == 2){
                        fBinsPt[i]  = fBinsPi0pPbPtEMCTrig[i];
                        fNRebin[i]  = fBinsPi0pPbConvEMCALTrigPtRebin[i];
                    } else if (specialTrigg == 2 && modi == 2){
                        fBinsPt[i]  = fBinsPi0pPbPtEMCTrig[i];
                        fNRebin[i]  = fBinsPi0pPbConvEMCALTrigPtRebin[i];
                    } else if (specialTrigg == 3 && modi == 2){
                        fBinsPt[i]  = fBinsPi0pPbPtEMCTrig[i];
                        fNRebin[i]  = fBinsPi0pPbConvEMCALTrigEG1PtRebin[i];
                    } else {
                        fBinsPt[i]  = fBinsPi0pPbPt[i];
                        if (modi == 2 || modi == 4) 
                            fBinsPt[i]  = fBinsPi0pPbEMCALPt[i];
                        if (i < fNBinsPt+1){
                            fNRebin[i]                         = fBinsPi0pPbPtRebin[i];
                            if (modi == 2 ) fNRebin[i]         = fBinsPi0pPbConvEMCALPtRebin[i];
                            if (modi == 3 ) fNRebin[i]         = fBinsPi0pPbConvPHOSPtRebin[i];
                            if (modi == 4 ) fNRebin[i]         = fBinsPi0pPbEMCALPtRebin[i];
                            if (modi == 5 ) fNRebin[i]         = fBinsPi0pPbPHOSPtRebin[i];
                        }
                    }    
                }
            }
        //*********************************************************************************************
        //********************************** Pi0 for PbPb 2.76TeV**************************************
        //*********************************************************************************************
        } else if( energy.CompareTo("PbPb_2.76TeV") == 0) { 
            if (directPhoton.CompareTo("directPhoton") == 0){
                fStartPtBin     = 1;
                fColumn         = 5;
                fRow            = 5;
                
                if (fNBinsPt > 24) {
                    cout << "You have chosen Direct Photon Plots and more than 24 bins, this is not possible, it will be reduced to 24 bins." << endl;
                    fNBinsPt    = 24;
                }
                for (Int_t i = 0; i < fNBinsPt+1; i++) {
                    fBinsPt[i]  = fBinsPi0HIPtLHC11h[i];
                    if (i < fNBinsPt+1) fNRebin[i] = fBinsPi0HIPtLHC11hRebin[i];
                }
//                 if (fNBinsPt > 21) {
//                     cout << "You have chosen Direct Photon Plots and more than 21 bins, this is not possible, it will be reduced to 21 bins." << endl;
//                     fNBinsPt    = 21;
//                 }
//                 for (Int_t i = 0; i < fNBinsPt+1; i++) {
//                     fBinsPt[i]  = fBinsPi0HIDirectPhotonPt[i];
//                     if (i < fNBinsPt+1) fNRebin[i] = fBinsPi0HIDirectPhotonPtRebin[i];
//                 }
            } else{
                fStartPtBin     = 1;
                fColumn         = 5;
                fRow            = 4;
                
                if (modi == 5) fStartPtBin = 4;
                
                if (fNBinsPt > 20){
                    fColumn     = 6;
                }
                
                if (fNBinsPt > 24) {
                    cout << "You have chosen to have more than 24 bins, this is not possible, it will be reduced to 24" << endl;
                    fNBinsPt    = 24;
                }
                for (Int_t i = 0; i < fNBinsPt+1; i++) {
                    fBinsPt[i]  = fBinsPi0HIPtLHC11h[i]; 
                    if (i < fNBinsPt+1) fNRebin[i] = fBinsPi0HIPtLHC11hRebin[i]; 
//                                         fBinsPt[i]         = fBinsPi0HIPt[i];
//                                         if (i < fNBinsPt+1) fNRebin[i] = fBinsPi0HIPtRebin[i];
                }
            }
        //*********************************************************************************************
        //********************************** Pi0 for PbPb 5.02TeV**************************************
        //*********************************************************************************************
        } else if( energy.CompareTo("PbPb_5.02TeV") == 0) {
            if (directPhoton.CompareTo("directPhoton") == 0){
                fStartPtBin     = 1;
                fColumn         = 5;
                fRow            = 4;
                if (fNBinsPt > 19) {
                    cout << "You have chosen Direct Photon Plots and more than 19 bins, this is not possible, it will be reduced to 19 bins." << endl;
                    fNBinsPt    = 19;
                }
                for (Int_t i = 0; i < fNBinsPt+1; i++) {
                    fBinsPt[i]  = fBinsPi0HI5020GeVDirectPhotonPt[i];
                    if (i < fNBinsPt+1) fNRebin[i] = fBinsPi0HI5020GeVDirectPhotonPtRebin[i];
                }
            } else{
                fStartPtBin     = 1;
                fColumn         = 4;
                fRow            = 4;
                
                if (modi == 4){
                  fStartPtBin     = 6;
                  fColumn         = 4;
                  fRow            = 5;
                }
                
//                 if (fNBinsPt > 13) {
//                     cout << "You have chosen to have more than 13 bins, this is not possible, it will be reduced to 13" << endl;
//                     fNBinsPt    = 13;
//                 }
                
                for (Int_t i = 0; i < fNBinsPt+1; i++) {
                    fBinsPt[i]  = fBinsPi0HI5020GeVPt[i];
                    if (modi == 4){
                      fBinsPt[i]  = fBinsPi0HI5020GeVEMCALPt[i];
                      if (i < fNBinsPt+1) fNRebin[i] = fBinsPi0HI5020GeVEMCALPtRebin[i];
                    }else{
                      if (i < fNBinsPt+1) fNRebin[i] = fBinsPi0HI5020GeVPtRebin[i];
                    }
                }
            }
        }

    //*************************************************************************************************
    //********************************** Binning for Eta **********************************************
    //*************************************************************************************************        
    } else if (setPi0.CompareTo("Eta") == 0 || setPi0.CompareTo("Pi0EtaBinning") == 0){
        fNBinsPt                = numberOfBins;
        fBinsPt                 = new Double_t[30];
        fNRebin                 = new Int_t[29];
        //*********************************************************************************************
        //********************************** Eta for pp 0.9 TeV****************************************
        //*********************************************************************************************                    
        if (energy.CompareTo("900GeV") == 0) {
            fStartPtBin         = 1;
            fColumn             = 2;
            fRow                = 2;

            if (fNBinsPt > 3) {
                cout << "You have chosen to have more than 3 bins for Eta, this is not possible, it will be reduced to 3" << endl;
                fNBinsPt        = 3;
            }
            for (Int_t i = 0; i < fNBinsPt+1; i++) {
                fBinsPt[i]      = fBinsEta900GeVPt[i];
                if (i < fNBinsPt+1) 
                    fNRebin[i]  = fBinsEta900GeVPtRebin[i];
            }
        //*********************************************************************************************
        //********************************** Eta for pp 2.76TeV****************************************
        //*********************************************************************************************    
        } else if (energy.CompareTo("2.76TeV") == 0) {
            //LHC13g running with trigger
            if (triggerSet == -1){
                if (trigger.CompareTo("52") == 0){
                    specialTrigg = 1;    // L0
                } else if ( trigger.CompareTo("85") == 0 ){
                    specialTrigg = 2; //L1 G2 (lower threshold) 
                } else if ( trigger.CompareTo("83") == 0    ){
                    specialTrigg = 3; //L1 G1 (lower threshold) 
                } else if ( trigger.CompareTo("51") == 0    ){
                    specialTrigg = 4; //L0 LHC11a
                } else if ( trigger.CompareTo("01") == 0  || trigger.CompareTo("00") == 0   ){
                    specialTrigg = 5; //INT7 LHC13g
                }
            } else {
                specialTrigg        = triggerSet;
            }    
            
            fStartPtBin         = 1;
            if ( modi == 3) 
                fStartPtBin     = 2;
            else if (modi == 2 && specialTrigg == 0) // MB, PCM-EMC
                fStartPtBin     = 2;
            else if (modi == 2 && specialTrigg == 5) { // INT7, PCM-EMC
                fStartPtBin     = 4;
            } else if (modi == 2 && specialTrigg == 1) // EMC7, PCM-EMC
                fStartPtBin     = 4;
            else if (modi == 2 && specialTrigg == 2) // L1 G2, PCM-EMC
                fStartPtBin     = 6;
            else if (modi == 2 && specialTrigg == 3) // L1 G1, PCM-EMC
                fStartPtBin     = 7;
            else if (modi == 2 && specialTrigg == 4) // EMC1, PCM-EMC
                fStartPtBin     = 4;
            else if (modi == 4 && specialTrigg == 1) 
                fStartPtBin     = 5;
            else if (modi == 4 && specialTrigg == 2) 
                fStartPtBin     = 6;
            else if (modi == 4 && specialTrigg == 3) 
                fStartPtBin     = 7;
            else if (modi == 4 && specialTrigg == 4) 
                fStartPtBin     = 6;
            else if (modi == 4 ) 
                fStartPtBin     = 4;
            else if (modi == 5 ) 
                fStartPtBin     = 3;
            fColumn             = 3;
            fRow                = 3;
            if ((fNBinsPt-fStartPtBin) < 6) 
                fRow            = 2;
            if ((fNBinsPt-fStartPtBin) < 4) 
                fColumn         = 2;

            if (fNBinsPt > 7 && (modi == 0 || modi == 1) && specialTrigg < 1) {
                cout << "You have chosen to have more than 7 bins for Eta, this is not possible, it will be reduced to 7" << endl;
                fNBinsPt        = 7;
            } else if (fNBinsPt > 13 && (modi == 2 || modi == 3 || modi == 4 || modi == 0)){
                cout << "You have chosen to have more than 13 bins for Eta, this is not possible, it will be reduced to 13" << endl;
                fNBinsPt        = 13;                                
            }
            
            for (Int_t i = 0; i < fNBinsPt+1; i++) {
                if ( ( modi == 2 && specialTrigg == 0) ||
                     ( modi == 4 && specialTrigg == 0) ){
                    fBinsPt[i]  = fBinsEta2760GeVPt[i];
                    if (setPi0.CompareTo("Eta") == 0){
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsEta2760GeVConvEMCALPtRebin[i];
                    } else { 
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsPi0EtaBinning2760GeVConvEMCALPtRebin[i];
                    }
                } else if ( (modi == 2 && specialTrigg == 5)||
                            (modi == 4 && specialTrigg == 5)){
                    fBinsPt[i]  = fBinsEta2760GeVPt[i];
                    if (setPi0.CompareTo("Eta") == 0){
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsEta2760GeVConvEMCALPtTrigINT7Rebin[i];
                    } else { 
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsPi0EtaBinning2760GeVConvEMCALPtRebin[i];
                    }
                } else if ( (modi == 2 && specialTrigg == 4 ) ||
                            (modi == 4 && specialTrigg == 4 ) || 
                            (modi == 4 && specialTrigg == 2 ) ||
                            (modi == 4 && specialTrigg == 3 ) 
                          ){
                    fBinsPt[i]  = fBinsEta2760GeVPtTrig11a[i];
                    if (setPi0.CompareTo("Eta") == 0){
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsEta2760GeVConvEMCALPtTrig11aRebin[i];
                    } else { 
                        if (i < fNBinsPt+1){
                            fNRebin[i] = fBinsPi0EtaBinning2760GeVConvEMCALPtTrig11aRebin[i];
                        }
                    }
                } else if ( (modi == 2 && specialTrigg == 3 ) ||
                            (modi == 0 && specialTrigg > 0 )
                          ){
                    fBinsPt[i]  = fBinsEta2760GeVPtTrig11a[i];
                    if (setPi0.CompareTo("Eta") == 0){
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsEta2760GeVConvEMCALPtRebin[i];
                    } else { 
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsPi0EtaBinning2760GeVConvEMCALPtRebin[i];
                    }
                } else if ( modi == 2 && specialTrigg == 2 ){    
                    fBinsPt[i]  = fBinsEta2760GeVPtTrig11a[i];
                    if (setPi0.CompareTo("Eta") == 0){
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsEta2760GeVConvEMCALPtEG2Rebin[i];
                    } else { 
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsPi0EtaBinning2760GeVConvEMCALPtRebin[i];
                    }
                    
                } else {
                    fBinsPt[i]  = fBinsEta2760GeVPt[i];
                    if (setPi0.CompareTo("Eta") == 0){
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsEta2760GeVPtRebin[i];
                    } else {
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsPi0EtaBinning2760GeVPtRebin[i];
                    }
                }
            }
            Int_t nBinsPlot     = fColumn*fRow -1;
            if (fNBinsPt-fStartPtBin > nBinsPlot) fColumn++;
            nBinsPlot           = fColumn*fRow -1;
            if (fNBinsPt-fStartPtBin > nBinsPlot) fRow++;
            
        //*********************************************************************************************
        //********************************** Eta for pp 7TeV*******************************************
        //*********************************************************************************************
        } else if (energy.CompareTo("7TeV") == 0) {
            fStartPtBin         = 1;
            if (modi == 2 ) 
                fStartPtBin     = 3;
            else if (modi == 4) 
                fStartPtBin     = 6;
            fColumn             = 5;
            fRow                = 3;
            
            if (fNBinsPt > 18) {
                cout << "You have chosen to have more than 18 bins for Eta, this is not possible, it will be reduced to 18" << endl;
                fNBinsPt        = 18;
            }
            for (Int_t i = 0; i < fNBinsPt+2; i++) {
                if (modi == 2 || modi == 4) 
                    fBinsPt[i]      = fBinsEta7TeVConvEMCALPt[i];
                else 
                    fBinsPt[i]      = fBinsEta7TeVPt[i];

                if (modi == 2){
                    if (i < fNBinsPt+1) 
                        fNRebin[i]  = fBinsEta7TeVConvEMCALPtRebin[i];
                } else if(modi == 4){
                  if (i < fNBinsPt+1)
                      fNRebin[i]  = fBinsEta7TeVEMCALPtRebin[i];
                } else {
                    if (i < fNBinsPt+1)
                        fNRebin[i]  = fBinsEta7TeVPtRebin[i];
                }
            }
        //*********************************************************************************************
        //********************************** Eta for pp 8TeV*******************************************
        //*********************************************************************************************
        } else if (energy.CompareTo("8TeV") == 0) {
          if (triggerSet == -1){
              if (trigger.CompareTo("52") == 0){
                  specialTrigg = 1; // L0 EMC7
              } else if ( trigger.CompareTo("81") == 0 ){
                  specialTrigg = 2; //L1 INT7 EGA
              } else if ( trigger.CompareTo("53") == 0 ){
                  specialTrigg = 3; // L0 EMC8
              } else if ( trigger.CompareTo("82") == 0 ) {
                  specialTrigg = 4; // L1 INT8 EGA
              }
          } else {
              specialTrigg        = triggerSet;
          }

          fStartPtBin = 1;
          if (modi == 2 ) fStartPtBin = 3;
          if (modi == 4 ) fStartPtBin = 5;

          if (modi == 0 && specialTrigg == 1) fStartPtBin = 10;
          if (modi == 0 && specialTrigg == 2) fStartPtBin = 12;
          if (modi == 2 && specialTrigg == 1) fStartPtBin = 10;
          if (modi == 2 && specialTrigg == 2) fStartPtBin = 14;
          if (modi == 4 && specialTrigg == 1) fStartPtBin = 10;
          if (modi == 4 && specialTrigg == 2) fStartPtBin = 14;

          fColumn             = 4;
          fRow                = 3;

          if (fNBinsPt - fStartPtBin > 29){
              fColumn     = 6;
              fRow        = 6;
          }
          if (fNBinsPt - fStartPtBin < 25){
              fColumn     = 5;
              fRow        = 5;
          }
          if (fNBinsPt - fStartPtBin < 20){
              fColumn     = 5;
              fRow        = 4;
          }
          if (fNBinsPt - fStartPtBin < 16){
              fColumn     = 4;
              fRow        = 4;
          }
          if (fNBinsPt - fStartPtBin < 10){
              fColumn     = 4;
              fRow        = 3;
          }

          if (fNBinsPt > 16 && modi != 2 && modi != 3 && modi != 4) {
				 if( specialTrigg == 2 && fNBinsPt > 23){
              cout << "You have chosen to have more than 23 bins, this is not possible, it will be reduced to 23" << endl;
              fNBinsPt        = 23;
            } else if ( specialTrigg == 1 && fNBinsPt > 23){
              cout << "You have chosen to have more than 23 bins, this is not possible, it will be reduced to 23" << endl;
              fNBinsPt = 23;
            } else if(specialTrigg!=1 && specialTrigg!=2) {
              cout << "You have chosen to have more than 16 bins for Eta, this is not possible, it will be reduced to 16" << endl;
              fNBinsPt        = 16;
            }
          } else if (fNBinsPt > 19 && (modi == 4)){
            if( setPi0.CompareTo("Pi0EtaBinning") == 0 && ( specialTrigg ==1 && fNBinsPt > 20) ){
              fNBinsPt        = 20;
            }else if ( setPi0.CompareTo("Pi0EtaBinning") == 0 && ( specialTrigg == 2 && fNBinsPt > 19) ){
              fNBinsPt        = 19;
            }else if( specialTrigg == 2 && fNBinsPt > 23){
              cout << "You have chosen to have more than 23 bins, this is not possible, it will be reduced to 23" << endl;
              fNBinsPt        = 23;
            } else if ( specialTrigg == 1 && fNBinsPt > 23){
              cout << "You have chosen to have more than 23 bins, this is not possible, it will be reduced to 23" << endl;
              fNBinsPt = 23;
            } else if(specialTrigg!=1 && specialTrigg!=2) {
              cout << "You have chosen to have more than 19 bins for Eta, this is not possible, it will be reduced to 19" << endl;
              fNBinsPt        = 19;
            }
          } else if (fNBinsPt > 19 && (modi == 2 || modi == 3)){
            if( specialTrigg == 2 && fNBinsPt > 23){
              cout << "You have chosen to have more than 23 bins, this is not possible, it will be reduced to 23" << endl;
              fNBinsPt        = 23;
            } else if ( specialTrigg == 1 && fNBinsPt > 23){
              cout << "You have chosen to have more than 23 bins, this is not possible, it will be reduced to 23" << endl;
              fNBinsPt = 23;
            } else if(specialTrigg!=1 && specialTrigg!=2) {
              cout << "You have chosen to have more than 19 bins for Eta, this is not possible, it will be reduced to 19" << endl;
              fNBinsPt        = 19;
            }
          }

          for (Int_t i = 0; i < fNBinsPt+1; i++) {
                if( modi == 0 ){
                    if(specialTrigg == 1){
                        fBinsPt[i]      = fBinsEta8TeVConvTrigger1Pt[i];
                    } else if (specialTrigg == 2){
                        fBinsPt[i]      = fBinsEta8TeVConvTrigger2Pt[i];
                    } else
                        fBinsPt[i]      = fBinsEta8TeVPt[i];
                } else if ( modi == 2 ){
                    if(specialTrigg == 1){
                        fBinsPt[i]      = fBinsEta8TeVTrigger1Pt[i];
                    } else if (specialTrigg == 2){
                        fBinsPt[i]      = fBinsEta8TeVTrigger2Pt[i];
                    } else
                        fBinsPt[i]      = fBinsEta8TeVConvEMCALPt[i];
                } else if( modi == 4 ){
                    if(specialTrigg == 1){
                        fBinsPt[i]      = fBinsEta8TeVTrigger1Pt[i];
                    } else if (specialTrigg == 2){
                        fBinsPt[i]      = fBinsEta8TeVTrigger2Pt[i];
                    } else
                        fBinsPt[i]      = fBinsEta8TeVPt[i];
                } else {
                        fBinsPt[i]      = fBinsEta8TeVPt[i];
                }
                
                if ( modi == 0 ){
                    if(specialTrigg == 1){
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsEta8TeVConvTrigger1PtRebin[i];
                    } else if(specialTrigg == 2){
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsEta8TeVConvTrigger2PtRebin[i];
                    } else {
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsEta8TeVPtRebin[i];
                    }
                } else if ( modi == 2 ){
                    if(specialTrigg == 1){
                       if (i < fNBinsPt+1) fNRebin[i] = fBinsEta8TeVConvEMCALTrigger1PtRebin[i];
                    } else if(specialTrigg == 2){
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsEta8TeVConvEMCALTrigger2PtRebin[i];
                    } else {
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsEta8TeVConvEMCALPtRebin[i];
                    }
                } else if ( modi == 4 ) {
                    if(specialTrigg == 1){
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsEta8TeVEMCALTrigger1PtRebin[i];
                    } else if(specialTrigg == 2){
                        if (i < fNBinsPt+1){
                          fNRebin[i] = fBinsEta8TeVEMCALTrigger2PtRebin[i];
                          if(setPi0.CompareTo("Pi0EtaBinning") == 0 && fBinsPt[i]==18) fNRebin[i] = 16;
                        }
                    } else {
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsEta8TeVEMCALPtRebin[i];
                    }
                } else {
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsEta8TeVPtRebin[i];
                }
          }

//          Int_t nBinsPlot     = fColumn*fRow -1;
//          if (fNBinsPt-fStartPtBin > nBinsPlot) fRow++;
//          nBinsPlot           = fColumn*fRow -1;
//          if (fNBinsPt-fStartPtBin > nBinsPlot) fColumn++;            
        //*********************************************************************************************
        //********************************** Eta for pp 13TeV******************************************
        //*********************************************************************************************
        } else if (energy.CompareTo("13TeV") == 0) {
            fStartPtBin         = 1;
            fColumn             = 3;
            fRow                = 3;
            if ((fNBinsPt-fStartPtBin) < 6) 
                fRow            = 2;
            if (fNBinsPt > 13) {
                cout << "You have chosen to have more than 13 bins for Eta, this is not possible, it will be reduced to 13" << endl;
                fNBinsPt        = 13;
            } 
            
            for (Int_t i = 0; i < fNBinsPt+1; i++) {
                fBinsPt[i]      = fBinsEta13TeVPt[i];
                if (setPi0.CompareTo("Eta") == 0){
                    if (i < fNBinsPt+1) fNRebin[i]  = fBinsEta13TeVPtRebin[i];
                } else { 
                    if (i < fNBinsPt+1) fNRebin[i]  = fBinsPi0EtaBinning13TeVPtRebin[i];
                }
            }
            Int_t nBinsPlot     = fColumn*fRow -1;
            if (fNBinsPt-fStartPtBin > nBinsPlot) fColumn++;
            nBinsPlot           = fColumn*fRow -1;
            if (fNBinsPt-fStartPtBin > nBinsPlot) fRow++;
        //*********************************************************************************************    
        // ********************************* Eta for 13TeV low B field ********************************
        //*********************************************************************************************
        } else if (energy.CompareTo("13TeVLowB") == 0) {
            fStartPtBin         = 1;
            fColumn             = 2;
            fRow                = 2;
            if (fNBinsPt > 4) {
                cout << "You have chosen to have more than 4 bins for Eta, this is not possible, it will be reduced to 4" << endl;
                fNBinsPt        = 4;
            }

            for (Int_t i = 0; i < fNBinsPt+1; i++) {
                fBinsPt[i]      = fBinsEta13TeVLowBPt[i];
                if (setPi0.CompareTo("Eta") == 0){
                    if (i < fNBinsPt+1) fNRebin[i]  = fBinsEta13TeVLowBPtRebin[i];
                } else {
                    if (i < fNBinsPt+1) fNRebin[i]  = fBinsPi0EtaBinning13TeVLowBPtRebin[i];
                }
            }
            Int_t nBinsPlot     = fColumn*fRow -1;
            if (fNBinsPt-fStartPtBin > nBinsPlot) fColumn++;
            nBinsPlot           = fColumn*fRow -1;
            if (fNBinsPt-fStartPtBin > nBinsPlot) fRow++;
        //*********************************************************************************************
        //********************************** Eta for pPb 5.023TeV**************************************
        //*********************************************************************************************                
        } else if( energy.CompareTo("pPb_5.023TeV") == 0) { 
            if (triggerSet == -1){
                if (trigger.CompareTo("52") == 0){
                    specialTrigg = 1;    // L0
                } else if ( trigger.CompareTo("85") == 0 ){
                    specialTrigg = 2; //L1 G2 (lower threshold) 
                } else if ( trigger.CompareTo("83") == 0    ){
                    specialTrigg = 3; //L1 G2 (lower threshold) 
                }
            } else {
                specialTrigg        = triggerSet;
            }    

            fStartPtBin         = 3;
            fColumn             = 5;
            fRow                = 3;
            if (modi == 2 && specialTrigg == 1){ 
                fStartPtBin     = 11;
                fColumn         = 4;
                fRow            = 3;
            } else if (modi == 2 && specialTrigg == 2){ 
                fStartPtBin     = 16;
                fColumn         = 4;
                fRow            = 3;
            } else if (modi == 2 && specialTrigg == 3){ 
                fStartPtBin     = 19;
                fColumn         = 3;
                fRow            = 3;
            } else if (modi == 2){ 
                fStartPtBin     = 5;
            } else if (modi == 3) {
                fStartPtBin     = 7;
            } else if (modi == 4) {
                fStartPtBin     = 8;
            } else if (modi == 5) {
                fStartPtBin     = 8;
            }
                
            if (fNBinsPt > 16 && modi < 2) {
                cout << "You have chosen to have more than 16 bins, this is not possible, it will be reduced to 16" << endl;
                fNBinsPt        = 16;
            } else if (fNBinsPt > 21 && ( modi == 2 || modi == 4) && specialTrigg == 0 ) {
                cout << "You have chosen to have more than 21 bins, this is not possible, it will be reduced to 21" << endl;
                fNBinsPt        = 21;                
            } else if (fNBinsPt > 22 && specialTrigg == 0){        
                cout << "You have chosen to have more than 22 bins, this is not possible, it will be reduced to 22" << endl;
                fNBinsPt        = 22;
            } else if (fNBinsPt > 26 ){
                cout << "You have chosen to have more than 26 bins, this is not possible, it will be reduced to 26" << endl;
                fNBinsPt        = 26;
                
            }
            Int_t nBinsPlot     = fColumn*fRow -1;
            cout << nBinsPlot << endl;

            if (fNBinsPt-fStartPtBin > nBinsPlot) fColumn++;
            nBinsPlot           = fColumn*fRow -1;
            cout << nBinsPlot << endl;
            if (fNBinsPt-fStartPtBin > nBinsPlot) fRow++;                        
            cout << fColumn << "\t" << fRow<< endl;

            for (Int_t i = 0; i < fNBinsPt+1; i++) {
                if (modi == 2 && specialTrigg == 1){
                    fBinsPt[i]      = fBinsEtapPbPtEMCTrig[i];
                    if (i < fNBinsPt+1){                  
                        fNRebin[i]  = fBinsEtapPbConvEMCALTrigEMC7PtRebin[i];
                    }
                } else if (modi == 2 && specialTrigg == 2){
                    fBinsPt[i]      = fBinsEtapPbPtEMCTrig[i];
                    if (i < fNBinsPt+1){                  
                        fNRebin[i]  = fBinsEtapPbConvEMCALTrigEG2PtRebin[i];
                    }    
                } else if (modi == 2 && specialTrigg == 3){
                    fBinsPt[i]      = fBinsEtapPbPtEMCTrig[i];
                    if (i < fNBinsPt+1){                  
                        fNRebin[i]  = fBinsEtapPbConvEMCALTrigPtRebin[i];
                    }    
                } else {
                    fBinsPt[i]      = fBinsEtapPbPt[i];
                    if (modi == 2 || modi == 4)
                        fBinsPt[i]      = fBinsEtaEMCALpPbPt[i];
                    if (i < fNBinsPt+1){                  
                        fNRebin[i]  = fBinsEtapPbPtRebin[i];
                        if (modi == 2) 
                            fNRebin[i]  = fBinsEtapPbConvEMCALPtRebin[i];
                        if (modi == 3)
                            fNRebin[i]  = fBinsEtapPbConvPHOSPtRebin[i];
                        if (modi == 4) 
                            fNRebin[i]  = fBinsEtapPbEMCALPtRebin[i];
                        if (modi == 5) 
                            fNRebin[i]  = fBinsEtapPbPHOSPtRebin[i];
                    }    
                }   
	    } 
        //*********************************************************************************************
        //********************************** Eta for PbPb 2.76TeV**************************************
        //*********************************************************************************************    
        } else if( energy.CompareTo("PbPb_2.76TeV") == 0) { 
            fStartPtBin         = 2;
            if (modi == 4) 
                fStartPtBin     = 6;
            fColumn             = 3;
            fRow                = 3;
            
            if (modi != 4 && modi != 2 &&    fNBinsPt > 13) {
                cout << "You have chosen to have more than 13 bins, this is not possible, it will be reduced to 13" << endl;
                fNBinsPt        = 13;
            }
            if (modi == 4 || modi == 2) 
                fColumn         = 5;
            if ((modi == 4 || modi == 2) &&    fNBinsPt > 15) {
                cout << "You have chosen to have more than 15 bins, this is not possible, it will be reduced to 15" << endl;
                fNBinsPt        = 15;
            }
            for (Int_t i = 0; i < fNBinsPt+1; i++) {
                fBinsPt[i]         = fBinsEtaHIPtLHC11hLessBins[i]; //fBinsEtaHIPtLHC11h[i];
                if (i < fNBinsPt+1) fNRebin[i] = fBinsEtaHIPtRebinLHC11hLessBins[i]; // fBinsEtaHIPtRebinLHC11h[i]; //fBinsEtaHIPtRebinLHC11hFinerBinning[i];
            } 

        //*********************************************************************************************
        //********************************** Eta for PbPb 5.02TeV**************************************
        //*********************************************************************************************
        } else if( energy.CompareTo("PbPb_5.02TeV") == 0) {
            fStartPtBin         = 1;
            fColumn             = 3;
            fRow                = 2;
            if (fNBinsPt > 3) {
                cout << "You have chosen to have more than 3 bins, this is not possible, it will be reduced to 3" << endl;
                fNBinsPt        = 3;
            }
            for (Int_t i = 0; i < fNBinsPt+1; i++) {
                fBinsPt[i]         = fBinsEtaHI5020GeVPt[i];
                if (i < fNBinsPt+1) fNRebin[i] = fBinsEtaHI5020GeVPtRebin[i];
            }
         }
    //*************************************************************************************************
    //********************************** Binning for Eta' *********************************************
    //*************************************************************************************************        
    } else if (setPi0.CompareTo("EtaPrim") == 0){
        fNBinsPt                = numberOfBins;
        fBinsPt                 = new Double_t[20];
        fNRebin                 = new Int_t[19];
        //*********************************************************************************************
        //********************************** Eta' for pp 7TeV *****************************************
        //*********************************************************************************************                
        if (energy.CompareTo("7TeV") == 0) {
            fStartPtBin         = 1;
            fColumn             = 3;
            fRow                = 3;

            if (fNBinsPt > 7) {
                cout << "You have chosen directphoton Plots and more than 7 bins for Eta, this is not possible, it will be reduced to 7 bins." << endl;
                fNBinsPt        = 7;
            }
            for (Int_t i = 0; i < fNBinsPt+2; i++) {
                fBinsPt[i]      = fBinsEtaPrim7TeVPt[i];
                if (i < fNBinsPt+1) 
                    fNRebin[i]  = fBinsEtaPrim7TeVPtRebin[i];
            }            
        }
    }
}

//*************************************************************************************************
//******************** GetBinning for general combination *****************************************
//*************************************************************************************************
Int_t GetBinning(   Double_t*  binning,
                    TString   meson   = "Pi0",
                    TString   energy  = "2.76TeV",
                    Int_t     mode    = 2                      
                    ){

    Int_t maxNBins = 0;
    if (meson.CompareTo("Pi0")==0){
        if (energy.CompareTo("2.76TeV") == 0){
            if ( mode == 2 ){
                maxNBins = 24;
                for(Int_t i = 0; i < maxNBins+1; i++){
                    binning[i] = fBinsPi02760GeVPtTrigFullPCMEMC[i];
                } 
            } else if ( mode == 4){
                maxNBins = 26;
                for(Int_t i = 0; i < maxNBins+1; i++){
                    binning[i] = fBinsPi02760GeVPtTrig13g[i];
                }
            } else if ( mode == 10){
                maxNBins = 32;
                for(Int_t i = 0; i < maxNBins+1; i++){
                   binning[i] = fBinsPi02760GeVPtMerged[i];
                   
                }               
            } else if (mode == 20){
                maxNBins = 33;
                for(Int_t i = 0; i < maxNBins+1; i++){
                    binning[i] = fBinsPi02760GeVFullHaitoMerged[i];
                }
            }
        } else if (energy.CompareTo("8TeV") == 0){
            if ( mode == 2 ){
                maxNBins = 46;
                for(Int_t i = 0; i < maxNBins+1; i++){
                    binning[i] = fBinsPi0Combine8TeVPt[i];
                }
            } else if ( mode == 4){
                 maxNBins = 41;
                 for(Int_t i = 0; i < maxNBins+1; i++){
                     binning[i] = fBinsPi0Combine8TeVPt[i];
                 }
            } else if ( mode == 0 ){
                maxNBins = 40;
                for(Int_t i = 0; i < maxNBins+1; i++){
                    binning[i] = fBinsPi08TeVTrigger1Pt[i];
                }
            } else if ( mode == 10 ){
                maxNBins = 53;
                for(Int_t i = 0; i < maxNBins+1; i++){
                    binning[i] = fBinsPi08TeVPtMerged[i];
                }
            } else if ( mode == 11 ){
              maxNBins = 58;
              for(Int_t i = 0; i < maxNBins+1; i++){
                  binning[i] = fBinsPi08TeVPtMergedComb[i];
              }
          }
        }
    } else if (meson.Contains("Eta")){
        if (energy.CompareTo("2.76TeV") == 0){
            maxNBins = 12;
            for(Int_t i = 0; i < maxNBins+1; i++){
                binning[i] = fBinsEta2760GeVPtTrig11a[i];
            } 
        } else if (energy.CompareTo("8TeV") == 0){
            if ( mode == 2 || mode == 4 ){
                maxNBins = 25;
                for(Int_t i = 0; i < maxNBins+1; i++){
                    binning[i] = fBinsEtaCombine8TeVPt[i];
                }
            } else if ( mode == 0 ){
                maxNBins = 19;
                for(Int_t i = 0; i < maxNBins+1; i++){
                    binning[i] = fBinsEta8TeVConvTrigger1Pt[i];
                }
            }    
        }
        
    }
    return maxNBins;
}
